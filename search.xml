<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++环境设置</title>
    <url>/2020/06/28/C-%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<hr>
<a id="more"></a>
<h1 id="安装GNU的C-C-编译器"><a href="#安装GNU的C-C-编译器" class="headerlink" title="安装GNU的C/C++编译器"></a>安装GNU的C/C++编译器</h1><h2 id="UNIX-Linux上的安装"><a href="#UNIX-Linux上的安装" class="headerlink" title="UNIX/Linux上的安装"></a>UNIX/Linux上的安装</h2><p>首先在命令行使用以下命令确认系统是否安装了GCC：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> g++ -v</span></span><br></pre></td></tr></table></figure>
<p>如果系统已经安装了GNU编译器，会显示如下的消息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Using built-in specs.</span><br><span class="line">COLLECT_GCC=gcc</span><br><span class="line">COLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-redhat-linux/4.8.5/lto-wrapper</span><br><span class="line">Target: x86_64-redhat-linux</span><br><span class="line">Configured with: ../configure --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-bootstrap --enable-shared --enable-threads=posix --enable-checking=release --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-linker-build-id --with-linker-hash-style=gnu --enable-languages=c,c++,objc,obj-c++,java,fortran,ada,go,lto --enable-plugin --enable-initfini-array --disable-libgcj --with-isl=/builddir/build/BUILD/gcc-4.8.5-20150702/obj-x86_64-redhat-linux/isl-install --with-cloog=/builddir/build/BUILD/gcc-4.8.5-20150702/obj-x86_64-redhat-linux/cloog-install --enable-gnu-indirect-function --with-tune=generic --with-arch_32=x86-64 --build=x86_64-redhat-linux</span><br><span class="line">Thread model: posix</span><br><span class="line">gcc version 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC)</span><br></pre></td></tr></table></figure>
<p>若未安装，可以使用以下三条命令进行安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install gcc</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install gcc-c++</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install gdb</span></span><br></pre></td></tr></table></figure>
<h2 id="Windows上的安装"><a href="#Windows上的安装" class="headerlink" title="Windows上的安装"></a>Windows上的安装</h2><p>首先访问www.mingw.org，右上方进入下载页面，下载最新版本的MinGW安装程序。</p>
<p><img src="http://images.yingwai.top/picgo/gccf1.png" alt=""></p>
<p>安装完成后将 MinGW\bin 路径添加到系统环境变量里。</p>
<p>然后打开 MinGW Installation Manager，点击All Packages把想要安装的Package选中或点击Basic Setup选择mingw32-gcc-g++-bin：</p>
<p><img src="http://images.yingwai.top/picgo/gccf2.png" alt=""></p>
<p>选择完后点击菜单栏Installation中的Apply changes选项，如果出现某种原因安装未能成功，选择review changes选项重新安装。</p>
<p>完成安装后可以在命令行中输入 <code>g++ -v</code>、 <code>gcc -v</code> 和 <code>mingw32-make -v</code> 检查是否安装成功。</p>
<h1 id="g-应用说明"><a href="#g-应用说明" class="headerlink" title="g++ 应用说明"></a>g++ 应用说明</h1><p>helloworld.cpp 中包含如下简单代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello, world!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最简单的编译方式为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> g++ helloworld.cpp</span></span><br></pre></td></tr></table></figure>
<p>由于命令行中未指定可执行程序的文件名，编译器采用默认的 a.out。程序可以这样来运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./a.out</span></span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure>
<p>通常我们使用 <code>-o</code> 选项指定可执行程序的文件名，以下实例生成一个 helloworld 的可执行文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> g++ helloworld.cpp -o helloworld</span></span><br></pre></td></tr></table></figure>
<p>执行 helloworld：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./helloworld</span></span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure>
<p>如果是多个 C++ 代码文件，如 ray1.cpp、ray2.cpp，编译命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> g++ ray1.cpp ray2.cpp -o ray</span></span><br></pre></td></tr></table></figure>
<p>生成一个 ray 可执行文件。</p>
<h2 id="g-常用命令选项"><a href="#g-常用命令选项" class="headerlink" title="g++ 常用命令选项"></a>g++ 常用命令选项</h2><p><a href="https://www.runoob.com/cplusplus/cpp-environment-setup.html" target="_blank" rel="noopener">https://www.runoob.com/cplusplus/cpp-environment-setup.html</a></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>选项</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>-ansi</code></td>
<td>只支持 ANSI 标准的 C 语法。这一选项将禁止 GNU C 的某些特色， 例如 asm 或 typeof 关键词。</td>
</tr>
<tr>
<td><code>-c</code></td>
<td>只编译并生成目标文件。</td>
</tr>
<tr>
<td><code>-DMACRO</code></td>
<td>以字符串”1”定义 MACRO 宏。</td>
</tr>
<tr>
<td><code>-E</code></td>
<td>只运行 C 预编译器。</td>
</tr>
<tr>
<td><code>-g</code></td>
<td>生成调试信息。GNU 调试器可利用该信息。</td>
</tr>
<tr>
<td><code>-IDIRECTORY</code></td>
<td>指定额外的头文件搜索路径DIRECTORY。</td>
</tr>
<tr>
<td><code>-LDIRECTORY</code></td>
<td>指定额外的函数库搜索路径DIRECTORY。</td>
</tr>
<tr>
<td><code>-lLIBRARY</code></td>
<td>连接时搜索指定的函数库LIBRARY。</td>
</tr>
<tr>
<td><code>-m486</code></td>
<td>针对 486 进行代码优化。</td>
</tr>
<tr>
<td><code>-o</code></td>
<td>FILE 生成指定的输出文件。用在生成可执行文件时。</td>
</tr>
<tr>
<td><code>-O0</code></td>
<td>不进行优化处理。</td>
</tr>
<tr>
<td><code>-O</code></td>
<td>或 <code>-O1</code> 优化生成代码。</td>
</tr>
<tr>
<td><code>-O2</code></td>
<td>进一步优化。</td>
</tr>
<tr>
<td><code>-O3</code></td>
<td>比 <code>-O2</code> 更进一步优化，包括 inline 函数。</td>
</tr>
<tr>
<td><code>-shared</code></td>
<td>生成共享目标文件。通常用在建立共享库时。</td>
</tr>
<tr>
<td><code>-static</code></td>
<td>禁止使用共享连接。</td>
</tr>
<tr>
<td><code>-UMACRO</code></td>
<td>取消对 MACRO 宏的定义。</td>
</tr>
<tr>
<td><code>-w</code></td>
<td>不生成任何警告信息。</td>
</tr>
<tr>
<td><code>-Wall</code></td>
<td>生成所有警告信息。</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>Env</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>CCF推荐国际学术会议和期刊目录（网络与信息安全）</title>
    <url>/2020/04/20/CCF%E6%8E%A8%E8%8D%90%E5%9B%BD%E9%99%85%E5%AD%A6%E6%9C%AF%E4%BC%9A%E8%AE%AE%E5%92%8C%E6%9C%9F%E5%88%8A%E7%9B%AE%E5%BD%95%EF%BC%88%E7%BD%91%E7%BB%9C%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%EF%BC%89/</url>
    <content><![CDATA[<p><a href="https://www.ccf.org.cn/c/2019-04-25/663625.shtml" target="_blank" rel="noopener">https://www.ccf.org.cn/c/2019-04-25/663625.shtml</a></p>
<a id="more"></a>
<h2 id="中国计算机学会推荐国际学术期刊（网络与信息安全）"><a href="#中国计算机学会推荐国际学术期刊（网络与信息安全）" class="headerlink" title="中国计算机学会推荐国际学术期刊（网络与信息安全）"></a>中国计算机学会推荐国际学术期刊（网络与信息安全）</h2><h3 id="A类"><a href="#A类" class="headerlink" title="A类"></a>A类</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">刊物简称</th>
<th style="text-align:center">刊物全称</th>
<th style="text-align:center">出版社</th>
<th style="text-align:center">网址</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">TDSC</td>
<td style="text-align:center">IEEE Transactions on Dependable and Secure Computing</td>
<td style="text-align:center">IEEE</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/journals/tdsc/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/journals/tdsc/</a></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">TIFS</td>
<td style="text-align:center">IEEE Transactions on Information Forensics and Security</td>
<td style="text-align:center">IEEE</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/journals/tifs/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/journals/tifs/</a></td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center"></td>
<td style="text-align:center">Journal of Cryptology</td>
<td style="text-align:center">Springer</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/journals/joc/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/journals/joc/</a></td>
</tr>
</tbody>
</table>
</div>
<h3 id="B类"><a href="#B类" class="headerlink" title="B类"></a>B类</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">刊物简称</th>
<th style="text-align:center">刊物全称</th>
<th style="text-align:center">出版社</th>
<th style="text-align:center">网址</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">TOPS</td>
<td style="text-align:center">ACM Transactions on Privacy and Security</td>
<td style="text-align:center">ACM</td>
<td style="text-align:center"><a href="https://tops.acm.org/" target="_blank" rel="noopener">https://tops.acm.org/</a></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center"></td>
<td style="text-align:center">Computers &amp; Security</td>
<td style="text-align:center">Elsevier</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/journals/compsec/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/journals/compsec/</a></td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center"></td>
<td style="text-align:center">Designs, Codes and Cryptography</td>
<td style="text-align:center">Springer</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/journals/dcc/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/journals/dcc/</a></td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">JCS</td>
<td style="text-align:center">Journal of Computer Security</td>
<td style="text-align:center">IOS Press</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/journals/jcs/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/journals/jcs/</a></td>
</tr>
</tbody>
</table>
</div>
<h3 id="C类"><a href="#C类" class="headerlink" title="C类"></a>C类</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">刊物简称</th>
<th style="text-align:center">刊物全称</th>
<th style="text-align:center">出版社</th>
<th style="text-align:center">网址</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">CLSR</td>
<td style="text-align:center">Computer Law and Security Review</td>
<td style="text-align:center">Elsevier</td>
<td style="text-align:center"><a href="http://www.journals.elsevier.com/computer-law-and-security-review/" target="_blank" rel="noopener">http://www.journals.elsevier.com/computer-law-and-security-review/</a></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center"></td>
<td style="text-align:center">EURASIP Journal on Information Security</td>
<td style="text-align:center">Springer</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/journals/ejisec/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/journals/ejisec/</a></td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center"></td>
<td style="text-align:center">IET Information Security</td>
<td style="text-align:center">IET</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/journals/iet-ifs/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/journals/iet-ifs/</a></td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">IMCS</td>
<td style="text-align:center">Information Management &amp; Computer Security</td>
<td style="text-align:center">Emerald</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/journals/imcs/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/journals/imcs/</a></td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">IJICS</td>
<td style="text-align:center">International Journal of Information and Computer Security</td>
<td style="text-align:center">Inderscience</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/journals/ijics/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/journals/ijics/</a></td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">IJISP</td>
<td style="text-align:center">International Journal of Information Security and Privacy</td>
<td style="text-align:center">Idea Group Inc</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/journals/ijisp/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/journals/ijisp/</a></td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">JISA</td>
<td style="text-align:center">Journal of Information Security and Application</td>
<td style="text-align:center">Elsevier</td>
<td style="text-align:center"><a href="https://dblp.uni-trier.de/db/journals/istr/" target="_blank" rel="noopener">https://dblp.uni-trier.de/db/journals/istr/</a></td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">SCN</td>
<td style="text-align:center">Security and Communication Networks</td>
<td style="text-align:center">Wiley</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/journals/scn/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/journals/scn/</a></td>
</tr>
</tbody>
</table>
</div>
<h2 id="中国计算机学会推荐国际学术会议（网络与信息安全）"><a href="#中国计算机学会推荐国际学术会议（网络与信息安全）" class="headerlink" title="中国计算机学会推荐国际学术会议（网络与信息安全）"></a>中国计算机学会推荐国际学术会议（网络与信息安全）</h2><h3 id="A类-1"><a href="#A类-1" class="headerlink" title="A类"></a>A类</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">会议简称</th>
<th style="text-align:center">会议全称</th>
<th style="text-align:center">出版社</th>
<th style="text-align:center">网址</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">CCS</td>
<td style="text-align:center">ACM Conference on Computer and Communications Security</td>
<td style="text-align:center">ACM</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/ccs/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/ccs/</a></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">EUROCRYPT</td>
<td style="text-align:center">European Cryptology Conference</td>
<td style="text-align:center">Springer</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/eurocrypt/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/eurocrypt/</a></td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">S&amp;P</td>
<td style="text-align:center">IEEE Symposium on Security and Privacy</td>
<td style="text-align:center">IEEE</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/sp/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/sp/</a></td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">CRYPTO</td>
<td style="text-align:center">International Cryptology Conference</td>
<td style="text-align:center">Springer</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/crypto/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/crypto/</a></td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">USENIX Security</td>
<td style="text-align:center">Usenix Security Symposium</td>
<td style="text-align:center">USENIX Association</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/uss/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/uss/</a></td>
</tr>
</tbody>
</table>
</div>
<h3 id="B类-1"><a href="#B类-1" class="headerlink" title="B类"></a>B类</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">会议简称</th>
<th style="text-align:center">会议全称</th>
<th style="text-align:center">出版社</th>
<th style="text-align:center">网址</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">ACSAC</td>
<td style="text-align:center">Annual Computer Security Applications Conference</td>
<td style="text-align:center">IEEE</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/acsac/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/acsac/</a></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">ASIACRYPT</td>
<td style="text-align:center">Annual International Conference on the Theory and Application of Cryptology and Information Security</td>
<td style="text-align:center">Springer</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/asiacrypt/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/asiacrypt/</a></td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">ESORICS</td>
<td style="text-align:center">European Symposium on Research in Computer Security</td>
<td style="text-align:center">Springer</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/esorics/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/esorics/</a></td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">FSE</td>
<td style="text-align:center">Fast Software Encryption</td>
<td style="text-align:center">Springer</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/fse/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/fse/</a></td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">CSFW</td>
<td style="text-align:center">IEEE Computer Security Foundations Workshop</td>
<td style="text-align:center">IEEE</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/csfw/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/csfw/</a></td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">SRDS</td>
<td style="text-align:center">IEEE International Symposium on Reliable Distributed Systems</td>
<td style="text-align:center">IEEE</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/srds/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/srds/</a></td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">CHES</td>
<td style="text-align:center">International Conference on Cryptographic Hardware and Embedded Systems</td>
<td style="text-align:center">Springer</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/ches/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/ches/</a></td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">DSN</td>
<td style="text-align:center">International Conference on Dependable Systems and Networks</td>
<td style="text-align:center">IEEE/IFIP</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/dsn/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/dsn/</a></td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">RAID</td>
<td style="text-align:center">International Symposium on Recent Advances in Intrusion Detection</td>
<td style="text-align:center">Springer</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/raid/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/raid/</a></td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">PKC</td>
<td style="text-align:center">International Workshop on Practice and Theory in Public Key Cryptography</td>
<td style="text-align:center">Springer</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/pkc/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/pkc/</a></td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">NDSS</td>
<td style="text-align:center">ISOC Network and Distributed System Security Symposium</td>
<td style="text-align:center">ISOC</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/ndss/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/ndss/</a></td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center">TCC</td>
<td style="text-align:center">Theory of Cryptography Conference</td>
<td style="text-align:center">Springer</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/tcc/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/tcc/</a></td>
</tr>
</tbody>
</table>
</div>
<h3 id="C类-1"><a href="#C类-1" class="headerlink" title="C类"></a>C类</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">序号</th>
<th style="text-align:center">会议简称</th>
<th style="text-align:center">会议全称</th>
<th style="text-align:center">出版社</th>
<th style="text-align:center">网址</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">WiSec</td>
<td style="text-align:center">ACM Conference on Security and Privacy in Wireless and Mobile Networks</td>
<td style="text-align:center">ACM</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/wisec/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/wisec/</a></td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">SACMAT</td>
<td style="text-align:center">ACM Symposium on Access Control Models and Technologies</td>
<td style="text-align:center">ACM</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/sacmat/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/sacmat/</a></td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">DRM</td>
<td style="text-align:center">ACM Workshop on Digital Rights Management</td>
<td style="text-align:center">ACM</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/drm/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/drm/</a></td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">IH&amp;MMSec</td>
<td style="text-align:center">ACM Workshop on Information Hiding and Multimedia Security</td>
<td style="text-align:center">ACM</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/ih/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/ih/</a></td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">ACNS</td>
<td style="text-align:center">Applied Cryptography and Network Security</td>
<td style="text-align:center">Springer</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/acns/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/acns/</a></td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">AsiaCCS</td>
<td style="text-align:center">Asia Conference on Computer and Communications Security</td>
<td style="text-align:center">ACM</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/ccs/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/ccs/</a></td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">ACISP</td>
<td style="text-align:center">Australasia Conference on Information Security and Privacy</td>
<td style="text-align:center">Springer</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/acisp/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/acisp/</a></td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">CT-RSA</td>
<td style="text-align:center">Cryptographer’s Track at RSA Conference</td>
<td style="text-align:center">Springer</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/ctrsa/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/ctrsa/</a></td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">DIMVA</td>
<td style="text-align:center">Detection of Intrusions and Malware &amp; Vulnerability Assessment</td>
<td style="text-align:center"></td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/dimva/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/dimva/</a></td>
</tr>
<tr>
<td style="text-align:center">10</td>
<td style="text-align:center">DFRWS</td>
<td style="text-align:center">Digital Forensic Research Workshop</td>
<td style="text-align:center">Elsevier</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/dfrws/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/dfrws/</a></td>
</tr>
<tr>
<td style="text-align:center">11</td>
<td style="text-align:center">FC</td>
<td style="text-align:center">Financial Cryptography and Data Security</td>
<td style="text-align:center">Springer</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/fc/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/fc/</a></td>
</tr>
<tr>
<td style="text-align:center">12</td>
<td style="text-align:center">TrustCom</td>
<td style="text-align:center">IEEE International Conference on Trust, Security and Privacy in Computing and Communications</td>
<td style="text-align:center">IEEE</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/trustcom/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/trustcom/</a></td>
</tr>
<tr>
<td style="text-align:center">13</td>
<td style="text-align:center">SEC</td>
<td style="text-align:center">IFIP International Information Security Conference</td>
<td style="text-align:center">Springer</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/sec/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/sec/</a></td>
</tr>
<tr>
<td style="text-align:center">14</td>
<td style="text-align:center">IFIP WG 11.9</td>
<td style="text-align:center">IFIP WG 11.9 International Conference on Digital Forensics</td>
<td style="text-align:center">Springer</td>
<td style="text-align:center">*<a href="http://www.ifip119.org/Conferences/" target="_blank" rel="noopener">http://www.ifip119.org/Conferences/</a></td>
</tr>
<tr>
<td style="text-align:center">15</td>
<td style="text-align:center">ISC</td>
<td style="text-align:center">Information Security Conference</td>
<td style="text-align:center">Springer</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/isw/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/isw/</a></td>
</tr>
<tr>
<td style="text-align:center">16</td>
<td style="text-align:center">ICDF2C</td>
<td style="text-align:center">International Conference on Digital Forensics &amp; Cyber Crime</td>
<td style="text-align:center">Springer</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/icdf2c/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/icdf2c/</a></td>
</tr>
<tr>
<td style="text-align:center">17</td>
<td style="text-align:center">ICICS</td>
<td style="text-align:center">International Conference on Information and Communications Security</td>
<td style="text-align:center">Springer</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/icics/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/icics/</a></td>
</tr>
<tr>
<td style="text-align:center">18</td>
<td style="text-align:center">SecureComm</td>
<td style="text-align:center">International Conference on Security and Privacy in Communication Networks</td>
<td style="text-align:center">ACM</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/securecomm/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/securecomm/</a></td>
</tr>
<tr>
<td style="text-align:center">19</td>
<td style="text-align:center">NSPW</td>
<td style="text-align:center">New Security Paradigms Workshop</td>
<td style="text-align:center">ACM</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/nspw/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/nspw/</a></td>
</tr>
<tr>
<td style="text-align:center">20</td>
<td style="text-align:center">PAM</td>
<td style="text-align:center">Passive and Active Measurement Conference</td>
<td style="text-align:center">Springer</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/pam/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/pam/</a></td>
</tr>
<tr>
<td style="text-align:center">21</td>
<td style="text-align:center">PETS</td>
<td style="text-align:center">Privacy Enhancing Technologies Symposium</td>
<td style="text-align:center">Springer</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/pet/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/pet/</a></td>
</tr>
<tr>
<td style="text-align:center">22</td>
<td style="text-align:center">SAC</td>
<td style="text-align:center">Selected Areas in Cryptography</td>
<td style="text-align:center">Springer</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/sacrypt/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/sacrypt/</a></td>
</tr>
<tr>
<td style="text-align:center">23</td>
<td style="text-align:center">SOUPS</td>
<td style="text-align:center">Symposium On Usable Privacy and Security</td>
<td style="text-align:center">USENIX</td>
<td style="text-align:center"><a href="http://dblp.uni-trier.de/db/conf/soups/" target="_blank" rel="noopener">http://dblp.uni-trier.de/db/conf/soups/</a></td>
</tr>
<tr>
<td style="text-align:center">24</td>
<td style="text-align:center">HotSec</td>
<td style="text-align:center">USENIX Workshop on Hot Topics in Security</td>
<td style="text-align:center">USENIX</td>
<td style="text-align:center">*<a href="http://www.usenix.org/events/" target="_blank" rel="noopener">http://www.usenix.org/events/</a></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>Papers</category>
      </categories>
      <tags>
        <tag>密码学</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客NexT主题翻页按钮显示不正常的解决方法</title>
    <url>/2020/05/11/Hexo%E5%8D%9A%E5%AE%A2NexT%E4%B8%BB%E9%A2%98%E7%BF%BB%E9%A1%B5%E6%8C%89%E9%92%AE%E6%98%BE%E7%A4%BA%E4%B8%8D%E6%AD%A3%E5%B8%B8%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>搭好博客后，上去发现底下的翻页按钮显示有问题，显示为<code>&lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt;</code>，原因不明：</p>
<a id="more"></a>
<p><img src="http://images.yingwai.top/picgo/fanyef1.png" alt=""></p>
<p><strong>解决办法：</strong></p>
<p>最简单的办法就是将<code>&lt;i class=&quot;fa fa-angle-right&quot;&gt;&lt;/i&gt;</code>这个不能正常显示的字体图标改成一般的字符，我就是按照网上的方法改成正常的一般左右键字符 “ &gt; ”。</p>
<p>到<code>\themes\next\layout\_partials</code>目录下找到<code>pagination.swig</code>文件，将</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if page.prev or page.next %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line">    &#123;&#123;</span><br><span class="line">      paginator(&#123;</span><br><span class="line">        prev_text: '<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-angle-left"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>',</span><br><span class="line">        next_text: '<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-angle-right"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>',</span><br><span class="line">        mid_size: 1</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<p>改成</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if page.prev or page.next %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line">    &#123;&#123;</span><br><span class="line">      paginator(&#123;</span><br><span class="line">        prev_text: '<span class="tag">&lt;<span class="name">',</span></span></span><br><span class="line"><span class="tag">        <span class="attr">next_text:</span> '&gt;</span>',</span><br><span class="line">        mid_size: 1</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<p>重新部署即可看到已经正常显示了：</p>
<p><img src="http://images.yingwai.top/picgo/fanyef2.png" alt=""></p>
]]></content>
      <categories>
        <category>Env</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建</title>
    <url>/2020/04/11/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<hr>
<a id="more"></a>
<h2 id="Hexo简介"><a href="#Hexo简介" class="headerlink" title="Hexo简介"></a>Hexo简介</h2><p>​    Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h2 id="搭建流程（Windows）"><a href="#搭建流程（Windows）" class="headerlink" title="搭建流程（Windows）"></a>搭建流程（Windows）</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p>到 <a href="https://git-scm.com/download" target="_blank" rel="noopener">https://git-scm.com/download</a> 选择对应的平台进行下载安装即可。</p>
<h4 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h4><p>到 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a> 下载安装即可。（Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本）</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>安装需要借助npm包管理器，由于在国内这个镜像源很慢，因此可以利用npm安装cnpm淘宝镜像源，在命令行中输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g cnpm --registry=https://registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>
<p>安装完后就可以使用cnpm安装hexo：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cnpm install -g hexo-cli</span></span><br></pre></td></tr></table></figure>
<p>可以用<code>hexo -v</code>来验证是否安装成功。</p>
<h3 id="正式搭建"><a href="#正式搭建" class="headerlink" title="正式搭建"></a>正式搭建</h3><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>建立一个名为 <em>Blog</em> 的文件夹，在命令行中进入这个文件夹，在命令行中输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init</span></span><br></pre></td></tr></table></figure>
<p>初始化完成后，在命令行中输入<code>hexo s</code>，此时在浏览器中输入<code>localhost:4000</code>就可以看到博客已经创建好了，并且默认创建了一篇文章。</p>
<p>确认过后，键盘按 <em>Ctrl + C</em> 即可停止服务。</p>
<h4 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h4><p>首先登陆到<a href="https://github.com/" target="_blank" rel="noopener">Github</a>，新建一个仓库，命名为 “<strong>你的Github昵称.github.io</strong>“。</p>
<p>然后需要安装一个git部署插件，在命令行中打开 <em>Blog</em> 目录，输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cnpm install --save hexo-deployer-git</span></span><br></pre></td></tr></table></figure>
<p>打开 <em>Blog</em> 目录下的站点配置文件，在文件最后的 <strong><em>repo</em></strong> 处输入刚刚创建的仓库的地址并在下方添加一行：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Deployment</span></span><br><span class="line"><span class="meta">## Docs: https:<span class="comment">//hexo.io/docs/deployment.html</span></span></span><br><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repo:</span> https:<span class="comment">//github.com/xxx/xxx.github.io.git</span></span><br><span class="line"><span class="symbol">  branch:</span> master	<span class="meta"># 指定分支，不填默认为master</span></span><br></pre></td></tr></table></figure>
<p>保存退出后，在命令行中输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo d</span></span><br></pre></td></tr></table></figure>
<p>部署到远端，此时刷新一下自己的Github仓库页面，会发现多了很多文件。在浏览器中访问 <strong>xxx.github.io</strong>，就可以看到博客已经成功部署。</p>
<h2 id="使用Hexo"><a href="#使用Hexo" class="headerlink" title="使用Hexo"></a>使用Hexo</h2><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><p>在命令行中输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo n <span class="string">"文章标题"</span></span></span><br></pre></td></tr></table></figure>
<p>会在博客目录的<code>/source/_posts</code>目录下生成一个markdown文件，使用编辑器打开即可编辑这篇文章。</p>
<h3 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h3><p>在命令行中依次输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo clean	<span class="comment"># 清理缓存文件和已生成的静态文件</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g	<span class="comment"># 生成静态文件</span></span></span><br></pre></td></tr></table></figure>
<p>再使用<code>hexo s</code>命令就可以在<code>localhost:4000</code>页面看到新生成的文章已经发布到了博客上面。</p>
]]></content>
      <categories>
        <category>Env</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Java接口、多态总结</title>
    <url>/2020/08/24/Java%E6%8E%A5%E5%8F%A3%E3%80%81%E5%A4%9A%E6%80%81%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<hr>
<a id="more"></a>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口是功能的集合，同样可看做是一种数据类型，是比抽象类更为抽象的”类”。<br>接口只描述所应该具备的方法，并没有具体实现，具体的实现由接口的实现类(相当于接口的子类)来完成。这样将功能的定义与实现分离，优化了程序设计。<br>请记住：一切事物均有功能，即一切事物均有接口。</p>
<p>接口的出现避免了单继承的局限性。父类中定义的事物的基本功能。接口中定义的事物的扩展功能。</p>
<h3 id="接口的特点"><a href="#接口的特点" class="headerlink" title="接口的特点"></a>接口的特点</h3><ol>
<li><p>定义一个接口用 <code>interface</code> 关键字：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名 </span>&#123;</span><br><span class="line">    抽象方法<span class="number">1</span>;</span><br><span class="line">    抽象方法<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>一个类实现一个接口，实现 <code>implements</code> 关键字：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名 <span class="keyword">implements</span> 接口名 </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>接口不能直接创建对象</p>
<p>通过多态的方式，由子类来创建对象，接口多态。</p>
</li>
</ol>
<h3 id="接口中的成员特点"><a href="#接口中的成员特点" class="headerlink" title="接口中的成员特点"></a>接口中的成员特点</h3><ul>
<li><p>成员变量：</p>
<p>只能是 <code>final</code> 修饰的常量</p>
<p>默认修饰符：<code>public static final</code></p>
</li>
<li><p>构造方法：</p>
<p>无</p>
</li>
<li><p>成员方法：</p>
<p>只能是抽象方法</p>
<p>默认修饰符：<code>public abstract</code></p>
</li>
</ul>
<h3 id="类与类、类与接口、接口与接口之间的关系"><a href="#类与类、类与接口、接口与接口之间的关系" class="headerlink" title="类与类、类与接口、接口与接口之间的关系"></a>类与类、类与接口、接口与接口之间的关系</h3><ul>
<li><p>类与类：</p>
<p>继承关系，单继承，可以是多层继承</p>
</li>
<li><p>类与接口：</p>
<p>实现关系，单实现，也可以多实现（因为没有方法冲突的问题）</p>
</li>
<li><p>接口与接口：</p>
<p>继承关系，单继承，也可以是多继承</p>
</li>
</ul>
<p>Java中的类可以继承一个父类的同时，实现多个接口</p>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态是继封装、继承之后，面向对象的第三大特性。</p>
<p>现实事物经常会体现出多种形态，如学生，学生是人的一种，则一个具体的同学张三既是学生也是人，即出现两种形态。</p>
<p>Java作为面向对象的语言，同样可以描述一个事物的多种形态。如Student类继承了Person类，一个Student的对象便既是Student，又是Person。</p>
<p>Java中多态的代码体现在一个子类对象(实现类对象)既可以给这个子类(实现类对象)引用变量赋值，又可以给这个子类(实现类对象)的父类(接口)变量赋值。</p>
<p>如Student类可以为Person类的子类。那么一个Student对象既可以赋值给一个Student类型的引用，也可以赋值给一个Person类型的引用。</p>
<p>最终多态体现为父类引用变量可以指向子类对象。</p>
<p>多态的前提是必须有子父类关系或者类实现接口关系，否则无法完成多态。</p>
<p>在使用多态后的父类引用变量调用方法时，会调用子类重写后的方法。</p>
<h3 id="多态使用的前提"><a href="#多态使用的前提" class="headerlink" title="多态使用的前提"></a>多态使用的前提</h3><ol>
<li>有继承或者实现关系</li>
<li>要方法重写</li>
<li>父类引用指向子类对象</li>
</ol>
<h3 id="多态的成员访问特点"><a href="#多态的成员访问特点" class="headerlink" title="多态的成员访问特点"></a>多态的成员访问特点</h3><p>方法的运行看右边（子类），其它都看左边（父类）。</p>
<h3 id="多态的利弊"><a href="#多态的利弊" class="headerlink" title="多态的利弊"></a>多态的利弊</h3><p>好处：提高了程序的扩展性</p>
<p>弊端：不能访问子类特有的功能</p>
<h3 id="多态的分类"><a href="#多态的分类" class="headerlink" title="多态的分类"></a>多态的分类</h3><ul>
<li><p>类的多态</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(“重写父类抽象方法”);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类的多态使用</span></span><br><span class="line">Fu fu= <span class="keyword">new</span> Zi();</span><br></pre></td></tr></table></figure>
</li>
<li><p>接口的多态</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">implements</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(“重写接口抽象方法”);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口的多态使用</span></span><br><span class="line">Fu fu = <span class="keyword">new</span> Zi();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="instanceof-关键字"><a href="#instanceof-关键字" class="headerlink" title="instanceof 关键字"></a><code>instanceof</code> 关键字</h2><p>格式：<code>对象名 instanceof 类名</code></p>
<p>返回值：<code>true, false</code></p>
<p>作用：判断指定的对象是否为给定类创建的对象</p>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java构造方法总结</title>
    <url>/2020/08/24/Java%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<hr>
<a id="more"></a>
<h2 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a><code>this</code> 关键字</h2><p><code>this</code> 关键字，本类对象的引用</p>
<ul>
<li><p><code>this</code> 是在方法中使用的，哪个对象调用了该方法，那么 <code>this</code> 就代表调用该方法的对象引用</p>
</li>
<li><p><code>this</code> 什么时候存在的？当创建对象的时候，<code>this</code> 存在的</p>
</li>
<li><p><code>this</code> 的作用：用来区别同名的成员变量与局部变量（<code>this.成员变量</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>用来给类的成员进行初始化操作</p>
<ul>
<li><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 类名 (参数列表) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>构造方法的特点：</p>
<ol>
<li>方法名与类名想同</li>
<li>没有返回值，也没有返回值类型，连 <code>void</code> 也没有</li>
</ol>
</li>
<li><p>构造方法什么时候会被调用执行？</p>
<p>只有在创建对象的时候才可以被调用</p>
</li>
</ul>
<h2 id="super-关键字"><a href="#super-关键字" class="headerlink" title="super 关键字"></a><code>super</code> 关键字</h2><p>指的是父类的存储空间（理解为父类的引用）</p>
<ul>
<li><p>调用父类的成员变量：</p>
<p><code>super.成员变量;</code></p>
</li>
<li><p>调用父类的构造方法：</p>
<p><code>super(参数);</code></p>
</li>
<li><p>调用方法的成员方法：</p>
<p><code>super.成员方法();</code></p>
</li>
</ul>
<h2 id="继承中的构造方法注意事项"><a href="#继承中的构造方法注意事项" class="headerlink" title="继承中的构造方法注意事项"></a>继承中的构造方法注意事项</h2><ol>
<li><p>如果我们手动给出了构造方法，编译器不会再给我们提供默认的空参数构造方法；</p>
<p>如果我们没有写任何的构造方法，编译器提供给我们一个空参数构造方法</p>
</li>
<li><p>在构造方法中，默认的第一条语句为 <code>super();</code></p>
<p>它是用来访问父类中的空参数构造方法，进行父类成员的初始化操作</p>
</li>
<li><p>当父类中没有空参数构造方法的时候，怎么办？</p>
<ul>
<li><p>通过 <code>super(参数);</code> 访问父类有参数的构造方法</p>
</li>
<li><p>通过 <code>this(参数);</code> 访问本类中其他构造方法</p>
<p>注意：<em>本类中的其他构造方法已经能够正常访问父类构造方法</em></p>
</li>
</ul>
</li>
<li><p><code>super(参数);</code> 与 <code>this(参数);</code> 不能同时在构造方法中存在</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java面向对象</title>
    <url>/2020/08/27/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<hr>
<a id="more"></a>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul>
<li><p>继承：是指在一个现有类的基础上去构建一个新的类，构建出来的新类被称作子类，现有类被称作父类，子类会自动拥有父类所有。</p>
</li>
<li><p>继承的好处：可继承的属性和方法。</p>
<ul>
<li>提高了代表的可维护性</li>
<li>提高了代码的复用性</li>
<li>让类与类之间产生了继承关系</li>
</ul>
</li>
<li><p>继承的弊端：</p>
<ul>
<li>类与类之间的耦合度过高</li>
</ul>
</li>
<li><p>继承特点：</p>
<ul>
<li><p>java中类只能够单继承，不能多继承，可以多层继承</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yy</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> <span class="keyword">extends</span> <span class="title">Yy</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>所有的类都直接或者间接的继承了 Object类，Object类称为祖宗类</p>
</li>
</ul>
</li>
<li><p>继承的注意事项：</p>
<ol>
<li><p>使用关键字 <code>extends</code> 让类与类之间 产生继承关系</p>
</li>
<li><p>父类私有的成员，子类不能继承，因为根本看不到</p>
</li>
<li><p>不能为了继承某个功能而随意进行继承操作， 必须要符合 is a 的关系</p>
<p>苹果 is a 水果</p>
<p>男人 is a 人</p>
<p>狗  is a 人 ， 这种情况就不能继承了</p>
</li>
</ol>
</li>
<li><p>继承中的成员变量关系：</p>
<ul>
<li><p>不同名的变量：</p>
<p>子类直接继承使用</p>
</li>
<li><p>同名的变量：</p>
<p>默认访问的是子类自己的成员变量, 想访问父类中的同名变量，请使用 <code>super.成员变量;</code></p>
</li>
</ul>
</li>
<li><p>继承中的成员方法关系：</p>
<ul>
<li><p>不同名的方法：</p>
<p>子类直接继承使用</p>
</li>
<li><p>同名的方法：</p>
<p>默认访问的是子类自己的成员方法，想访问父类中的同名方法，请使用 super.成员方法();</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>super:用来表示当前对象中包含的父类对象空间的引用</p>
<ul>
<li><p>调用父类的成员变量：</p>
<p><code>super.成员变量;</code></p>
</li>
<li><p>调用方法的成员方法:</p>
<p><code>super.成员方法();</code></p>
</li>
</ul>
</li>
<li><p>方法重写(override)：指在子父类中，出现了方法声明相同的情况，也叫做方法覆盖，方法复写</p>
<ul>
<li>方法重写的注意事项：<ol>
<li>子类的方法声明要与父类相同</li>
<li>子类要重写方法的方法，方法的权限修饰符不能比父类的更低</li>
<li>父类私有的方法，子类不能够进行方法重写</li>
</ol>
</li>
</ul>
</li>
<li><p>方法重载(overload)：指 在同一个类中，多个方法名称相同，它们的参数列表不同(个数不同，数据类型不同)</p>
</li>
</ul>
<h2 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h2><ul>
<li><p>抽象方法： 方法只有声明部分，没有方法体</p>
</li>
<li><p>抽象类： 包含抽象方法的类，一定是抽象类</p>
<p>使用 <code>abstract</code> 修饰的类，是抽象类</p>
</li>
<li><p>抽象类的特点：</p>
<ol>
<li>抽象类与抽象方法都必须使用 <code>abstract</code> 来修饰</li>
<li>抽象类不能直接创建对象</li>
<li>抽象类中可以有抽象方法，也可以没有抽象方法</li>
<li>抽象类的子类<ul>
<li>实现了抽象方法的具体类</li>
<li>抽象类</li>
</ul>
</li>
</ol>
</li>
<li><p>抽象类面试题：</p>
<ol>
<li>抽象类中是否可以没有抽象方法？如果可以，那么，该类还定义成抽象类有意义吗？为什么？</li>
<li>可以没有抽象方法，有意义，不会让其他人直接创建该类对象</li>
</ol>
</li>
</ul>
<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口是功能的集合，同样可看做是一种数据类型，是比抽象类更为抽象的”类”。<br>接口只描述所应该具备的方法，并没有具体实现，具体的实现由接口的实现类(相当于接口的子类)来完成。这样将功能的定义与实现分离，优化了程序设计。<br>请记住：一切事物均有功能，即一切事物均有接口。</p>
<p>接口的出现避免了单继承的局限性。父类中定义的事物的基本功能。接口中定义的事物的扩展功能。</p>
<h3 id="接口的特点"><a href="#接口的特点" class="headerlink" title="接口的特点"></a>接口的特点</h3><ol>
<li><p>定义一个接口用 <code>interface</code> 关键字：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名 </span>&#123;</span><br><span class="line">    抽象方法<span class="number">1</span>;</span><br><span class="line">    抽象方法<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>一个类实现一个接口，实现 <code>implements</code> 关键字：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名 <span class="keyword">implements</span> 接口名 </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>接口不能直接创建对象</p>
<p>通过多态的方式，由子类来创建对象，接口多态。</p>
</li>
</ol>
<h3 id="接口中的成员特点"><a href="#接口中的成员特点" class="headerlink" title="接口中的成员特点"></a>接口中的成员特点</h3><ul>
<li><p>成员变量：</p>
<p>只能是 <code>final</code> 修饰的常量</p>
<p>默认修饰符：<code>public static final</code></p>
</li>
<li><p>构造方法：</p>
<p>无</p>
</li>
<li><p>成员方法：</p>
<p>只能是抽象方法</p>
<p>默认修饰符：<code>public abstract</code></p>
</li>
</ul>
<h3 id="类与类、类与接口、接口与接口之间的关系"><a href="#类与类、类与接口、接口与接口之间的关系" class="headerlink" title="类与类、类与接口、接口与接口之间的关系"></a>类与类、类与接口、接口与接口之间的关系</h3><ul>
<li><p>类与类：</p>
<p>继承关系，单继承，可以是多层继承</p>
</li>
<li><p>类与接口：</p>
<p>实现关系，单实现，也可以多实现（因为没有方法冲突的问题）</p>
</li>
<li><p>接口与接口：</p>
<p>继承关系，单继承，也可以是多继承</p>
</li>
</ul>
<p>Java中的类可以继承一个父类的同时，实现多个接口</p>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态是继封装、继承之后，面向对象的第三大特性。</p>
<p>现实事物经常会体现出多种形态，如学生，学生是人的一种，则一个具体的同学张三既是学生也是人，即出现两种形态。</p>
<p>Java作为面向对象的语言，同样可以描述一个事物的多种形态。如Student类继承了Person类，一个Student的对象便既是Student，又是Person。</p>
<p>Java中多态的代码体现在一个子类对象(实现类对象)既可以给这个子类(实现类对象)引用变量赋值，又可以给这个子类(实现类对象)的父类(接口)变量赋值。</p>
<p>如Student类可以为Person类的子类。那么一个Student对象既可以赋值给一个Student类型的引用，也可以赋值给一个Person类型的引用。</p>
<p>最终多态体现为父类引用变量可以指向子类对象。</p>
<p>多态的前提是必须有子父类关系或者类实现接口关系，否则无法完成多态。</p>
<p>在使用多态后的父类引用变量调用方法时，会调用子类重写后的方法。</p>
<h3 id="多态使用的前提"><a href="#多态使用的前提" class="headerlink" title="多态使用的前提"></a>多态使用的前提</h3><ol>
<li>有继承或者实现关系</li>
<li>要方法重写</li>
<li>父类引用指向子类对象</li>
</ol>
<h3 id="多态的成员访问特点"><a href="#多态的成员访问特点" class="headerlink" title="多态的成员访问特点"></a>多态的成员访问特点</h3><p>方法的运行看右边（子类，若为静态方法则为父类），其它（例如成员变量）都看左边（父类）。</p>
<h3 id="多态的利弊"><a href="#多态的利弊" class="headerlink" title="多态的利弊"></a>多态的利弊</h3><p>好处：提高了程序的扩展性</p>
<p>弊端：不能访问子类特有的功能</p>
<h3 id="多态的分类"><a href="#多态的分类" class="headerlink" title="多态的分类"></a>多态的分类</h3><ul>
<li><p>类的多态</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(“重写父类抽象方法”);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类的多态使用</span></span><br><span class="line">Fu fu= <span class="keyword">new</span> Zi();</span><br></pre></td></tr></table></figure>
</li>
<li><p>接口的多态</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">implements</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(“重写接口抽象方法”);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接口的多态使用</span></span><br><span class="line">Fu fu = <span class="keyword">new</span> Zi();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="instanceof-关键字"><a href="#instanceof-关键字" class="headerlink" title="instanceof 关键字"></a><code>instanceof</code> 关键字</h2><p>格式：<code>对象名 instanceof 类名</code></p>
<p>返回值：<code>true, false</code></p>
<p>作用：判断指定的对象是否为给定类创建的对象</p>
<h2 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a><code>this</code> 关键字</h2><p><code>this</code> 关键字，本类对象的引用</p>
<ul>
<li><p><code>this</code> 是在方法中使用的，哪个对象调用了该方法，那么 <code>this</code> 就代表调用该方法的对象引用</p>
</li>
<li><p><code>this</code> 什么时候存在的？当创建对象的时候，<code>this</code> 存在的</p>
</li>
<li><p><code>this</code> 的作用：用来区别同名的成员变量与局部变量（<code>this.成员变量</code>）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>用来给类的成员进行初始化操作</p>
<ul>
<li><p>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 类名 (参数列表) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>构造方法的特点：</p>
<ol>
<li>方法名与类名想同</li>
<li>没有返回值，也没有返回值类型，连 <code>void</code> 也没有</li>
</ol>
</li>
<li><p>构造方法什么时候会被调用执行？</p>
<p>只有在创建对象的时候才可以被调用</p>
</li>
</ul>
<h2 id="super-关键字"><a href="#super-关键字" class="headerlink" title="super 关键字"></a><code>super</code> 关键字</h2><p>指的是父类的存储空间（理解为父类的引用）</p>
<ul>
<li><p>调用父类的成员变量：</p>
<p><code>super.成员变量;</code></p>
</li>
<li><p>调用父类的构造方法：</p>
<p><code>super(参数);</code></p>
</li>
<li><p>调用方法的成员方法：</p>
<p><code>super.成员方法();</code></p>
</li>
</ul>
<h2 id="继承中的构造方法注意事项"><a href="#继承中的构造方法注意事项" class="headerlink" title="继承中的构造方法注意事项"></a>继承中的构造方法注意事项</h2><ol>
<li><p>如果我们手动给出了构造方法，编译器不会再给我们提供默认的空参数构造方法；</p>
<p>如果我们没有写任何的构造方法，编译器提供给我们一个空参数构造方法</p>
</li>
<li><p>在构造方法中，默认的第一条语句为 <code>super();</code></p>
<p>它是用来访问父类中的空参数构造方法，进行父类成员的初始化操作</p>
</li>
<li><p>当父类中没有空参数构造方法的时候，怎么办？</p>
<ul>
<li><p>通过 <code>super(参数);</code> 访问父类有参数的构造方法</p>
</li>
<li><p>通过 <code>this(参数);</code> 访问本类中其他构造方法</p>
<p>注意：<em>本类中的其他构造方法已经能够正常访问父类构造方法</em></p>
</li>
</ul>
</li>
<li><p><code>super(参数);</code> 与 <code>this(参数);</code> 不能同时在构造方法中存在</p>
</li>
</ol>
<h2 id="final"><a href="#final" class="headerlink" title="final"></a><code>final</code></h2><p>关键字，最终的意思。</p>
<ul>
<li><code>final</code> 修饰的类：最终的类，不能被继承。</li>
<li><code>final</code> 修饰的变量：相当于是一个常量，在编译生成 .class 文件后，该变量未常量值。</li>
<li><code>final</code> 修饰的方法：最终的方法，子类不能重写，可以继承过来使用。</li>
</ul>
<h2 id="static"><a href="#static" class="headerlink" title="static"></a><code>static</code></h2><p>关键字，静态的意思。</p>
<p>可以用来修饰类中的成员（成员变量，成员方法）</p>
<p>注意：也可以用来修饰成员内部类</p>
<ul>
<li><p>特点：</p>
<p>被静态所修饰的成员，会被所有的对象所共享</p>
<p>被静态所修饰的成员，可以通过类名直接调用，方便</p>
<ul>
<li><code>Person.county = &quot;中国&quot;;</code></li>
<li><code>Person.method();</code></li>
</ul>
</li>
<li><p>注意事项：</p>
<p>静态的成员，随着类的加载而加载，优先于对象存在</p>
<p>在静态方法中，没有 <code>this</code> 关键字</p>
<p>静态方法中，只能调用静态的成员（静态成员变量，静态成员方法）</p>
</li>
</ul>
<p><img src="http://images.yingwai.top/picgo/JavaSE13f2.JPG" alt="静态的共享数据"></p>
<center>
    <i>静态的共享数据</i>
</center>





<p><img src="http://images.yingwai.top/picgo/JavaSE13f1.JPG" alt="静态的内存图"></p>
<center>
    <i>静态的内存图</i>
</center>





<h2 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h2><p>一个没有名字的对象。</p>
<ul>
<li><p>特点：</p>
<p>创建匿名对象直接使用，没有对象名</p>
<p>匿名对象在没有指定其引用变量时，只能使用一次</p>
<p>匿名对象可以作为方法接收得参数、方法返回值使用</p>
</li>
</ul>
<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>在一个类中，定义了一个新类，这个新的类就是内部类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123; <span class="comment">// 外部类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123; <span class="comment">// 内部类</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>特点</p>
<p>内部类可以直接访问外部类的成员，包含私有的成员</p>
</li>
</ul>
<h2 id="包的声明与访问"><a href="#包的声明与访问" class="headerlink" title="包的声明与访问"></a>包的声明与访问</h2><ul>
<li><p>类中包的声明格式：</p>
<p><code>package 包名.包名.包名…;</code></p>
</li>
<li><p>带有包的类，创建对象格式：<code>包名.类名 变量名 = new 包名.类名();</code></p>
<p><code>cn.itcast.Demo d = new cn.itcast.Demo();</code></p>
</li>
<li><p>导包的格式：</p>
<p><code>import 包名.类名;</code></p>
</li>
</ul>
<h2 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h2><p><code>public</code>：公共的</p>
<p><code>protected</code>：受保护的</p>
<p><code>default</code>：默认的（可以不写）</p>
<p><code>private</code>：私有的</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th style="text-align:center"><code>public</code></th>
<th style="text-align:center"><code>protected</code></th>
<th style="text-align:center"><code>default</code></th>
<th style="text-align:center"><code>private</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>在当前类中</td>
<td style="text-align:center">$\surd$</td>
<td style="text-align:center">$\surd$</td>
<td style="text-align:center">$\surd$</td>
<td style="text-align:center">$\surd$</td>
</tr>
<tr>
<td>同一包中的其他类</td>
<td style="text-align:center">$\surd$</td>
<td style="text-align:center">$\surd$</td>
<td style="text-align:center">$\surd$</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>不同包中的子类</td>
<td style="text-align:center">$\surd$</td>
<td style="text-align:center">$\surd$</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>不同包中的其他类</td>
<td style="text-align:center">$\surd$</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>局部代码块：定义在方法中的，用来限制变量的作用范围</p>
<p>构造代码块：定义在类中方法外，用来给对象中的成员初始化赋值</p>
<p>静态代码块：定义在类中方法外，用来给类的静态成员初始化赋值</p>
<h2 id="不同修饰符的使用"><a href="#不同修饰符的使用" class="headerlink" title="不同修饰符的使用"></a>不同修饰符的使用</h2><ul>
<li>类，最常使用 <code>public</code> 修饰</li>
<li>成员变量，最常使用 <code>private</code> 修饰</li>
<li>成员方法，最常使用 <code>public</code> 修饰</li>
</ul>
<h2 id="自定义数据类型的使用"><a href="#自定义数据类型的使用" class="headerlink" title="自定义数据类型的使用"></a>自定义数据类型的使用</h2><ul>
<li>类作为方法参数时，说明要向方法中传入该类的对象</li>
<li>类作为方法返回值时，说明该方法要返回一个该类的对象</li>
<li>抽象类作为方法参数时，说明要传入一个实现抽象类所有抽象方法的子类对象</li>
<li>抽象类作为方法返回值时，说明需要返回一个实现抽象类所有抽象方法的子类对象</li>
<li>接口作为方法参数时，说明该方法要传入一个接口实现类的对象</li>
<li>接口作为方法返回值时，说明该方法需要返回一个接口实现类对象</li>
</ul>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>Java的final、static、匿名对象、内部类、包的声明与访问、访问修饰符以及代码块</title>
    <url>/2020/08/24/Java%E7%9A%84final%E3%80%81static%E3%80%81%E5%8C%BF%E5%90%8D%E5%AF%B9%E8%B1%A1%E3%80%81%E5%86%85%E9%83%A8%E7%B1%BB%E3%80%81%E5%8C%85%E7%9A%84%E5%A3%B0%E6%98%8E%E4%B8%8E%E8%AE%BF%E9%97%AE%E3%80%81%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6%E4%BB%A5%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%9D%97/</url>
    <content><![CDATA[<hr>
<a id="more"></a>
<h2 id="final"><a href="#final" class="headerlink" title="final"></a><code>final</code></h2><p>关键字，最终的意思。</p>
<ul>
<li><code>final</code> 修饰的类：最终的类，不能被继承。</li>
<li><code>final</code> 修饰的变量：相当于是一个常量，在编译生成 .class 文件后，该变量未常量值。</li>
<li><code>final</code> 修饰的方法：最终的方法，子类不能重写，可以继承过来使用。</li>
</ul>
<h2 id="static"><a href="#static" class="headerlink" title="static"></a><code>static</code></h2><p>关键字，静态的意思。</p>
<p>可以用来修饰类中的成员（成员变量，成员方法）</p>
<p>注意：也可以用来修饰成员内部类</p>
<ul>
<li><p>特点：</p>
<p>被静态所修饰的成员，会被所有的对象所共享</p>
<p>被静态所修饰的成员，可以通过类名直接调用，方便</p>
<ul>
<li><code>Person.county = &quot;中国&quot;;</code></li>
<li><code>Person.method();</code></li>
</ul>
</li>
<li><p>注意事项：</p>
<p>静态的成员，随着类的加载而加载，优先于对象存在</p>
<p>在静态方法中，没有 <code>this</code> 关键字</p>
<p>静态方法中，只能调用静态的成员（静态成员变量，静态成员方法）</p>
</li>
</ul>
<p><img src="http://images.yingwai.top/picgo/JavaSE13f2.JPG" alt="静态的共享数据"></p>
<center>
    <i>静态的共享数据</i>
</center>



<p><img src="http://images.yingwai.top/picgo/JavaSE13f1.JPG" alt="静态的内存图"></p>
<center>
    <i>静态的内存图</i>
</center>



<h2 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h2><p>一个没有名字的对象。</p>
<ul>
<li><p>特点：</p>
<p>创建匿名对象直接使用，没有对象名</p>
<p>匿名对象在没有指定其引用变量时，只能使用一次</p>
<p>匿名对象可以作为方法接收得参数、方法返回值使用</p>
</li>
</ul>
<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>在一个类中，定义了一个新类，这个新的类就是内部类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123; <span class="comment">// 外部类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123; <span class="comment">// 内部类</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>特点</p>
<p>内部类可以直接访问外部类的成员，包含私有的成员</p>
</li>
</ul>
<h2 id="包的声明与访问"><a href="#包的声明与访问" class="headerlink" title="包的声明与访问"></a>包的声明与访问</h2><ul>
<li><p>类中包的声明格式：</p>
<p><code>package 包名.包名.包名…;</code></p>
</li>
<li><p>带有包的类，创建对象格式：<code>包名.类名 变量名 = new 包名.类名();</code></p>
<p><code>cn.itcast.Demo d = new cn.itcast.Demo();</code></p>
</li>
<li><p>导包的格式：</p>
<p><code>import 包名.类名;</code></p>
</li>
</ul>
<h2 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h2><p><code>public</code>：公共的</p>
<p><code>protected</code>：受保护的</p>
<p><code>default</code>：默认的（可以不写）</p>
<p><code>private</code>：私有的</p>
<div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th style="text-align:center"><code>public</code></th>
<th style="text-align:center"><code>protected</code></th>
<th style="text-align:center"><code>default</code></th>
<th style="text-align:center"><code>private</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>在当前类中</td>
<td style="text-align:center">$\surd$</td>
<td style="text-align:center">$\surd$</td>
<td style="text-align:center">$\surd$</td>
<td style="text-align:center">$\surd$</td>
</tr>
<tr>
<td>同一包中的其他类</td>
<td style="text-align:center">$\surd$</td>
<td style="text-align:center">$\surd$</td>
<td style="text-align:center">$\surd$</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>不同包中的子类</td>
<td style="text-align:center">$\surd$</td>
<td style="text-align:center">$\surd$</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
<tr>
<td>不同包中的其他类</td>
<td style="text-align:center">$\surd$</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>局部代码块：定义在方法中的，用来限制变量的作用范围</p>
<p>构造代码块：定义在类中方法外，用来给对象中的成员初始化赋值</p>
<p>静态代码块：定义在类中方法外，用来给类的静态成员初始化赋值</p>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客NexT主题使用不蒜子统计访客数</title>
    <url>/2020/05/11/Hexo%E5%8D%9A%E5%AE%A2NexT%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8%E4%B8%8D%E8%92%9C%E5%AD%90%E7%BB%9F%E8%AE%A1%E8%AE%BF%E5%AE%A2%E6%95%B0/</url>
    <content><![CDATA[<p>想为自己的博客添加访问统计，经过一番查阅，找到了好用又方便的不蒜子统计，不蒜子是一个极简的网页计数器。</p>
<a id="more"></a>
<h1 id="安装NexT"><a href="#安装NexT" class="headerlink" title="安装NexT"></a>安装NexT</h1><p>参考 <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/getting-started.html</a></p>
<h1 id="打开不蒜子统计开关"><a href="#打开不蒜子统计开关" class="headerlink" title="打开不蒜子统计开关"></a>打开不蒜子统计开关</h1><p>新版的next主题已经把不蒜子集成进去，只需要打开开关即可：</p>
<ol>
<li><p>编辑<code>\themes\next\_config.yml</code>，找到里面的<code>busuanzi_count</code>配置项，将<code>enable</code>设为<code>true</code>：</p>
<p><img src="http://images.yingwai.top/picgo/busuanzif1.png" alt=""></p>
<p>当<code>enable: true</code>时，代表开启全局开关。若<code>site_uv</code>、<code>site_pv</code>、<code>page_pv</code>的值均为<code>false</code>时，不蒜子仅作记录而不会在页面上显示。</p>
</li>
<li><p>打开对应的站点配置：当<code>site_uv: true</code>时，代表在页面底部显示站点的UV值；当<code>site_pv: true</code>时，代表在页面底部显示站点的PV值。</p>
</li>
</ol>
<h1 id="不蒜子统计不显示的问题"><a href="#不蒜子统计不显示的问题" class="headerlink" title="不蒜子统计不显示的问题"></a>不蒜子统计不显示的问题</h1><p>完成上面的步骤后，进入博客，发现统计人数显示不出来：</p>
<p><img src="http://images.yingwai.top/picgo/busuanzif2.png" alt=""></p>
<p><strong>原因：不蒜子的域名更换了，但是next主题里面写进去的域名还是以前的。</strong></p>
<p><a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子官网</a>：</p>
<p><img src="http://images.yingwai.top/picgo/busuanzif3.png" alt=""></p>
<p><strong>解决方法：</strong></p>
<p>打开<code>\themes\next\layout\_third-party\analytics</code>文件夹里面的<code>busuanzi-counter.swig</code>文件，将旧的域名更换为新的域名：</p>
<p>原来的域名：</p>
<p><img src="http://images.yingwai.top/picgo/busuanzif4.png" alt=""></p>
<p>更换后：</p>
<p><img src="http://images.yingwai.top/picgo/busuanzif5.png" alt=""></p>
<p>此时博客的访客数就可以正常显示了。</p>
]]></content>
      <categories>
        <category>Env</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
        <tag>不蒜子</tag>
      </tags>
  </entry>
  <entry>
    <title>Java继承、抽象总结</title>
    <url>/2020/08/24/Java%E7%BB%A7%E6%89%BF%E3%80%81%E6%8A%BD%E8%B1%A1%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<hr>
<a id="more"></a>
<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><ul>
<li><p>继承：是指在一个现有类的基础上去构建一个新的类，构建出来的新类被称作子类，现有类被称作父类，子类会自动拥有父类所有。</p>
</li>
<li><p>继承的好处：可继承的属性和方法。</p>
<ul>
<li>提高了代表的可维护性</li>
<li>提高了代码的复用性</li>
<li>让类与类之间产生了继承关系</li>
</ul>
</li>
<li><p>继承的弊端：</p>
<ul>
<li>类与类之间的耦合度过高</li>
</ul>
</li>
<li><p>继承特点：</p>
<ul>
<li><p>java中类只能够单继承，不能多继承，可以多层继承</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yy</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span> <span class="keyword">extends</span> <span class="title">Yy</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>所有的类都直接或者间接的继承了 Object类，Object类称为祖宗类</p>
</li>
</ul>
</li>
<li><p>继承的注意事项：</p>
<ol>
<li><p>使用关键字 <code>extends</code> 让类与类之间 产生继承关系</p>
</li>
<li><p>父类私有的成员，子类不能继承，因为根本看不到</p>
</li>
<li><p>不能为了继承某个功能而随意进行继承操作， 必须要符合 is a 的关系</p>
<p>苹果 is a 水果</p>
<p>男人 is a 人</p>
<p>狗  is a 人 ， 这种情况就不能继承了</p>
</li>
</ol>
</li>
<li><p>继承中的成员变量关系：</p>
<ul>
<li><p>不同名的变量：</p>
<p>子类直接继承使用</p>
</li>
<li><p>同名的变量：</p>
<p>默认访问的是子类自己的成员变量, 想访问父类中的同名变量，请使用 <code>super.成员变量;</code></p>
</li>
</ul>
</li>
<li><p>继承中的成员方法关系：</p>
<ul>
<li><p>不同名的方法：</p>
<p>子类直接继承使用</p>
</li>
<li><p>同名的方法：</p>
<p>默认访问的是子类自己的成员方法，想访问父类中的同名方法，请使用 super.成员方法();</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>super:用来表示当前对象中包含的父类对象空间的引用</p>
<ul>
<li><p>调用父类的成员变量：</p>
<p><code>super.成员变量;</code></p>
</li>
<li><p>调用方法的成员方法:</p>
<p><code>super.成员方法();</code></p>
</li>
</ul>
</li>
<li><p>方法重写(override)：指在子父类中，出现了方法声明相同的情况，也叫做方法覆盖，方法复写</p>
<ul>
<li>方法重写的注意事项：<ol>
<li>子类的方法声明要与父类相同</li>
<li>子类要重写方法的方法，方法的权限修饰符不能比父类的更低</li>
<li>父类私有的方法，子类不能够进行方法重写</li>
</ol>
</li>
</ul>
</li>
<li><p>方法重载(overload)：指 在同一个类中，多个方法名称相同，它们的参数列表不同(个数不同，数据类型不同)</p>
</li>
</ul>
<h1 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h1><ul>
<li><p>抽象方法： 方法只有声明部分，没有方法体</p>
</li>
<li><p>抽象类： 包含抽象方法的类，一定是抽象类</p>
<p>使用 <code>abstract</code> 修饰的类，是抽象类</p>
</li>
<li><p>抽象类的特点：</p>
<ol>
<li>抽象类与抽象方法都必须使用 <code>abstract</code> 来修饰</li>
<li>抽象类不能直接创建对象</li>
<li>抽象类中可以有抽象方法，也可以没有抽象方法</li>
<li>抽象类的子类<ul>
<li>实现了抽象方法的具体类</li>
<li>抽象类</li>
</ul>
</li>
</ol>
</li>
<li><p>抽象类面试题：</p>
<ol>
<li>抽象类中是否可以没有抽象方法？如果可以，那么，该类还定义成抽象类有意义吗？为什么？</li>
<li>可以没有抽象方法，有意义，不会让其他人直接创建该类对象</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>LaTeX常用符号表示方法</title>
    <url>/2020/04/26/LaTeX%E5%B8%B8%E7%94%A8%E7%AC%A6%E5%8F%B7%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>图片来源：<a href="https://blog.csdn.net/caiandyong/article/details/53351737" target="_blank" rel="noopener">https://blog.csdn.net/caiandyong/article/details/53351737</a></p>
<a id="more"></a>
<h1 id="希腊字母、数学构造、定界符、大型运算符以及标准函数名"><a href="#希腊字母、数学构造、定界符、大型运算符以及标准函数名" class="headerlink" title="希腊字母、数学构造、定界符、大型运算符以及标准函数名"></a>希腊字母、数学构造、定界符、大型运算符以及标准函数名</h1><p><img src="http://images.yingwai.top/picgo/latexf1.jpg" alt=""></p>
<h1 id="二元运算、关系符"><a href="#二元运算、关系符" class="headerlink" title="二元运算、关系符"></a>二元运算、关系符</h1><p><img src="http://images.yingwai.top/picgo/latexf2.jpg" alt=""></p>
<h1 id="箭头符号、各种符号以及数学模式重音符"><a href="#箭头符号、各种符号以及数学模式重音符" class="headerlink" title="箭头符号、各种符号以及数学模式重音符"></a>箭头符号、各种符号以及数学模式重音符</h1><p><img src="http://images.yingwai.top/picgo/latexf3.jpg" alt=""></p>
<h1 id="数列环境、其它风格的字体以及字体大小"><a href="#数列环境、其它风格的字体以及字体大小" class="headerlink" title="数列环境、其它风格的字体以及字体大小"></a>数列环境、其它风格的字体以及字体大小</h1><p><img src="http://images.yingwai.top/picgo/latexf4.jpg" alt=""></p>
]]></content>
      <categories>
        <category>Env</category>
      </categories>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>JupyterLab安装</title>
    <url>/2020/05/01/JupyterLab%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>JupyterLab 是一个交互式的开发环境，是 Jupyter notebook 的下一代产品，集成了更多的功能，十分好用。</p>
<a id="more"></a>
<h1 id="安装Miniconda"><a href="#安装Miniconda" class="headerlink" title="安装Miniconda"></a>安装Miniconda</h1><p>1、进入清华大学开源软件镜像站找到Miniconda: <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/</a></p>
<p><img src="http://images.yingwai.top/picgo/jupyterinstallf1.png" alt=""></p>
<p>2、找到Miniconda的Linux版本，右键复制链接地址，然后在服务器中下载：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget -c https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-py37_4.8.2-Linux-x86_64.sh</span></span><br></pre></td></tr></table></figure>
<p>3、安装刚刚下载的Miniconda：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bash Miniconda3-py37_4.8.2-Linux-x86_64.sh</span></span><br></pre></td></tr></table></figure>
<p>根据提示按enter键或输入yes即可。</p>
<p>4、安装成功后，会在当前用户目录下生成一个miniconda3文件夹。</p>
<h2 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h2><p>在终端中输入以下命令安装pip：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> conda install pip</span></span><br></pre></td></tr></table></figure>
<h3 id="添加清华源"><a href="#添加清华源" class="headerlink" title="添加清华源"></a>添加清华源</h3><p>如果下载速度太慢，可以将conda默认的软件源更换为国内的清华源：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> conda config --<span class="built_in">set</span> show_channel_urls yes</span></span><br></pre></td></tr></table></figure>
<p>添加完成后可以使用<code>conda info</code>命令查看是否添加成功。</p>
<h1 id="安装并配置JupyterLab"><a href="#安装并配置JupyterLab" class="headerlink" title="安装并配置JupyterLab"></a>安装并配置JupyterLab</h1><p>准备工作完成后，就可以开始安装Jupyterlab。</p>
<h2 id="安装JupyterLab"><a href="#安装JupyterLab" class="headerlink" title="安装JupyterLab"></a>安装JupyterLab</h2><p>在终端中输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install jupyterlab</span></span><br></pre></td></tr></table></figure>
<h2 id="远程访问配置"><a href="#远程访问配置" class="headerlink" title="远程访问配置"></a>远程访问配置</h2><p>在终端中打开ipython：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ipython</span></span><br><span class="line"></span><br><span class="line">In [1]: from notebook.auth import passwd</span><br><span class="line"></span><br><span class="line">In [2]: passwd()</span><br><span class="line">Enter password:		# 输入你要设置的密码</span><br><span class="line">Verify password:</span><br><span class="line">Out[2]: 'xxxxx...'</span><br></pre></td></tr></table></figure>
<p>这里输出的字符串要复制下来。</p>
<p>执行完上面的命令后，退出ipython，然后在终端中输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> jupyter lab --generate-config</span></span><br></pre></td></tr></table></figure>
<p>修改配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vi .jupyter/jupyter_notebook_config.py</span></span><br></pre></td></tr></table></figure>
<p>更改内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将ip设置为*，意味允许任何IP访问</span></span><br><span class="line">c.NotebookApp.ip = '*'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里的密码就是上面生成的那一串</span></span><br><span class="line">c.NotebookApp.password = 'xxxxx...' </span><br><span class="line"><span class="meta">#</span><span class="bash"> 服务器上并没有浏览器可以供Jupyter打开 </span></span><br><span class="line">c.NotebookApp.open_browser = False </span><br><span class="line"><span class="meta">#</span><span class="bash"> 监听端口设置为8888或其他自己喜欢的端口 </span></span><br><span class="line">c.NotebookApp.port = 8888</span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许远程访问 </span></span><br><span class="line">c.NotebookApp.allow_remote_access = True</span><br></pre></td></tr></table></figure>
<p>启动jupyter服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> jupyter lab --allow-root</span></span><br></pre></td></tr></table></figure>
<p>此时在浏览器搜索框中输入<code>你的服务器ip:你设置的端口</code>，然后在打开的页面中输入密码就可以进入jupyterlab：</p>
<p><img src="http://images.yingwai.top/picgo/jupyterinstallf2.png" alt=""></p>
<h2 id="后台运行JupyterLab程序"><a href="#后台运行JupyterLab程序" class="headerlink" title="后台运行JupyterLab程序"></a>后台运行JupyterLab程序</h2><p>JupyterLab启动后占用了一个终端窗口，可以用<code>nohup</code>命令使JupyterLab在后台运行，并且关闭当前终端也不会停止运行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nohup jupyter lab &amp;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>nohup</code>命令</p>
<p>用途：Run COMMAND, ignoring hangup signals.</p>
<p>输出文件：程序的输出默认重定向到当前文件夹下的<code>nohup.out</code>文件中。也可以通过<code>nohup COMMAND &gt; FILE</code>命令的方式将输出文件重定位到指定的<code>FILE</code>文件中。如果要查看JupyterLab的日志文件，可以打开<code>nohup.out</code>文件进行查看。</p>
</li>
<li><p><code>&amp;</code>命令</p>
<p>作用：在后台运行程序</p>
</li>
</ul>
<h2 id="查看、关闭后台运行进程"><a href="#查看、关闭后台运行进程" class="headerlink" title="查看、关闭后台运行进程"></a>查看、关闭后台运行进程</h2><p><code>job -l</code>命令查看当前终端中后台运行的进程，如果关闭终端后不能显示，需要使用<code>ps</code>命令。</p>
<p><code>ps -aux | grep jupyter</code>查看运行的<code>jupyter</code>进程：</p>
<p><img src="http://images.yingwai.top/picgo/jupyterinstallf3.png" alt=""></p>
<p>用户名后面的数字就是JupyterLab的pid，使用<code>kill -9 pid</code>命令关闭运行中的JupyterLab。</p>
]]></content>
      <categories>
        <category>Env</category>
      </categories>
      <tags>
        <tag>Jupyter</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>PPML中的2PC对比3PC</title>
    <url>/2020/06/19/PPML%E4%B8%AD%E7%9A%842PC%E5%AF%B9%E6%AF%943PC/</url>
    <content><![CDATA[<hr>
<a id="more"></a>
<h1 id="共享语义"><a href="#共享语义" class="headerlink" title="共享语义"></a>共享语义</h1><p>不同的论文可能设置不太一样，这里2PC我参考的是<a href="https://yuyingwai.cn/2020/06/17/论文笔记-SecureML-A-System-for-Scalable-Privacy-Preserving-Machine-Learning/" target="_blank" rel="noopener">SecureML</a>中的设置，3PC参考的是<a href="https://yuyingwai.cn/2020/06/18/论文笔记-ABY3-A-Mixed-Protocol-Framework-for-Machine-Learning/" target="_blank" rel="noopener">ABY3</a>和<a href="https://yuyingwai.cn/2020/04/20/论文笔记-ASTRA-High-Throughput-3PC-over-Rings-with-Application-to-Secure-Prediction/" target="_blank" rel="noopener">ASTRA</a>中的设置。即对于一个数 $x$ 的算术共享，2PC的情况是将其拆成两份 $x_0$ 和 $x_1$，它们的和为 $x$，两方各拥有一份；3PC的情况是将其拆成三份 $x_0, x_1, x_2$，三方各拥有其中的两份，例如 $P_0$ 有 $(x_0, x_2)$，任意两方即可重构出 $x$。</p>
<p>布尔共享是各份额二进制表示的每一位异或等于原秘密 $x$ 的对应位。</p>
<p><img src="http://images.yingwai.top/picgo/2vs3ppt2.png" alt=""></p>
<h1 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h1><p>2PC和3PC下算术共享的加法是一样的，都只需要在本地将对应数的份额相加，不需要交互。</p>
<h1 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h1><h2 id="2PC"><a href="#2PC" class="headerlink" title="2PC"></a>2PC</h2><p>乘法则有比较大的区别，首先是2PC，计算乘法 $ab = c$ 需要生成额外的乘法三元组 $(u,v,z)$ 满足 $z = uv$，这个三元组中的每个数也是在两方间加法共享的。</p>
<p>首先两方交互计算 $e = a-u$ 和 $f = b - v$，然后 $P_i$ 将结果 $c = ab$ 的份额设为 $c_i = -ief+a_if+eb_i+z_i$，其中 $i \in {0,1}$。</p>
<p><img src="http://images.yingwai.top/picgo/2vs3ppt1.png" alt=""></p>
<h2 id="3PC"><a href="#3PC" class="headerlink" title="3PC"></a>3PC</h2><p>接下来是3PC，由于重复共享的设置（各方拥有三个份额中的两个），计算乘法时几乎不需要交互。计算 $x,y$ 两个数的积 $xy = z$ 时，观察到</p>
<script type="math/tex; mode=display">
\begin{align}
xy &= (x_0 + x_1 + x_2)(y_0 + y_1 + y_2) \\
&= x_0y_0 + x_0y_1 + x_0y_2 \\
&+ x_1y_0 + x_1y_1 + x_1y_2 \\
&+ x_2y_0 + x_2y_1 + x_2y_2
\end{align}</script><p>可以看到拆开的式子一共有九项，我们可以直接让 $P_i$ 各计算其中三项，令</p>
<script type="math/tex; mode=display">
z_0 = x_0y_0 + x_0y_2 + x_2y_0 \\
z_1 = x_0y_1 + x_1y_0 + x_1y_1 \\
z_2 = x_1y_2 + x_2y_1 + x_2y_2</script><p>这时结果 $z$ 就以加法共享的方式在三方中共享，最后 $P<em>i$ 将自己的 $z_i$ 发送给 $P</em>{i+1}$（$i=2$ 时 $i+1 = 0$），$z$ 就重新在三方中重复共享了。</p>
<p><img src="http://images.yingwai.top/picgo/aby3ppt3.png" alt=""></p>
<p>可以看到计算过程中只涉及本地操作，只有在生成重复共享时才需要三方各一次发送，效率比2PC要高。</p>
<h1 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h1><p>比较两个数 $u,v$ 的大小，等同于提取 $a = u-v$ 的 $\mbox{msb}$，$u&gt;v \rightarrow u-v&gt;0$ 时 $\mbox{msb}(a) = 0$，反之 $\mbox{msb}(a) = 1$。两方下没有给出具体的细节，<a href="https://yuyingwai.cn/2020/06/17/论文笔记-SecureML-A-System-for-Scalable-Privacy-Preserving-Machine-Learning/" target="_blank" rel="noopener">SecureML</a>中只提到使用乱码电路，这是一个比较昂贵的协议（将算术共享转换为布尔或姚共享也需要开销），而三方下的<a href="https://yuyingwai.cn/2020/04/20/论文笔记-ASTRA-High-Throughput-3PC-over-Rings-with-Application-to-Secure-Prediction/" target="_blank" rel="noopener">ASTRA</a>中则利用了秘密共享方案的不对称性，下面的协议是基于 $\mbox{sign}(r \cdot a) = \mbox{sign}(r) \oplus \mbox{sign}(a)$ 的事实：</p>
<p>首先在离线阶段，$P<em>1,P_2$ 共同选取两个随机数 $r, r’ \in \mathbb{Z}</em>{2^l}$ 并设 $p = \mbox{msb}(r)$，然后各方可以非交互式地设置 $p$ 的布尔共享 $[![p]!]^{\rm B}<em>{P_0} = (0,0)$, $[![p]!]^{\rm B}</em>{P<em>1} = (p,0)$ 以及 $[![p]!]^{\rm B}</em>{P_2} = (p,0)$。</p>
<p><img src="http://images.yingwai.top/picgo/2vs3ppt3.png" alt=""></p>
<p>到了在线阶段，$P<em>1$ 和 $P_2$ 设置它们对 $a$ 的份额，使得它们两方各自的份额之和为 $a$ ：$P_1$ 设 $[a]</em>{P<em>1} = x_0+x_1$，$P_2$ 设 $[a]</em>{P<em>2}=x_2$。然后 $P_1$ 和 $P_2$ 利用离线阶段生成的随机数 $r’$ 对 $[ra]</em>{P_i}$ 进行盲化并发送给 $P_0$（由于 $P_0$ 知道 $x_2$，若不进行盲化则会暴露 $r$ 给 $P_0$），$P_0$ 重构 $ra$ 并设 $q = \mbox{msb}(ra)$，然后生成 $q$ 在三方中的布尔共享。最后各方在本地计算 $[![\mbox{msb}(a)]!]^B = [![p]!]^B \oplus [![q]!]^B$，此时 $a$ 的符号位在三方中是布尔共享的。</p>
<p><img src="http://images.yingwai.top/picgo/2vs3ppt4.png" alt=""></p>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>密码学</tag>
        <tag>MPC</tag>
        <tag>PPML</tag>
        <tag>Secret Sharing</tag>
      </tags>
  </entry>
  <entry>
    <title>PyTorch入门60题</title>
    <url>/2020/05/20/PyTorch%E5%85%A5%E9%97%A860%E9%A2%98/</url>
    <content><![CDATA[<hr>
<a id="more"></a>
<h2 id="张量"><a href="#张量" class="headerlink" title="张量"></a>张量</h2><p>导入pytorch包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br></pre></td></tr></table></figure>
<p>创建一个空的5x3张量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.empty(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>创建一个随机初始化的5x3张量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.rand(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>创建一个5x3的0张量，类型为long</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.zeros(<span class="number">5</span>, <span class="number">3</span>, dtype=torch.long)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>直接从数组创建张量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.tensor([<span class="number">5.5</span>, <span class="number">3</span>])</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>创建一个5x3的单位张量，类型为double</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.ones(<span class="number">5</span>, <span class="number">3</span>, dtype=torch.double)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>从已有的张量创建相同维度的新张量，并且重新定义类型为float</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.randn_like(x, dtype=torch.float)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>打印一个张量的维度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(x.size())</span><br></pre></td></tr></table></figure>
<p>将两个张量相加</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y = torch.rand(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line">print(x + y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="comment"># print(torch.add(x, y))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法三</span></span><br><span class="line"><span class="comment"># result = torch.empty(5, 3)</span></span><br><span class="line"><span class="comment"># torch.add(x, y, out=result)</span></span><br><span class="line"><span class="comment"># print(result)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法四</span></span><br><span class="line"><span class="comment"># y.add_(x)</span></span><br><span class="line"><span class="comment"># print(y)</span></span><br></pre></td></tr></table></figure>
<p>取张量的第一列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(x[:, <span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<p>将一个4x4的张量resize成一个一维张量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.randn(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">y = x.view(<span class="number">16</span>)</span><br><span class="line">print(x.size(),y.size())</span><br></pre></td></tr></table></figure>
<p>将一个4x4的张量，resize成一个2x8的张量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y = x.view(<span class="number">2</span>, <span class="number">8</span>)</span><br><span class="line">print(x.size(),y.size())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">z = x.view(<span class="number">-1</span>, <span class="number">8</span>) <span class="comment"># 确定一个维度，-1的维度会被自动计算</span></span><br><span class="line">print(x.size(),z.size())</span><br></pre></td></tr></table></figure>
<p>从张量中取出数字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.randn(<span class="number">1</span>)</span><br><span class="line">print(x)</span><br><span class="line">print(x.item())</span><br></pre></td></tr></table></figure>
<h3 id="Numpy的操作"><a href="#Numpy的操作" class="headerlink" title="Numpy的操作"></a>Numpy的操作</h3><p>将张量转换成numpy数组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.ones(<span class="number">5</span>)</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line">b = a.numpy()</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>
<p>将张量+1，并观察上题中numpy数组的变化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.add_(<span class="number">1</span>)</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>
<p>从numpy数组创建张量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.ones(<span class="number">5</span>)</span><br><span class="line">b = torch.from_numpy(a)</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>
<p>将numpy数组+1并观察上题中张量的变化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.add(a, <span class="number">1</span>, out=a)</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>
<h2 id="自动微分"><a href="#自动微分" class="headerlink" title="自动微分"></a>自动微分</h2><h3 id="张量的自动微分"><a href="#张量的自动微分" class="headerlink" title="张量的自动微分"></a>张量的自动微分</h3><p>新建一个张量，并设置<code>requires_grad=True</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.ones(<span class="number">2</span>, <span class="number">2</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure>
<p>对张量进行任意操作（y = x + 2）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y = x + <span class="number">2</span></span><br><span class="line">print(y)</span><br><span class="line">print(y.grad_fn) <span class="comment"># y就多了一个AddBackward</span></span><br></pre></td></tr></table></figure>
<p>再对y进行任意操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">z = y * y * <span class="number">3</span></span><br><span class="line">out = z.mean()</span><br><span class="line"></span><br><span class="line">print(z) <span class="comment"># z多了MulBackward</span></span><br><span class="line">print(out) <span class="comment"># out多了MeanBackward</span></span><br></pre></td></tr></table></figure>
<h3 id="梯度"><a href="#梯度" class="headerlink" title="梯度"></a>梯度</h3><p>对out进行反向传播</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">out.backward()</span><br></pre></td></tr></table></figure>
<p>打印梯度d(out)/dx</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(x.grad) <span class="comment">#out=0.25*Σ3(x+2)^2</span></span><br></pre></td></tr></table></figure>
<p>创建一个结果为矢量的计算过程（y=x*2^n）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = torch.randn(<span class="number">3</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">y = x * <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span> y.data.norm() &lt; <span class="number">1000</span>:</span><br><span class="line">    y = y * <span class="number">2</span></span><br><span class="line"></span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure>
<p>计算<code>v = [0.``1, 1.0, 0.0001]</code>处的梯度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">v = torch.tensor([<span class="number">0.1</span>, <span class="number">1.0</span>, <span class="number">0.0001</span>], dtype=torch.float)</span><br><span class="line">y.backward(v)</span><br><span class="line"></span><br><span class="line">print(x.grad)</span><br></pre></td></tr></table></figure>
<p>关闭梯度的功能</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(x.requires_grad)</span><br><span class="line">print((x ** <span class="number">2</span>).requires_grad)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    print((x ** <span class="number">2</span>).requires_grad)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="comment"># print(x.requires_grad)</span></span><br><span class="line"><span class="comment"># y = x.detach()</span></span><br><span class="line"><span class="comment"># print(y.requires_grad)</span></span><br><span class="line"><span class="comment"># print(x.eq(y).all())</span></span><br></pre></td></tr></table></figure>
<h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><p>pytorch实现LeNet5，结构如下所示</p>
<p><img src="http://images.yingwai.top/picgo/pytorch60f1.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Net</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Net, self).__init__()</span><br><span class="line">        <span class="comment"># 26.定义①的卷积层，输入为32x32的图像，卷积核大小5x5卷积核种类6</span></span><br><span class="line">        self.conv1 = nn.Conv2d(<span class="number">3</span>, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="comment"># 27.定义③的卷积层，输入为前一层6个特征，卷积核大小5x5，卷积核种类16</span></span><br><span class="line">        self.conv2 = nn.Conv2d(<span class="number">6</span>, <span class="number">16</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="comment"># 28.定义⑤的全链接层，输入为16*5*5，输出为120</span></span><br><span class="line">        self.fc1 = nn.Linear(<span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>, <span class="number">120</span>)  <span class="comment"># 6*6 from image dimension</span></span><br><span class="line">        <span class="comment"># 29.定义⑥的全连接层，输入为120，输出为84</span></span><br><span class="line">        self.fc2 = nn.Linear(<span class="number">120</span>, <span class="number">84</span>)</span><br><span class="line">        <span class="comment"># 30.定义⑥的全连接层，输入为84，输出为10</span></span><br><span class="line">        self.fc3 = nn.Linear(<span class="number">84</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="comment"># 31.完成input-S2，先卷积+relu，再2x2下采样</span></span><br><span class="line">        x = F.max_pool2d(F.relu(self.conv1(x)), (<span class="number">2</span>, <span class="number">2</span>))</span><br><span class="line">        <span class="comment"># 32.完成S2-S4，先卷积+relu，再2x2下采样</span></span><br><span class="line">        x = F.max_pool2d(F.relu(self.conv2(x)), <span class="number">2</span>) <span class="comment">#卷积核方形时，可以只写一个维度</span></span><br><span class="line">        <span class="comment"># 33.将特征向量扁平成列向量</span></span><br><span class="line">        x = x.view(<span class="number">-1</span>, <span class="number">16</span> * <span class="number">5</span> * <span class="number">5</span>)</span><br><span class="line">        <span class="comment"># 34.使用fc1+relu</span></span><br><span class="line">        x = F.relu(self.fc1(x))</span><br><span class="line">        <span class="comment"># 35.使用fc2+relu</span></span><br><span class="line">        x = F.relu(self.fc2(x))</span><br><span class="line">        <span class="comment"># 36.使用fc3</span></span><br><span class="line">        x = self.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">net = Net()</span><br><span class="line">print(net)</span><br></pre></td></tr></table></figure>
<p>打印网络的参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">params = list(net.parameters())</span><br><span class="line"><span class="comment"># print(params)</span></span><br><span class="line">print(len(params))</span><br></pre></td></tr></table></figure>
<p>打印某一层参数的形状</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(params[<span class="number">0</span>].size())</span><br></pre></td></tr></table></figure>
<p>随机输入一个向量，查看前向传播输出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">input = torch.randn(<span class="number">1</span>, <span class="number">1</span>, <span class="number">32</span>, <span class="number">32</span>)</span><br><span class="line">out = net(input)</span><br><span class="line">print(out)</span><br></pre></td></tr></table></figure>
<p>将梯度初始化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">net.zero_grad()</span><br></pre></td></tr></table></figure>
<p>随机一个梯度进行反向传播</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">out.backward(torch.randn(<span class="number">1</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure>
<h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><p>用自带的MSELoss()定义损失函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">criterion = nn.MSELoss()</span><br></pre></td></tr></table></figure>
<p>随机一个真值，并用随机的输入计算损失</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">target = torch.randn(<span class="number">10</span>)  <span class="comment"># 随机真值</span></span><br><span class="line">target = target.view(<span class="number">1</span>, <span class="number">-1</span>)  <span class="comment"># 变成列向量</span></span><br><span class="line"></span><br><span class="line">output = net(input)  <span class="comment"># 用随机输入计算输出</span></span><br><span class="line"></span><br><span class="line">loss = criterion(output, target)  <span class="comment"># 计算损失</span></span><br><span class="line">print(loss)</span><br></pre></td></tr></table></figure>
<p>将梯度初始化，计算上一步中loss的反向传播</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">net.zero_grad()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'conv1.bias.grad before backward'</span>)</span><br><span class="line">print(net.conv1.bias.grad)</span><br></pre></td></tr></table></figure>
<p>计算43中loss的反向传播</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">loss.backward()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'conv1.bias.grad after backward'</span>)</span><br><span class="line">print(net.conv1.bias.grad)</span><br></pre></td></tr></table></figure>
<h3 id="更新权重"><a href="#更新权重" class="headerlink" title="更新权重"></a>更新权重</h3><p>定义SGD优化器算法，学习率设置为0.01</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch.optim <span class="keyword">as</span> optim</span><br><span class="line">optimizer = optim.SGD(net.parameters(), lr=<span class="number">0.01</span>)</span><br></pre></td></tr></table></figure>
<p>使用优化器更新权重</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">optimizer.zero_grad()</span><br><span class="line">output = net(input)</span><br><span class="line">loss = criterion(output, target)</span><br><span class="line">loss.backward()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新权重</span></span><br><span class="line">optimizer.step()</span><br></pre></td></tr></table></figure>
<h2 id="训练一个分类器"><a href="#训练一个分类器" class="headerlink" title="训练一个分类器"></a>训练一个分类器</h2><h3 id="读取CIFAR10数据，做标准化"><a href="#读取CIFAR10数据，做标准化" class="headerlink" title="读取CIFAR10数据，做标准化"></a>读取CIFAR10数据，做标准化</h3><p>构造一个transform，将三通道(0,1)区间的数据转换成(-1,1)的数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</span><br><span class="line"></span><br><span class="line">transform = transforms.Compose(</span><br><span class="line">    [transforms.ToTensor(),</span><br><span class="line">     transforms.Normalize((<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>), (<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>))])</span><br></pre></td></tr></table></figure>
<p>读取数据集</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">trainset = cifar(root = <span class="string">'./input/cifar10'</span>, segmentation=<span class="string">'train'</span>, transforms=transform)</span><br><span class="line">testset = cifar(root = <span class="string">'./input/cifar10'</span>, segmentation=<span class="string">'test'</span>, transforms=transform)</span><br><span class="line">trainloader = torch.utils.data.DataLoader(trainset, batch_size=batch_size,shuffle=<span class="literal">True</span>, num_workers=<span class="number">2</span>)</span><br><span class="line">testloader = torch.utils.data.DataLoader(testset, batch_size=batch_size,shuffle=<span class="literal">False</span>, num_workers=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">classes = (<span class="string">'plane'</span>, <span class="string">'car'</span>, <span class="string">'bird'</span>, <span class="string">'cat'</span>,</span><br><span class="line">           <span class="string">'deer'</span>, <span class="string">'dog'</span>, <span class="string">'frog'</span>, <span class="string">'horse'</span>, <span class="string">'ship'</span>, <span class="string">'truck'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="建立网络"><a href="#建立网络" class="headerlink" title="建立网络"></a>建立网络</h3><p>这部分沿用前面的网络</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">net2 = Net()</span><br></pre></td></tr></table></figure>
<h3 id="定义损失函数和优化器"><a href="#定义损失函数和优化器" class="headerlink" title="定义损失函数和优化器"></a>定义损失函数和优化器</h3><p>定义交叉熵损失函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">criterion2 = nn.CrossEntropyLoss()</span><br></pre></td></tr></table></figure>
<p>定义SGD优化器算法，学习率设置为0.001，<code>momentum=0.9</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">optimizer2 = optim.SGD(net2.parameters(), lr=<span class="number">0.001</span>, momentum=<span class="number">0.9</span>)</span><br></pre></td></tr></table></figure>
<h3 id="训练网络"><a href="#训练网络" class="headerlink" title="训练网络"></a>训练网络</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">2</span>):</span><br><span class="line"></span><br><span class="line">    running_loss = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> i, data <span class="keyword">in</span> enumerate(trainloader, <span class="number">0</span>):</span><br><span class="line">        <span class="comment"># 获取X,y对</span></span><br><span class="line">        inputs, labels = data</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 51.初始化梯度</span></span><br><span class="line">        optimizer2.zero_grad()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 52.前馈</span></span><br><span class="line">        outputs = net2(inputs)</span><br><span class="line">        <span class="comment"># 53.计算损失</span></span><br><span class="line">        loss = criterion2(outputs, labels)</span><br><span class="line">        <span class="comment"># 54.计算梯度</span></span><br><span class="line">        loss.backward()</span><br><span class="line">        <span class="comment"># 55.更新权值</span></span><br><span class="line">        optimizer2.step()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 每2000个数据打印平均代价函数值</span></span><br><span class="line">        running_loss += loss.item()</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2000</span> == <span class="number">1999</span>:    <span class="comment"># print every 2000 mini-batches</span></span><br><span class="line">            print(<span class="string">'[%d, %5d] loss: %.3f'</span> %</span><br><span class="line">                  (epoch + <span class="number">1</span>, i + <span class="number">1</span>, running_loss / <span class="number">2000</span>))</span><br><span class="line">            running_loss = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'Finished Training'</span>)</span><br></pre></td></tr></table></figure>
<h3 id="使用模型预测"><a href="#使用模型预测" class="headerlink" title="使用模型预测"></a>使用模型预测</h3><p>取一些数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dataiter = iter(testloader)</span><br><span class="line">images, labels = dataiter.next()</span><br><span class="line"></span><br><span class="line"><span class="comment"># print images</span></span><br><span class="line">imshow(torchvision.utils.make_grid(images))</span><br><span class="line">print(<span class="string">'GroundTruth: '</span>, <span class="string">' '</span>.join(<span class="string">'%5s'</span> % classes[labels[j]] <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>)))</span><br></pre></td></tr></table></figure>
<p>使用模型预测</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">outputs = net2(images)</span><br><span class="line"></span><br><span class="line">_, predicted = torch.max(outputs, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Predicted: '</span>, <span class="string">' '</span>.join(<span class="string">'%5s'</span> % classes[predicted[j]]</span><br><span class="line">                              <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">4</span>)))</span><br></pre></td></tr></table></figure>
<p>在测试集上进行打分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">correct = <span class="number">0</span></span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> testloader:</span><br><span class="line">        images, labels = data</span><br><span class="line">        outputs = net2(images)</span><br><span class="line">        _, predicted = torch.max(outputs.data, <span class="number">1</span>)</span><br><span class="line">        total += labels.size(<span class="number">0</span>)</span><br><span class="line">        correct += (predicted == labels).sum().item()</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Accuracy of the network on the 10000 test images: %d %%'</span> % (</span><br><span class="line">    <span class="number">100</span> * correct / total))</span><br></pre></td></tr></table></figure>
<h3 id="存取模型"><a href="#存取模型" class="headerlink" title="存取模型"></a>存取模型</h3><p>保存训练好的模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PATH = <span class="string">'./cifar_net.pth'</span></span><br><span class="line">torch.save(net.state_dict(), PATH)</span><br></pre></td></tr></table></figure>
<p>读取保存的模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pretrained_net = torch.load(PATH)</span><br></pre></td></tr></table></figure>
<p>加载模型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">net3 = Net()</span><br><span class="line">net3.load_state_dict(pretrained_net)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PyTorch</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客NexT主题点击侧边栏日志出现问题的解决办法</title>
    <url>/2020/05/11/Hexo%E5%8D%9A%E5%AE%A2NexT%E4%B8%BB%E9%A2%98%E7%82%B9%E5%87%BB%E4%BE%A7%E8%BE%B9%E6%A0%8F%E6%97%A5%E5%BF%97%E5%87%BA%E7%8E%B0%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<p>部署好博客并安装了NexT主题后，发现一个问题：侧边栏头像下面的日志点击是404的页面。于是到网上搜索，发现是符号转码的问题。</p>
<a id="more"></a>
<p><strong>解决方法：</strong></p>
<p>到<code>\themes\next\layout\_macro</code>目录下找到<code>sidebar.swig</code>文件，打开找到这一行：</p>
<p><img src="http://images.yingwai.top/picgo/nextsidebarrizhif1.png" alt=""></p>
<p>原因是<code>url_for</code>函数将<code>||</code>转码了，</p>
<p>将<code>theme.menu.archives</code>后面的括号更换一下位置即可：</p>
<p><img src="http://images.yingwai.top/picgo/nextsidebarrizhif2.png" alt=""></p>
<p>这时候点击日志就会自动跳转到归档页。</p>
]]></content>
      <categories>
        <category>Env</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>不经意传输（Oblivious Transfer）</title>
    <url>/2020/04/25/%E4%B8%8D%E7%BB%8F%E6%84%8F%E4%BC%A0%E8%BE%93%EF%BC%88Oblivious-Transfer%EF%BC%89/</url>
    <content><![CDATA[<p><em>设S有一个秘密，想以1/2的概率传递给R，即B有50%的机会收到这个秘密，另外50%的机会什么也没有收到，协议执行完后，B知道自己是否收到了这个秘密，但S却不知道R是否收到了这个秘密。这种协议就称为不经意传输协议。</em></p>
<a id="more"></a>
<p>​        例如A是机密的出售者，S列举了很多问题，意欲出售各个问题的答案，R想买其中一个问题的答案，但又不想让A知道自己买的是哪个问题的答案。</p>
<h2 id="1-out-of-2-OT"><a href="#1-out-of-2-OT" class="headerlink" title="1-out-of-2 OT"></a>1-out-of-2 OT</h2><p>OT最早在1981年被 Michael O. Rabin提出，在Rabin的OT协议中，发送者S发送一个信息m给接收者R，接收者R以1/2的概率接受信息m。所以在协议交互的结束的时候，S并不知道R是否接受了消息。该方案是基于RSA加密体系构造的。</p>
<p>1985年S. Even, O. Goldreich, and A. Lempel提出了1-out-2 OT,在新的方案中S每次发送2个信息 $m<em>0$ 和 $m_1$，而R每次输入一个选择 $b$。当协议结束的时候，S无法获得关于 $b$ 的任何有价值的信息，而R只能获得 $m_b$ ，对于 $m</em>{1-b}$ ，R也一无所知。<br><img src="http://images.yingwai.top/picgo/OTf1.png" alt=""></p>
<h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><p>S要传送两条信息，不妨设为两个比特 $b<em>0$ 和 $b_1$，而R只能选择接受其中一个比特 $b</em>{\theta}$。协议要保证S和R的安全，即：</p>
<ul>
<li>S不能知道任何关于 $\theta$ 的信息；</li>
<li>R不能知道任何关于 $b_{1-\theta}$ 的信息。</li>
</ul>
<p>为了达成上面两点要求，构造如下协议：</p>
<ol>
<li><p>S选择好两个比特信息 $b_0$ 和 $b_1$；</p>
</li>
<li><p>S运行密钥生成算法（例如RSA）生成公私钥对（$sk,pk$）；</p>
</li>
<li><p>S保密私钥，同时S要生成两个随机数 $x_0$ 和 $x_1$，并将这两个随机数和公钥一并传送给R；</p>
</li>
<li><p>R选择 $\theta$，并生成一个数 $r$，R用S的公钥加密 $r$，并生成信息</p>
<p>​                                <script type="math/tex">v =x_{\theta}+E_{pk}(r)</script></p>
</li>
<li><p>S在接收到 $v$ 之后，进行如下计算：</p>
<p>​                                $r<em>{0}=D</em>{s k}\left(v-x<em>{0}\right)$<br>​                                $r</em>{1}=D<em>{s k}\left(v-x</em>{1}\right)$</p>
</li>
<li><p>S进行如下计算：</p>
<p>​                                $b<em>{0}^{\prime}=b</em>{0}+r<em>{0}$<br>​                                $b</em>{1}^{\prime}=b<em>{1}+r</em>{1}$</p>
<p>并将 $b’_0$ 和 $b’_1$ 传送给R；</p>
</li>
<li><p>接收到 $b’_0$ 和 $b’_1$ 后，R进行如下计算：</p>
<p>​                                $b<em>\theta = b’</em>\theta - r$</p>
</li>
</ol>
<h3 id="正确性"><a href="#正确性" class="headerlink" title="正确性"></a>正确性</h3><p>进行如下推导：</p>
<p>​                                $b<em>{\theta}^{\prime}-r=b</em>{\theta}+r<em>{\theta}-r=b</em>{\theta}+D<em>{s k}\left(v-x</em>{\theta}\right)-r$</p>
<p>而</p>
<p>​                        $D<em>{s k}(v-x</em>\theta)=D<em>{s k}\left(x</em>\theta+E<em>{p k}(r)-x</em>{\theta}\right)=D<em>{s k}\left(E</em>{p k}(r)\right)=r$</p>
<p>因此可得</p>
<p>​                                            $b’<em>\theta - r = b</em>\theta$</p>
<h3 id="对于S的安全性"><a href="#对于S的安全性" class="headerlink" title="对于S的安全性"></a>对于S的安全性</h3><p>对于S来说，它的安全性要求R不能推断出 $b<em>{1-\theta}$。R得到 $b’</em>\theta$ 和 $b’<em>{1-\theta}$ 之后，由协议可知R可以正确计算 $b’</em>\theta$ ，下面证明R不能计算出 $b_{1-\theta}$。</p>
<p>​                        $b<em>{1-\theta}^{\prime}-r=b</em>{1-\theta}+D<em>{s k}\left(v-x</em>{\theta}\right)-r$</p>
<p>而</p>
<p>​                    $D<em>{s k}\left(v-x</em>{\theta}\right)=D<em>{s k}\left(x</em>{1-\theta}+E<em>{p k}(r)-x</em>{\theta}\right) \neq r$</p>
<p>而且根据加密的特性，$D<em>{s k}\left(x</em>{1-\theta}+E<em>{p k}(r)-x</em>{\theta}\right)-r$ 与随机数是不可区分的，所以 $b’_{1-\theta}-r$ 与随机数是不可区分的。因此协议对S是安全的。</p>
<h3 id="对于R的安全性"><a href="#对于R的安全性" class="headerlink" title="对于R的安全性"></a>对于R的安全性</h3><p>R的安全性要求S不能获得关于 $\theta$ 任何有价值的信息。</p>
<p>因为 $r$ 是随机数，所以 $E_{pk}(r)$ 与随机数是不可区分的。因此 $v$ 与随机数是不可区分的，所以S不能从 $v$ 获得关于 $\theta$ 有价值的信息。</p>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>密码学</tag>
        <tag>MPC</tag>
      </tags>
  </entry>
  <entry>
    <title>使用you-get下载网址视频</title>
    <url>/2020/05/20/%E4%BD%BF%E7%94%A8you-get%E4%B8%8B%E8%BD%BD%E7%BD%91%E5%9D%80%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<hr>
<a id="more"></a>
<p>you-get是基于Python开发的，实际它不只支持视频下载，还支持图片、音乐等。而且，只要视频的地址，一行代码即可。</p>
<h1 id="安装you-get"><a href="#安装you-get" class="headerlink" title="安装you-get"></a>安装you-get</h1><p>安装you-get的方式有很多，下面三种择其一即可。</p>
<h2 id="使用pip安装"><a href="#使用pip安装" class="headerlink" title="使用pip安装"></a>使用pip安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip3 install you-get</span></span><br></pre></td></tr></table></figure>
<p><img src="http://images.yingwai.top/picgo/yougetf1.png" alt=""></p>
<h2 id="Git克隆"><a href="#Git克隆" class="headerlink" title="Git克隆"></a>Git克隆</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> git://github.com/soimort/you-get.git</span></span><br></pre></td></tr></table></figure>
<p>然后直接运行<code>./setup.py</code>即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3 setup.py install</span></span><br></pre></td></tr></table></figure>
<h2 id="通过HomeBrew安装（Mac）"><a href="#通过HomeBrew安装（Mac）" class="headerlink" title="通过HomeBrew安装（Mac）"></a>通过HomeBrew安装（Mac）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew install you-get</span></span><br></pre></td></tr></table></figure>
<h1 id="下载视频"><a href="#下载视频" class="headerlink" title="下载视频"></a>下载视频</h1><p>命令行中输入以下代码下载视频：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> you-get <span class="string">'视频地址URL'</span></span></span><br></pre></td></tr></table></figure>
<p>这里以B站某视频为例：</p>
<p><img src="http://images.yingwai.top/picgo/yougetf2.png" alt=""></p>
<p>下载好的视频存放在系统盘的用户目录下。</p>
<h1 id="查看视频信息"><a href="#查看视频信息" class="headerlink" title="查看视频信息"></a>查看视频信息</h1><p>命令行输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> you-get -i <span class="string">'视频地址URL'</span></span></span><br></pre></td></tr></table></figure>
<p>用刚刚下载的视频测试，结果如下：</p>
<p><img src="http://images.yingwai.top/picgo/yougetf3.png" alt=""></p>
<p>可以看到它的默认设置不是MP4格式的视频，如果想要换成这种格式，可以在命令行输入：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> you-get --itag=18 <span class="string">'视频地址URL'</span></span></span><br></pre></td></tr></table></figure>
<h1 id="支持的网站"><a href="#支持的网站" class="headerlink" title="支持的网站"></a>支持的网站</h1><p>除了B站，还可以用you-get下载国内外很多主流网站的视频、图片和音乐。</p>
<p>这里列出支持的国外网站：</p>
<p><img src="http://images.yingwai.top/picgo/yougetf4.jpg" alt=""></p>
]]></content>
      <categories>
        <category>Env</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Zotero的附件同步</title>
    <url>/2020/07/10/Zotero%E7%9A%84%E9%99%84%E4%BB%B6%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<hr>
<a id="more"></a>
<p>Zotero的存储空间只有100M，不付费的话使用起来肯定不够。因此可以使用坚果云来同步附件，这样做的好处是ios上的PaperShip也可以通过WebDAV读取资料。</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>注册一个坚果云账号，然后开启第三方应用管理：</p>
<ol>
<li><p>登陆坚果云网页端，点击右上角的账号名称——账户信息——安全选项</p>
<p><img src="http://images.yingwai.top/picgo/zeterojgyf1.png" alt=""></p>
<p>然后点击添加应用，应用名称填Zotero(也可以填其它，只要你记得对应的软件)，会自动生成一个应用密码。</p>
</li>
<li><p>打开Zotero，点击菜单栏的编辑——首选项——同步，在文件同步中选择WebDav，复制坚果云内第三方应用管理的服务器地址、账户和密码，复制完成后点击 <em>验证服务器</em>。</p>
<p><img src="http://images.yingwai.top/picgo/zeterojgyf2.png" alt=""></p>
<p>这一步出现问题的话可以尝试在坚果云网页端手动建立一个zotero根目录，与zotero填的地址对应。</p>
</li>
</ol>
<h1 id="ZotFile的安装与设置"><a href="#ZotFile的安装与设置" class="headerlink" title="ZotFile的安装与设置"></a>ZotFile的安装与设置</h1><p>进入<a href="http://zotfile.com/" target="_blank" rel="noopener">zotfile官网 </a>下载。<br>然后打开Zotero，点击菜单栏工具——插件，有以下界面：</p>
<p><img src="http://images.yingwai.top/picgo/zeterojgyf3.png" alt=""></p>
<p>点击右上角的齿轮，选择 <em>Install Add-on From File…</em>，在弹出的插件安装中选择刚才下载的xpi文件进行安装。</p>
<p>安装完成后点击菜单栏工具——ZotFile Preferences——General Settings：</p>
<ol>
<li>将Source Folder for Attaching new Files中的目录设置为浏览器默认的下载文件目录；</li>
<li>将Location of Files中的目录设置为第一个Attach stored copy of files，要选择这个才能与前面的WebDAV设置配合使用。</li>
</ol>
<p><img src="http://images.yingwai.top/picgo/zeterojgyf4.png" alt=""></p>
<p>下面的 /%w/%y 是命名格式，也可以设置成别的。</p>
<p>完成以上操作后，当我们在浏览器中点击Zotero插件时，软件就会自动将下载下来的pdf文件拷贝到云盘的目录中，并将它的目录链接保存到对应的文献条目下。</p>
<h1 id="PaperShip使用"><a href="#PaperShip使用" class="headerlink" title="PaperShip使用"></a>PaperShip使用</h1><p>方法类似上面，只要在坚果云网页端添加应用，在PaperShip登陆时选择WebDAV，把账号密码输入即可。这样在PC端管理的文献就可以方便地在移动端进行访问。</p>
<p>效果：</p>
<p><img src="http://images.yingwai.top/picgo/zoterojgyf5.jpg" alt=""></p>
]]></content>
      <categories>
        <category>Env</category>
      </categories>
      <tags>
        <tag>Zotero</tag>
        <tag>坚果云</tag>
        <tag>PaperShip</tag>
      </tags>
  </entry>
  <entry>
    <title>群与环的概念</title>
    <url>/2020/07/06/%E7%BE%A4%E4%B8%8E%E7%8E%AF%E7%9A%84%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<hr>
<a id="more"></a>
<h1 id="群-Group"><a href="#群-Group" class="headerlink" title="群(Group)"></a>群(Group)</h1><h2 id="群的定义"><a href="#群的定义" class="headerlink" title="群的定义"></a>群的定义</h2><p>群是一个集合 $G$ 加上在 $G$ 中定义的一个二元运算 $\circ$，$\circ$ 满足下面条件：</p>
<ol>
<li><strong>封闭性(Closure)</strong>：对于任意的 $a,b \in G$，$a \circ b \in G$ ；</li>
<li><strong>结合律(Associativity)</strong>：对于任意的 $a,b,c \in G$，有 $(a \circ b) \circ c = a \circ (b \circ c)$；</li>
<li><strong>单位元(Identity element)</strong>：在 $G$ 中存在一个元素 $e$，它对 $G$ 中的任意元素 $g$，有 $e \circ g = g \circ e = g$；</li>
<li><strong>逆元(Inverse element)</strong>：对 $G$ 中任意元素 $g$ 都存在 $G$ 中的一个 $g’$ 使 $g \circ g’ = g’ \circ g = e$。</li>
</ol>
<p>单位元 $e$ 和每个 $g$ 对应的逆元 $g^{-1}$ 都是唯一的。</p>
<h2 id="其它一些概念"><a href="#其它一些概念" class="headerlink" title="其它一些概念"></a>其它一些概念</h2><ol>
<li>假如一个群的元素个数是一个有限整数，称这个群为<strong>有限群</strong>，否则称这个群为<strong>无限群</strong>。一个有限群 $G$ 的元素的个数叫做这个<strong>群的阶</strong>，记为 $|G|$。</li>
<li><strong>交换群</strong>：也称为<strong>Abel群</strong>，对于任意的 $a,b \in G$ 都有 $a \circ b = b \circ a$，即满足交换律的群。</li>
<li><strong>半群</strong>：仅满足群定义中封闭性与结合律。</li>
<li><strong>幺半群</strong>：仅满足群定义中封闭性与结合律与单位元。</li>
</ol>
<h2 id="循环群"><a href="#循环群" class="headerlink" title="循环群"></a>循环群</h2><p>循环群 $G$ 中的每一个元素都是某一固定元素 $a$ 的方幂，即 $G = {a^n | n \in \mathbb{Z}}$。我们也称 $G$ 是由元素 $a$ 生成的，记为 $G=(a)$，$a$ 称为 $G$ 的一个生成元素。</p>
<p>例子1：$G = (\mathbb{Z}, +)$ 是一个循环群，因为 $G = (1)$。</p>
<p>例子2：设 $p$ 是一个素数，则模 $p$ 的简化剩余系 $(\mathbb{Z}^*_p, \times)$ 构成一个循环群。模 $p$ 的原根 $g$ 为这个群的一个生成元素。</p>
<h2 id="群同态与群同构"><a href="#群同态与群同构" class="headerlink" title="群同态与群同构"></a>群同态与群同构</h2><p>设 $(G,\cdot), (H,\times)$ 是两个群，如果存在 $G$ 到 $H$ 的一个映射 $f : G \mapsto H$，使得</p>
<script type="math/tex; mode=display">
f(a \cdot b) = f(a) \times f(b)</script><p>对一切 $a,b \in G$ 均成立，那么就说 $f$ 是 $G$ 到 $H$ 的一个<strong>同态映射</strong>。如果 $f$ 是 $G$ 到 $H$ 的满射，那么就说 $f$ 是满同态，用符号 $G \sim H$ 表示，称 $H$ 为 $f$ 下的同态象。如果 $G$ 到 $H$ 的同态映射 $f$ 是单射，那么就说 $f$ 是 $G$ 到 $H$ 的单一同态。如果这个 $f$ 是 $G$ 到 $H$ 的一一映射，那么就说 $f$ 是 $G$ 到 $H$ 的一个同构映射，此时称这两个<strong>群同构</strong>，记为 $G \cong H$。</p>
<p>假定 $G$ 是一个由元 $a$ 所生成的循环群。当 $a$ 的阶无限时，那么 $G$ 与整数加群同构；若 $a$ 的阶是一个有限整数 $n$，那么 $G$ 与模 $n$ 的剩余类加群同构。</p>
<h1 id="环-Ring"><a href="#环-Ring" class="headerlink" title="环(Ring)"></a>环(Ring)</h1><h2 id="环的定义"><a href="#环的定义" class="headerlink" title="环的定义"></a>环的定义</h2><p>设 $R$ 是一个非空集合，其上定义两个运算：加法 $(+)$ 和乘法 $(\cdot)$，$(R,+,\cdot)$ 构成一个环，如果这些运算满足</p>
<ol>
<li>$(R, +)$ 是一个交换群，其单位元称为零元，记为 $0$。即：<ul>
<li>$(R,+)$ 是封闭的；</li>
<li>$(a+b) = (b+a)$；</li>
<li>$(a+b)+c=a+(b+c)$</li>
<li>$0+a = a+0 = a$；</li>
<li>$\forall a \ \exists(-a)$ 满足 $a+-a = -a + a=0$。</li>
</ul>
</li>
<li>$(R, \cdot)$ 形成一个半群，即：<ul>
<li>$(a \cdot b) \cdot c = a \cdot (b \cdot c)$；</li>
<li>$(R, \cdot)$ 是封闭的。</li>
</ul>
</li>
<li>乘法关于加法满足分配律：<ul>
<li>$a \cdot (b + c) = (a \cdot b) + (a \cdot c)$；</li>
<li>$(a+b) \cdot c =  (a \cdot c) + (b \cdot c)$。</li>
</ul>
</li>
</ol>
<p>其中，乘法运算符 $\cdot$ 常被忽略，所以 $a \cdot b$ 可简写为 $ab$。此外，乘法是比加法优先的运算，所以 $a+bc$ 其实是 $a + (b \cdot c)$。</p>
<h2 id="基本性质"><a href="#基本性质" class="headerlink" title="基本性质"></a>基本性质</h2><p>考虑一个环 $R$，</p>
<ol>
<li>如果 $a + b = a + c$，那么 $b = c$；</li>
<li>对于任意的 $a \in R$，都有 $0a = a0 = 0$，这里的 $0$ 为加群中的零元；</li>
<li>对于任意的 $a,b \in R$，都有 $(-a)b = -ab = a(-b)$。</li>
</ol>
<p>最后定义 $a$ 的 $n$ 次方。环 $R$ 中，$a^n$ 表示</p>
<script type="math/tex; mode=display">
\begin{matrix} 
& n个 \\ a^n = & \overbrace{ a \cdot \cdot \cdot a }
\end{matrix}</script><p>显然对于正整数 $n,m$ 有</p>
<script type="math/tex; mode=display">
a^n \cdot a^m = a^{m+n}, \ \ (a^n)^m = a^{mn}</script><h2 id="环例子"><a href="#环例子" class="headerlink" title="环例子"></a>环例子</h2><ul>
<li>全体整数所成集合 $\mathbb{Z}$ 对于数的加法和乘法作成一个环，称为整数环。</li>
<li>模 $n$ 剩余系对于模 $n$ 加法和模 $n$ 乘法成为一个环。</li>
</ul>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>群</tag>
        <tag>环</tag>
        <tag>近世代数</tag>
      </tags>
  </entry>
  <entry>
    <title>在不同的电脑上更新Hexo博客</title>
    <url>/2020/08/23/%E5%9C%A8%E4%B8%8D%E5%90%8C%E7%9A%84%E7%94%B5%E8%84%91%E4%B8%8A%E6%9B%B4%E6%96%B0Hexo%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<hr>
<a id="more"></a>
<p>参考了<a href="https://helloliwen.github.io/870ed150.html以及https://www.zhihu.com/question/21193762中CrazyMilk的回答。" target="_blank" rel="noopener">https://helloliwen.github.io/870ed150.html以及https://www.zhihu.com/question/21193762中CrazyMilk的回答。</a></p>
<p>思路是使用git的分支来管理。</p>
<h1 id="搭建流程"><a href="#搭建流程" class="headerlink" title="搭建流程"></a>搭建流程</h1><p>原本编辑博客的电脑：</p>
<ol>
<li><p>首先在github上新建一个hexo分支，并设置它为默认分支。</p>
</li>
<li><p>在电脑上的其它目录中，克隆hexo仓库到本地，获得隐藏的.git文件夹。</p>
</li>
<li><p>复制这个文件夹到原来的博客目录下，删除博客主题目录下的.git文件夹，然后前面克隆的文件夹就可以删除了。</p>
</li>
<li><p>上传</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"备注"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin hexo</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="本机编辑博客"><a href="#本机编辑博客" class="headerlink" title="本机编辑博客"></a>本机编辑博客</h1><p>编辑完文章后，</p>
<ol>
<li><p>上传到hexo分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add .</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">"备注"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin hexo</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo d -g</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="在别的电脑上编辑博客"><a href="#在别的电脑上编辑博客" class="headerlink" title="在别的电脑上编辑博客"></a>在别的电脑上编辑博客</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li>安装git</li>
<li>克隆github上的hexo分支到本地</li>
<li>安装node.js</li>
<li>安装hexo（不需要初始化）</li>
</ol>
<p>后面两步可以参考<a href="https://yuyingwai.cn/2020/04/11/Hexo博客搭建/" target="_blank" rel="noopener">Hexo博客搭建</a>。</p>
<h2 id="编辑博客"><a href="#编辑博客" class="headerlink" title="编辑博客"></a>编辑博客</h2><p><strong>每次换电脑进行博客更新时，不管上次在其他电脑有没有更新，最好先执行<code>git pull origin hexo</code> 命令</strong>，即将远端最新的hexo分支拉到本地，使本地与远端达到同步。</p>
<p>然后与本机编辑一样，先用 <code>git add .</code>、<code>git commit -m &quot;备注&quot;</code> 和 <code>git push origin hexo</code> 上传，再进行部署。</p>
]]></content>
      <categories>
        <category>Env</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记 ASTRA: High Throughput 3PC over Rings with Application to Secure Prediction</title>
    <url>/2020/04/20/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-ASTRA-High-Throughput-3PC-over-Rings-with-Application-to-Secure-Prediction/</url>
    <content><![CDATA[<p><em>Harsh Chaudhari, Ashish Choudhury, Arpita Patra, Ajith Suresh</em></p>
<p>ACM CCSW 2019</p>
<p><a href="https://eprint.iacr.org/2019/429" target="_blank" rel="noopener">https://eprint.iacr.org/2019/429</a></p>
<p><a href="https://dl.acm.org/doi/10.1145/3338466.3358922" target="_blank" rel="noopener">https://dl.acm.org/doi/10.1145/3338466.3358922</a></p>
<a id="more"></a>
<p><img src="http://images.yingwai.top/picgo/ASTRA.jpg" alt=""></p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>安全计算的具体效率一直是近年来许多工作关注的焦点。在本论文中，作者提出了一种具体有效的协议，用于模 $2^l$ 整数环上的安全三方计算（3PC），该协议具有半诚实模型和恶意模型上的安全性。由于环上的计算模拟了现实系统体系结构上的计算，所以环上的安全计算近来获得了发展势头。</p>
<p>​        在离线-在线模式中，本文的结构具体地呈现了最有效的在线阶段。在半诚实的设置下，本文的协议在在线阶段每个乘法门需要2个环元素的通信。在恶意设置下，本文的协议在在线阶段每个乘法门需要4个元素的通信，比最先进的协议需要的5个元素少。使用选择性中止和公平这两个安全概念来实现的公平恶意协议，与仅针对输出门的中止安全性的恶意协议相比，涉及的通信稍微多一些。</p>
<p>​        作者将本文的技术从3PC应用到安全的服务器辅助机器学习（ML）推理机制中，用于一系列预测函数——线性回归、线性SVM回归、Logistic回归和线性SVM分类。本文的设置考虑了拥有训练好的模型参数的模型所有者和查询的客户，后者愿意根据前者的模型参数来学习他查询的预测。输入和计算外包给一组三个非合谋的服务器。本文的构造既迎合了半诚实的世界，也迎合了恶意的世界，比现有的构造表现得更好。</p>
<h3 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h3><ul>
<li><p>作者遵循离线-在线模式，提出了在环 $\mathbb{Z}<em>{2^l}$（包括布尔环 $\mathbb{Z}</em>{2^1}$）上的3PC构造，具有最有效的在线阶段。</p>
<p>虽然重点放在在现阶段，但离线阶段的的成本也有注意并保持在可控范围内。</p>
</li>
<li><p>作者给出了一系列满足半诚实安全和恶意安全的构造。</p>
<p>将技术应用于外包环境中的一系列预测函数的安全预测，并构建了一些容忍半诚实和恶意对手的结构。</p>
</li>
</ul>
<p>本文所有的构建都流露出的一个共同特征：在线阶段不到三对参与者之间需要进行功能依赖的通信，从而产生更好的在线性能。</p>
<h2 id="设定"><a href="#设定" class="headerlink" title="设定"></a>设定</h2><p>本文考虑一组三方 $\mathcal{P}=\left{P<em>0,P_1,P_2\right}$，它们在同步网络中通过成对的私有和可信信道连接。要计算的函数 $f$ 被表示为环 $\mathbb{Z}</em>{2^l}$ 上的电路 ckt，该环由2输入加法和乘法门组成。假设 ckt 的拓扑是公知的。术语 D​ 表示 ckt 的乘法深度，而 I、O、A、M 分别表示 ckt 中的输入线、输出线、加法门和乘法门的数目。本文使用符号 $w<em>x$ 来表示导线 $w$，其中值 $x$ 流经它。本文使用 $g=(w_x,w_y,w_z)$ 来表示 ckt 中具有左输入线 $w_x$、右输入线 $w_y$ 和输出线 $w_z$ 的门。在本文的协议中，将 $\mathcal{P}$ 划分为互不相交的集合 $\left{P_0\right}$ 和 $\left{P_1,P_2\right}$，其中 $P_0$ 在离线阶段充当“分配器”进行“预处理”，在线阶段“评估者” $P_1$、$P_2$ 用它来评估 ckt。本文使用上标“$s$”和“$m$”分别区分半诚实和恶意设置中的协议。布尔环 $\mathbb{Z}</em>{2^1}$ 上的协议可以通过将算术加法$(+)$和乘法$(\times)$分别替换为异或$(\oplus)$和与$(\cdot)$来获得。</p>
<h3 id="共享密钥设置"><a href="#共享密钥设置" class="headerlink" title="共享密钥设置"></a>共享密钥设置</h3><p>为了保存双方之间的通信，使用为伪随机函数（PRF）$F$ 建立预共享随机密钥的一次性设置。在3PC设置[2，30，46]中的已知协议中已经使用了类似的设置。这里 $F:^\kappa \times ^\kappa \to X$ 是安全的PRF，同域 $X$ 是 $\mathbb{Z}_{2^l}$。这组密钥是：</p>
<ul>
<li>每对参与方之间共享一个密钥— $k<em>{01}, k</em>{02}, k_{12}$，分别用于参与方$(P_0,P_1), (P_0,P_2), (P_1,P_2)$。</li>
<li>所有各方之间的一个共享密钥— $k_{\mathcal{p}}$。</li>
</ul>
<p>本文通过可以使用任何标准安全MPC协议实现的功能 $\mathcal{F}_{\rm setup}$ 来建立密钥设置模型。</p>
<h3 id="共享语义"><a href="#共享语义" class="headerlink" title="共享语义"></a>共享语义</h3><p>在本节中，将解释本工作中使用的秘密共享的两种变体。这两个变体都在算术（$\mathbb{Z}<em>{2^l}$）和布尔环（$\mathbb{Z}</em>{2^1}$）上运行。</p>
<p>$[\cdot]$-共享：如果 $P<em>1$ 和 $P_2$ 分别持有份额 $v_1$ 和 $v_2$，使得 $v=v_1+v_2$，则称值 $v$ 在$P_1,P_2$之间是 $[\cdot]$-共享的。用 $[\cdot]</em>{P_i}$ 表示 $P_i, i∈{1,2}$的 $[\cdot]$-份额。</p>
<p>$[![\cdot]!]$-共享：值 $v$ 在 $P_0, P_1, P_2$ 之间是$[![\cdot]!]$-共享的，如果</p>
<ul>
<li>存在值 $\lambda_v, m_v$ 使得 $v=m_v - \lambda_v$；</li>
<li>$P<em>0$ 持有 $\lambda</em>{v,1}$ 和 $\lambda<em>{v,2}$ 使得 $\lambda</em>{v} = \lambda<em>{v,1} + \lambda</em>{v,2}$；</li>
<li>$P<em>1$ 和 $P_2$ 分别持有 $(m_v, \lambda</em>{v,1})$ 和 $(m<em>v, \lambda</em>{v,1})$。</li>
</ul>
<p>本文将各方的$[![\cdot]!]$-共享表示为$[![v]!]<em>{P_0} = (\lambda</em>{v,1}, \lambda<em>{v,2}), [![v]!]</em>{P<em>1} = (m_v, \lambda</em>{v,1}) $和 $[![v]!]<em>{P_2} = (m_v, \lambda</em>{v,2})$。用$[![v]!] = (m<em>v, [\lambda</em>{v}])$表示 $v$ 的$[![\cdot]!]$-共享份额。</p>
<h3 id="秘密共享方案的线性"><a href="#秘密共享方案的线性" class="headerlink" title="秘密共享方案的线性"></a>秘密共享方案的线性</h3><p>给定 $x,y \in \mathbb{Z}<em>{2^l}$ 和公共常数 $c_1, c_2 \in \mathbb{Z}</em>{2^l}$的$[\cdot]$-共享，各方可以局部计算 $[c_1x+c_2y]$：</p>
<script type="math/tex; mode=display">[c_1x+c_2y]=(c_1x_1+c_2y_1, c_1x_2+c_2y_2)=c_1[x]+c_2[y]</script><p>很容易看出线性关系也扩展到$[![\cdot]!]$-共享。线性属性使各方能够<strong>本地</strong>执行与公共常量的加法和乘法等操作。</p>
<h2 id="3PC协议"><a href="#3PC协议" class="headerlink" title="3PC协议"></a>3PC协议</h2><h3 id="半诚实下的3PC"><a href="#半诚实下的3PC" class="headerlink" title="半诚实下的3PC"></a>半诚实下的3PC</h3><p>协议 $\prod ^{\rm s}_{\rm 3pc}$ 由三个步骤组成—输入共享、电路评估以及输出重构。所有阶段（重构输出除外）都分为离线和在线阶段，其中独立于实际输入的步骤可以在脱机阶段执行。</p>
<h4 id="输入共享"><a href="#输入共享" class="headerlink" title="输入共享"></a>输入共享</h4><p>在共享输入阶段，每一方都为自己的输入生成一个随机的$[![\cdot]!]$-共享。以下是初始共享协议 $\prod^{\rm s}_{\rm Sh}$：</p>
<hr>
<p><strong>Offline:</strong></p>
<ul>
<li>If $P<em>i = P_0$, parties $P_0, P_j$ for $j \in {1, 2}$ locally sample a random $\lambda</em>{x,j} \in \mathbb{Z}<em>{2^l}$. Moreover, $P_i$ sets $[![x]!]</em>{P<em>i} = (\lambda</em>{x,1}, \lambda_{x,2})$.</li>
<li>If $P<em>i = P_1$, parties $P_0, P_1$ sample a random $\lambda</em>{x,1} \in \mathbb{Z}<em>{2^l}$ while all the parties in $\mathcal{P}$ sample a random $\lambda</em>{x,2} \in \mathbb{Z}_{2^l}$.</li>
<li>If $P<em>i = P_2$, parties $P_0, P_2$ sample a random $\lambda</em>{x,2} \in \mathbb{Z}<em>{2^l}$ while all the parties in $\mathcal{P}$ sample a random $\lambda</em>{x,1} \in \mathbb{Z}_{2^l}$.</li>
</ul>
<p><strong>Online:</strong></p>
<p>​        $P<em>i$ computes $\lambda_x = \lambda</em>{x,1} + \lambda<em>{x,2}$ and sends $m_x = x + \lambda_x$ to every $P_j$ for $j \in {1,2}$ who then sets $[![x]!]</em>{P<em>j} = (m_x, \lambda</em>{x,j})$.</p>
<hr>
<p>在离线阶段根据输入方的序号，使用不同的初始化手段，生成了 $P<em>0$ 的份额 $[![x]!]</em>{P<em>0}=(\lambda</em>{x,1}, \lambda_{x,2})$，而不用任何交互（因为随机数都是使用服务器两两之间的公共随机源生成的，可以理解为编程语言中把同样的随机种子输入到random函数——只要随机种子一样生成的随机数序列就一样）。</p>
<h4 id="电路评估"><a href="#电路评估" class="headerlink" title="电路评估"></a>电路评估</h4><p>在电路评估阶段，各方以$[![\cdot]!]$-共享的方式评估 ckt。以拓扑顺序评估 ckt 中的每个门 $g$：给定 $g$ 的输入，各方为 $g$ 的输出生成$[![\cdot]!]$-共享。</p>
<h5 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h5><p>如果 $g$ 是加法门 $(w<em>x,w_y,w_z)$，可以利用$[![\cdot]!]$-共享的线性在本地完成。以下是加法协议 $\prod</em>{\rm Add} (w_x, w_y, w_z)$：</p>
<hr>
<p><strong>Offline:</strong></p>
<p>​        $P<em>0, P_1$ set $\lambda</em>{z,1} = \lambda<em>{x,1} + \lambda</em>{y,1}$, while $P<em>0, P_2$ set $\lambda</em>{z,2} = \lambda<em>{x,2} + \lambda</em>{y,2}$.</p>
<p><strong>Online:</strong></p>
<p>​        $P_1$ and $P_2$ set $m_z = m_x + m_y$.</p>
<hr>
<p>这里的加法协议感觉在线阶段完全可以在本地完成，可以不需要在线阶段。</p>
<h5 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h5><p>如果 $g=(w<em>x,w_y,w_z)$ 是乘法门，则运行以下乘法协议 $\prod ^{\rm s}</em>{\rm Mul}$：</p>
<hr>
<p><strong>Offline:</strong></p>
<ul>
<li>$P<em>0$ and $P_1$ locally sample random $\lambda</em>{z,1}, \gamma<em>{xy, 1} \in \mathbb{Z}</em>{2^l}$, while $P<em>0$ and $P_2$ locally sample random $\lambda</em>{z,2} \in \mathbb{Z}_{2^l}$.</li>
<li>$P<em>0$ computes $\gamma</em>{xy} = \lambda<em>x \lambda_y$ and sends $\gamma</em>{xy,2} = \gamma<em>{xy} - \gamma</em>{xy,1}$ to $P_2$.</li>
</ul>
<p><strong>Online:</strong></p>
<ul>
<li>$P<em>i$ for $i \in {1,2}$ locally computes $[m_z]</em>{P<em>i} = (i-1)m_xm_y - m_x[\lambda_y]</em>{P<em>i} - m_y[\lambda_x]</em>{P<em>i} + [\lambda_z]</em>{P<em>i} + [\gamma</em>{xy}]_{P_i}$.</li>
<li>$P_1, P_2$ mutually exchange their shares and reconstruct $m_z$.</li>
</ul>
<hr>
<p>将上面的公式相加一下即可验证其正确性。</p>
<h4 id="输出重构"><a href="#输出重构" class="headerlink" title="输出重构"></a>输出重构</h4><p>在输出重构阶段，各方重构$[![\cdot]!]$-共享电路输出。为了重构 $[![y]!]$，可以观察到每个 $P<em>i$ 缺失的份额都在另外两方手里。因此另外两方的其中一方将缺失的份额发送给 $P_i$ 后，通过计算 $y = m_y - \lambda</em>{y,1} - \lambda<em>{y,2}$ 即可重构输出 $y$，将其称为重构协议 $\prod ^{\rm s}</em>{\rm Rec}([![y]!], \mathcal{P})$。</p>
<p>把上面三个阶段总结起来，有以下的协议 $\prod ^{\rm s}_{\rm 3pc}$：</p>
<hr>
<p><strong>Pre-processing (Offline Phase):</strong></p>
<ul>
<li><em>Input wires:</em> For $j = 1, …,l$, corresponding to the circuit-input $x<em>j$, parties execute the offline steps of the instance $\prod ^{\rm s}</em>{\rm Sh}(P_i, x_j)$.</li>
<li>For each gate $g$ in the topological order, execute offline steps of the instance $\prod ^{\rm s}<em>{\rm Mul}(w</em>{xj}, w<em>{yj}, w</em>{zj})$ if $g$ is the $j$th multiplication gate where $j \in {1,…,\rm M}$ or respectively offline steps of the instance $\prod <em>{\rm Add}(w</em>{xj}, w<em>{yj}, w</em>{zj})$ if $g$ is the $j$th addition gate where $j \in {1,…,\rm A}$.</li>
</ul>
<p><strong>Circuit Evaluation (Online Phase):</strong></p>
<ul>
<li><em>Sharing Circuit-input Values:</em> For $j = 1, …,l$, corresponding to the circuit-input $x<em>j$, parties execute the online steps of the instance $\prod ^{\rm s}</em>{\rm Sh}(P_i, x_j)$, where $P_i$ is the party designated to provide $x_j$.</li>
<li><em>Gate Evaluation:</em> For each gate in $g$ in ckt in the topological order, $P<em>1, P_2$ execute the online steps of the instance $\prod ^{\rm s}</em>{\rm Mul}(w<em>{xj},w</em>{yj},w<em>{zj})$ if $g$ is the $j$th multiplication gate where $j \in {1,…,\rm M}$ or respectively offline steps of the instance $\prod </em>{\rm Add}(w<em>{xj}, w</em>{yj}, w_{zj})$ if $g$ is the $j$th addition gate where $j \in {1,…,\rm A}$.</li>
<li><em>Output Reconstruction:</em> Let $[![y<em>1]!],…,[![y</em>\rm O]!]$ be the shared function outputs. The parties in $\mathcal{P}$ reconstruct $y<em>j$ for $j = 1,…,\rm O$ by executing $\prod ^{\rm s}</em>{\rm Rec}([![y_j]!], \mathcal{P})$.</li>
</ul>
<hr>
<h3 id="恶意下的3PC"><a href="#恶意下的3PC" class="headerlink" title="恶意下的3PC"></a>恶意下的3PC</h3><p>跟半诚实设置下的一样，恶意设置下的3PC协议 $\prod ^{\rm m}_{\rm 3pc}$ 也由输入共享、电路评估和输出重构三个部分组成。</p>
<h4 id="输入共享和输出重构"><a href="#输入共享和输出重构" class="headerlink" title="输入共享和输出重构"></a>输入共享和输出重构</h4><p>在恶意的设置下，要保证服务器之间的共享份额是一致的。在 $\prod ^{\rm s}_{\rm Sh}$ 中，$\lambda$ 的共享是一致的，因为它不需要交互就可以生成。但如果一个腐败的 $P_0$ 拥有 $x$ 并且想制造一个不一致的 $[![x]!]$-共享，它可以分别发送两个不一样的 $m_x$ 给 $P_1$ 和 $P_2$。为了检查这种情况的发生，$P_1$ 和 $P_2$ 交换 $H(m_x)$ 并在不一致的时候中止。</p>
<p>令 $[![y]!]$ 为一个待重构的一致的共享，$[![y]!]<em>{P_0} = (\lambda</em>{y,1}, \lambda<em>{y,2})$、$[![y]!]</em>{P<em>1} = (m’</em>{y}, \lambda<em>{y,1})$ 和 $[![y]!]</em>{P<em>2} = (m’’</em>{y}, \lambda<em>{y,2})$ 分别为三个服务器的份额。协议 $\prod ^{\rm m}</em>{\rm Rec}([![y]!], \mathcal{P})$ 允许每一个诚实方输出 $y$ 或 $\perp$：</p>
<hr>
<p><strong>Online:</strong></p>
<ul>
<li>$P<em>0$ and $P_2$ send $\lambda</em>{y,2}$ and $H(\lambda’_{y,2})$ respectively to $P_1$.</li>
<li>$P<em>0$ and $P_1$ send $\lambda</em>{y,1}$ and $H(\lambda’_{y,1})$ respectively to $P_2$.</li>
<li>$P<em>1$ and $P_1$ send $m’</em>{y}$ and $H(m’_{y})$ respectively to $P_0$.</li>
</ul>
<p>$P<em>i$ for $i \in {0,1,2}$ abort if the received values mismatch. Else $P_i$ sets $y = m_y - \lambda</em>{y,1} - \lambda_{y,2}$.</p>
<hr>
<p>检查的过程中，其中一方发送哈希值可以提高效率。</p>
<h4 id="电路评估-1"><a href="#电路评估-1" class="headerlink" title="电路评估"></a>电路评估</h4><p>在恶意设置下加法协议 $\prod <em>{\rm Add}$ 同样是安全的，因为它只涉及本地操作。挑战在于构造乘法协议 $\prod ^{\rm m}</em>{\rm Mul}$，令其可以容忍其中一方腐败。可以观察到有两种情况：</p>
<ul>
<li>$P<em>0$ 是腐败的：在离线阶段会令 $\gamma</em>{xy} \neq \lambda_x \lambda_y$</li>
<li>$P_1$ 或 $P_2$ 是腐败的：会在在线阶段扰乱，使诚实的另一方重构出一个错误的 $m_z$</li>
</ul>
<p>先看下面的情况，假如 $P<em>1$ 现在需要验证它重构的 $m_z$ 是否是正确的，可以向 $P_0$ 求助：$P_1$ 可以发送 $m_x, m_y$ 给 $P_0$，因为 $P_0$ 在离线阶段就已经知道 $\lambda_x, \lambda_y$ 和 $\lambda_z$，因此它可以计算出 $m_z$ 并发送给 $P_1$，以此得到验证。但发送 $m_x, m_y$ 给 $P_0$ 会导致打破了原有共享的私密性，所以 $P_1$ 可以对应的值盲化后发送给 $P_0$：$m^{\star}_x = m_x + \delta_x$ 和 $m^{\star}_y = m_y + \delta_y$，然后 $P_0$ 计算 $m^{\star}_z = -m^{\star}_x \lambda_y - m^{\star}_y \lambda_x +\lambda_z + 2\gamma</em>{xy}$。注意到：</p>
<script type="math/tex; mode=display">
\begin{align}
m^{\star}_z &= -m^{\star}_x \lambda_y - m^{\star}_y \lambda_x +\lambda_z + 2\gamma_{xy}\\
 &= -(m_x + \delta_x) \lambda_y - (m_y + \delta_y) \lambda_x +\lambda_z + 2\gamma_{xy}\\
 &= (m_z - m_x m_y) - \chi
\end{align}</script><p>假设 $P<em>0$ 知道 $\chi = \delta_x \lambda_y + \delta_y \lambda_x - \gamma</em>{xy}$，它就可以计算出 $m^{\star}_z + \chi$ 然后发送给 $P_1$。因为 $P_1$ 知道 $m_x, m_y$ 的值，因此它可以验证它重构的 $m_z$ 的正确性，对于 $P_2$ 来说也可以这样验证。</p>
<p>现在来描述如何使 $P<em>0$ 获得 $\chi$：首先直接让 $P_0$ 获得 $\chi$ 会导致共享的私密性被破坏，因为 $P_0$ 知道 $\lambda_x, \lambda_y$ 和 $\gamma</em>{xy}$ 的值，同时在在线阶段又得到 $m<em>x + \delta_x$ 和 $m_y + \delta_y$，导致 $P_0$ 可以推导出 $m_x, m_y$ 之间的关系。所以还要在 $\chi$ 中加入一个随机值 $\delta_z$ 进行盲化：$\delta_x \lambda_y + \delta_y \lambda_x + \delta_z - \gamma</em>{xy}$。</p>
<p>生成 $\chi$ 的过程：$P<em>1, P_2$ 在本地生成随机数 $\delta_x, \delta_y, \delta_z \in \mathbb{Z}</em>{2^l}$，计算各自的 $\chi$ 的 $[\cdot]$-共享并发送给 $P<em>0$。对于 $i \in {1,2 }$，令 $[\chi]</em>{P_i} = \chi_i$。$P_0$ 在本地将共享的份额相加得到 $\chi$。在以上步骤中，腐败的一方可能会在执行过程中引入错误，使得 $P_0$ 获得的 $\chi$ 是错误的。</p>
<p>总而言之在离线阶段有两个问题需要解决：</p>
<ul>
<li>腐败的 $P<em>0$ 可以不正确地共享 $\gamma</em>{xy}$</li>
<li>腐败的 $P_1$ 或 $P_2$ 可以发送错误的 $\chi$ 的 $[\cdot]$-共享给 $P_0$</li>
</ul>
<p>为了解决这些问题，$P_0$ 一旦获得 $\chi$，就用下面的方式计算 $a = \delta_x - \lambda_x$、$b = \delta_y - \lambda_y$ 和 $c = (\delta_z + \delta_x \delta_y) - \chi$ 的 $[![\cdot]!]$-共享：</p>
<script type="math/tex; mode=display">
\begin{align*}
[\![a]\!]_{P_0} &= (\lambda_{x,1}, \lambda_{x,2}), & [\![b]\!]_{P_0} &= (\lambda_{y,1}, \lambda_{y,2}), & [\![c]\!]_{P_0} &= (\chi_{1}, \chi_{2})\\
 [\![a]\!]_{P_1} &= (\delta_x, \lambda_{x,1}), & [\![b]\!]_{P_1} &= (\delta_y, \lambda_{y,1}), & [\![c]\!]_{P_1} &= (\delta_z + \delta_x \delta_y, \chi_{1})\\
 [\![a]\!]_{P_2} &= (\delta_x, \lambda_{x,2}), & [\![b]\!]_{P_2} &= (\delta_y, \lambda_{y,2}), & [\![c]\!]_{P_2} &= (\delta_z + \delta_x \delta_y, \chi_{2})
\end{align*}</script><p>现在 $([![a]!], [![b]!], [![c]!])$ 是一个乘法三元组 $(c=ab)$，当且仅当 $P<em>0$ 正确分享了 $\gamma</em>{xy}$（当它腐败时）以及重构的 $\chi$ 是正确的（当 $P_1,P_2$ 其中之一腐败时），因为：</p>
<script type="math/tex; mode=display">
\begin{align}
ab &= (\delta_x - \lambda_x)(\delta_y - \lambda_y) = \delta_x \delta_y + \lambda_x \lambda_y - \delta_x \lambda_y - \delta_y \lambda_x \\
 &= (\delta_x \delta_y + \delta_z) - (\delta_x \lambda_y + \delta_y \lambda_x + \delta_z - \gamma_{xy}) \\
  &= (\delta_x \delta_y + \delta_z) - \chi = c
\end{align}</script><p>然后作者给出了一个检查乘法三元组是否正确的协议，这里需要用到另一个有效的乘法三元组 $([![d]!], [![e]!], [![f]!])$，它们满足以下条件：</p>
<ul>
<li>$d, e, f$ 都是随机且私密的</li>
<li>$f = d e$</li>
</ul>
<p>这里假设这个三元组是通过 $\mathcal{F}_{\rm trip}$ 生成的，在[2, 30]中有具体构造，下面是[30]中的构造：</p>
<p><img src="http://images.yingwai.top/picgo/ASTRAf1.png" alt=""></p>
<p>用  $\prod <em>{\rm trip}$ 表示该功能的实例化，下面是作者给出检查有效性的协议 $\prod </em>{\rm prc}$：</p>
<hr>
<ul>
<li>Parties locally compute $[![\rho]!] = [![a]!] - [![d]!]$ and $[![\sigma]!] = [![b]!] - [![e]!]$.</li>
<li>Parties reconstruct $\rho$ and $\sigma$ by executing $\prod ^{\rm m}<em>{\rm Rec}([![\rho]!], \mathcal{P})$ and $\prod ^{\rm m}</em>{\rm Rec}([![\sigma]!], \mathcal{P})$ respectively.</li>
<li>Parties locally compute $[![\tau]!] = [![c]!] - [![f]!] - \sigma [![d]!] - \rho [![e]!] - \sigma \rho$.</li>
<li>Parties reconstruct $\tau$ by executing $\prod ^{\rm m}_{\rm Rec}([![\tau]!], \mathcal{P})$ and output $\perp$, if $\tau \neq 0$.</li>
</ul>
<hr>
<p>协议 $\prod _{\rm prc}$ 需要两对秘密共享三元组 $(a, b, c)$ 和 $(d, e, f)$，验证前一个三元组是否满足 $c = a b$：</p>
<script type="math/tex; mode=display">
\begin{align}
\tau &= c - f - \sigma d - \rho e - \sigma \rho \\
 &= c - de - (b - e)d - (a - d)e - (b - e)(a - d) \\
 &= c - ab = \Delta
\end{align}</script><p>所以 $\tau = 0$ 时 $(a,b,c)$ 有效，反之无效。而检验 $\tau$ 是否为0只需要一方跟另外两方各通信一次即可：(1) $P<em>0$ 跟 $P_1$ 检查 $m</em>\tau - \lambda<em>{\tau,1}$ 跟 $\lambda</em>{\tau, 2}$ 是否相等；(2) $P<em>1$ 跟 $P_2$ 检查 $m</em>\tau - \lambda<em>{\tau,2}$ 跟 $\lambda</em>{\tau, 1}$ 是否相等；(3) $P<em>0$ 跟 $P_1$ 检查 $m</em>\tau - \lambda<em>{\tau,2}$ 跟 $\lambda</em>{\tau, 1}$ 是否相等，而不是 $\prod ^{\rm m}<em>{\rm Rec}$ 的通信三次（两次发送一次接收）。下面给出恶意设置下的乘法协议 $\prod ^{\rm m}</em>{\rm Mul}(w_x, w_y, w_z)$：</p>
<hr>
<p><strong>Offline:</strong></p>
<ul>
<li>Parties $P<em>0, P_1$ locally sample random $\lambda</em>{z,1}, \gamma<em>{xy,1} \in \mathbb{Z}</em>{2^l}$, while $P<em>0, P_2$<br>locally sample a random $\lambda</em>{z,2}$. $P<em>0$ locally computes $\gamma</em>{xy}= \lambda<em>x \lambda_y$ and<br>sends $\gamma</em>{xy,2} = \gamma<em>{xy} - \gamma</em>{xy,1}$ to $P_2$.</li>
<li>Parties execute $\prod _{\rm trip}$ to generate a triple $([![d]!], [![e]!], [![f]!])$.</li>
<li>Parties $P<em>1, P_2$ locally sample random $\delta_x, \delta_y, \delta_z \in \mathbb{Z}</em>{2^l}$ and compute<br>$[\delta_z]$ non-interactively.</li>
<li>$P<em>i$ for $i \in {1, 2}$ computes $[\chi]</em>{P<em>i} = \delta_x[\lambda_y]</em>{P<em>i} + \delta_y[\lambda_x]</em>{P<em>i} + [\delta_z]</em>{P<em>i} − [\gamma</em>{xy}]<em>{P_i}$ and sends $[\chi]</em>{P_i}$ to $P_0$, who computes $\chi$.</li>
<li>Parties locally compute the $[![\cdot]!]$-shares of the values $a = \delta_x - \lambda_x$, $b = \delta_y - \lambda_y$ and $b = (\delta_z + \delta_x \delta_y) - \chi$, as described in the text.</li>
<li>Parties execute $\prod _{\rm prc}$ on $([![a]!], [![b]!], [![c]!])$ and $([![d]!], [![e]!], [![f]!])$.</li>
</ul>
<p><strong>Online:</strong></p>
<ul>
<li>$P<em>i$ for $i \in {1, 2}$ locally computes $[m_z]</em>{P<em>i} = (i-1)m_xm_y - m_x[\lambda_y]</em>{P<em>i} - m_y[\lambda_x]</em>{P<em>i} + [\lambda_z]</em>{P<em>i} + [\gamma</em>{xy}]_{P_i}$. $P_1, P_2$ mutually exchange their shares and reconstruct $m_z$.</li>
<li>$P<em>1$ sends $m^{\star}_x = m_x + \delta_x$, $m^{\star}_y = m_y + \delta_y$ to $P_0$, while $P_2$ sends $H(m^{\star}_x || m^{\star}</em>{y})$ to $P_0$.$P_0$ outputs $\perp$, if the received values are inconsistent.</li>
<li>$P<em>0$ computes $m^{\star}_z = -m^{\star}_x \lambda_y - m^{\star}_y \lambda_x +\lambda_z + 2\gamma</em>{xy} + \chi$ and sends $H(m^\star_z)$ to both $P_1$ and $P_2$.</li>
<li>$P_i$ for $i \in {1, 2}$ abort if $H(m^\star_z) \neq H(m_z - m_x m_y + \delta_z)$.</li>
</ul>
<hr>
<p>散列值的使用提高了效率，减少了通信的开销。</p>
<p>对于正确性，首先考虑腐败的 $P<em>0$ 不正确地共享使得 $\gamma</em>{xy} = \lambda<em>x \lambda_y + \Delta$ 的情况，其中 $\Delta$ 是 $P_0$ 引入的不为零的干扰。这种情况在执行 $\prod </em>{\rm prc}$ 就会被检测到，因为最终计算出来并重构的 $\tau \neq 0$。同样的， $P<em>1$（或 $P_2$）在协议 $\prod ^{\rm m}</em>{\rm Mul}$ 离线阶段的第四步时发送 $\chi_1 + \Delta$（或 $\chi_2 + \Delta$） 给 $P_0$ 使其重构的 $\chi’ = \chi + \Delta$，也会导致 $\tau \neq 0$ 从而被诚实方发现并中止计算。</p>
<p>然后是另一种情况，假如 $P<em>1$（或 $P_2$）在重构 $m_z$ 时发送了错误的 $[m_z]</em>{P_i}$ 给另一方，会在最后一步验证哈希值是否相等的时候被检测出来；而在在线阶段第二步中 $P_0$ 对 $m^{\star}_x,m^{\star}_y$ 的一致性检查也确保了它所计算出来的 $m^{\star}_z$ 是正确的。</p>
<h4 id="公平的实现"><a href="#公平的实现" class="headerlink" title="公平的实现"></a>公平的实现</h4><p>作者通过一种公平重构协议 $\prod<em>{\rm fRec}$ 来重构电路输出，将 $\prod ^{\rm m}</em>{\rm 3pc}$ 的安全性提高到公平，保证交易的三方都不能通过损害别人的利益而得到自己不应得的利益。这里使用到了承诺方案，还是利用了服务器之间的公共随机源并使用PRF来为承诺方案引入随机性：</p>
<hr>
<p><strong>Offline:</strong></p>
<ul>
<li>Parties $P<em>0, P_1$ locally sample a random $r_1 \in \mathbb{Z}</em>{2^l}$, prepare and send commitments of $\lambda<em>{y,1}$ and $r_1$ to $P_2$. Similarly, parties $P_0, P_2$ locally sample a random $r_2 \in \mathbb{Z}</em>{2^l}$, prepare and send commitments of $\lambda_{y,2}$ and $r_2$ to $P_1$. The randomness needed for both commitments are sampled from the PRF key-setup.</li>
<li>$P_1$ (resp. $P_2$) aborts if the received commitments mismatch.</li>
</ul>
<p><strong>Online:</strong></p>
<ul>
<li>$P_1, P_2$ compute a commitment of $m_y$ using randomness sampled from their PRF key-setup and send it to $P_0$.</li>
<li>If the commitments do not match, $P_0$ sends (<strong>abort</strong>, $o_1$) to $P_2$, while it sends (<strong>abort</strong>, $o_2$) to $P_1$ and aborts, where $o_i$ denotes the opening information for the commitment of $r_i$. Else $P_0$ sends <strong>continue</strong> to both $P_1$ and $P_2$.</li>
<li>$P_1, P_2$ exchange the messages received from $P_0$.</li>
<li>$P_1$ aborts if it receives either (i) (<strong>abort</strong>, $o_2$) from $P_0$ and $o_2$ opens the commitment of $r_2$ or (ii) (<strong>abort</strong>, $o_1$) from $P_2$ and $o_1$ is the correct opening information of $r_1$. The case for $P_2$ is similar to that of $P_1$.</li>
<li>If no abort happens, parties obtain their missing share of $a$ as follows:<ul>
<li>$P<em>0, P_1$ open $\lambda</em>{y,1}$ towards $P_2$.</li>
<li>$P<em>0, P_2$ open $\lambda</em>{y,2}$ towards $P_1$.</li>
<li>$P_1, P_2$ open $m_y$ towards $P_0$.</li>
</ul>
</li>
<li>Parties reconstruct the value $y$ using missing share that matches with the agreed upon commitment.</li>
</ul>
<hr>
<p>当没有广播频道的时候，一个非常棘手的问题就会存在：一个腐败的 $P<em>0$ 可以发送不同的信号给 $P_1$ 和 $P_2$（一个为 abort 而另一个为 continue），以上的重构协议 $\prod</em>{\rm fRec}([![y]!], \mathcal{P})$ 解决了这个问题。在离线阶段 $P_0$ 和 $P_1$ 共同计算出一个关于 $r_1$ 的承诺发送给 $P_2$，同样地 $P_0$ 和 $P_2$ 共同计算出一个关于 $r_2$ 的承诺发送给 $P_1$。这两个承诺就可以确保 $P_1$ 跟 $P_2$ 可以验证它们收到的来自 $P_0$ 的信号是否一致：例如当 $P_1$ 收到 abort 而 $P_2$ 收到 continue，在它们交换信息时，$P_1$ 就可以利用收到的 $o_2$ 证明自己收到了 abort 信号，反过来也是一样的。同时还解决了一个问题，就是当一个腐败的 $P_1$ 收到了 $P_0$ 发送的 continue 信号，但它不能在与 $P_2$ 交换信息时宣称自己收到了 abort 信号，因为它没有 $o_2$，因此无法证明，对于 $P_2$ 腐败的情况也是一样的。</p>
<p>这里的承诺方案可以通过一个哈希函数来实现，例如：$(c, o) = (\mathcal{H}(x||r),x||r) = Com(x;r)$</p>
<h2 id="隐私保护机器学习"><a href="#隐私保护机器学习" class="headerlink" title="隐私保护机器学习"></a>隐私保护机器学习</h2><h3 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h3><p>对于每一个预测函数，模型拥有者 $\rm M$ 拥有一个训练好的参数向量，想为拥有一个查询向量的客户 $\rm C$ 提供预测服务。在服务器辅助设置中，$\rm M$ 和 $\rm C$ 以共享方式将各自的输入外包给三个不受信任但非合谋的服务器 ${P_0, P_1, P_2}$，这些服务器通过为本文的3PC协议开发的技术以共享方式执行计算，并将输出单独重构到客户端。客户只能知道输出，除此之外什么也不知道。</p>
<h3 id="对于ML的协议"><a href="#对于ML的协议" class="headerlink" title="对于ML的协议"></a>对于ML的协议</h3><h4 id="安全向量点积"><a href="#安全向量点积" class="headerlink" title="安全向量点积"></a>安全向量点积</h4><p>对于向量的 $[\cdot]$-共享和 $[![\cdot]!]$-共享，就是对应每个维度的值进行$[\cdot]$-共享和 $[![\cdot]!]$-共享，容易知道对于向量来说两种共享仍然是线性的。对于两个 $d$ 维向量的点积，不考虑效率的情况下可以执行 $d$ 次 $\prod ^{\rm s}<em>{\rm Mul}$协议，再对这 $d$ 次执行的结果简单进行相加，各方就可以得到它们的份额。在这里作者给出一个更高效率的向量点积协议 $\prod ^{\rm s}</em>{\rm dp}$：</p>
<hr>
<p><strong>Offline:</strong></p>
<p>​        $P<em>0, P_1$ sample random $\lambda</em>{u,1}, \gamma<em>{pq,1} \in \mathbb{Z}</em>{2^l}$, while $P<em>0, P_2$ sample random $\lambda</em>{u,2} \in \mathbb{Z}<em>{2^l}$. $P_0$ locally computes $\gamma</em>{pq} = \vec{\lambda<em>p} \odot \vec{\lambda_q}$, sets $\gamma</em>{pq,2} = \gamma<em>{pq} - \gamma</em>{pq,1}$ and sends $\gamma_{pq,2}$ to $P_2$.</p>
<p><strong>Online:</strong></p>
<ul>
<li>$P<em>i$ for $i \in {1,2}$ locally computes $[m_u]</em>{P<em>i} = \sum^d</em>{j=1}((i-1)m<em>{p_j}m</em>{q<em>j} - m</em>{p<em>j}[\lambda</em>{q<em>j}]</em>{P<em>i} - m</em>{q<em>j}[\lambda</em>{p<em>j}]</em>{P<em>i}) + [\gamma</em>{pq}]<em>{P_i} + [\lambda_u]</em>{P_i}$.</li>
<li>$P_1$ and $P_2$ mutually exchange their share of $[m_u]$ to reconstruct $m_u$.</li>
</ul>
<hr>
<p>上面的协议的离线阶段中，$P<em>0$ 仅仅共享了 $\gamma</em>{pq} = \vec{\lambda<em>p} \odot \vec{\lambda_q}$ 而不是每一个 $\lambda</em>{p<em>i} \lambda</em>{q<em>i}$；在在线阶段，$P_1, P_2$ 直接计算 $[m_u]$（其中 $u = \vec{p} \odot \vec{q}$）而不是每一个 $m</em>{p_i q_i}$。</p>
<p>接下来作者还对恶意设置下的点积进行了讨论：由于在乘法协议中引入了对恶意对手的额外检查，所以上面针对半诚实协议所作的优化是不适用的。对两个 $d$ 维向量的点积，只能 $d$ 次调用协议 $\prod ^{\rm m}<em>{\rm Mul}$。不过作者还是对在线阶段的开销进行了改进：在在线阶段 $P_1$ 并行地发送 $m^{\star}</em>{p<em>i}, m^{\star}</em>{q<em>i}$ 给 $P_0$，而 $P_2$ 则发送对应的哈希值给 $P_0$。$P_0$ 收到这些值后进行验证，若一致则将它们“结合”所有的 $m^{\star}</em>{p<em>i q_i}$ 然后发送一个单独的 $m^\star_u$ 的哈希值给 $P_1, P_2$，最后 $P_1, P_2$ 在本地验证是否与 $m_u - \sum^d</em>{j=1}(m<em>{p_j}m</em>{q<em>j} - \delta</em>{u<em>j})$。这样做的话就节省了在线阶段的开销，不用每个 $m^{\star}</em>{p<em>i}, m^{\star}</em>{q_i}$ 都发送一次。</p>
<h4 id="安全比较"><a href="#安全比较" class="headerlink" title="安全比较"></a>安全比较</h4><p>给定算术共享 $[![u]!], [![v]!]$，各方希望验证 $u$ 是否小于 $v$，等同于验证 $a$ 是否小于 $0$（其中 $a = u - v$），在定点表示中可以通过检查 ${\rm msb}(a)$ 来完成（二进制补码中第一位为符号位）。于是可以把在给定算术共享 $[![a]!]$ 的情况下生成 ${\rm msb}(a)$ 的布尔共享作为目标，在这里作者利用了秘密共享方案中的不对称性，放弃了 <em>SecureML</em>[48]和 <em>ABY3</em>[46]中的昂贵协议。</p>
<hr>
<p><strong>Offline:</strong></p>
<p>​        $P<em>1, P_2$ together sample a random $r, r’ \in \mathbb{Z}</em>{2^l}$ and set $p= \rm{msb}$$(r)$. Parties non-interactively generate Boolean share of $p$ as $[![p]!]^{\rm B}<em>{P_0} = (0,0)$, $[![p]!]^{\rm B}</em>{P<em>1} = (p,0)$ and $[![p]!]^{\rm B}</em>{P_2} = (p,0)$.</p>
<p><strong>Online:</strong></p>
<p>​        $P<em>1$ set $[a]</em>{P<em>1}=m_a - \lambda</em>{a,1}$, $P<em>2$ set $[a]</em>{P<em>2}=- \lambda</em>{a,2}$.</p>
<ul>
<li>$P<em>1$ sends $[ra]</em>{P<em>1} = r[a]</em>{P<em>1} + r’$ to $P_0$, while $P_2$ sends $[ra]</em>{P<em>2} = r[a]</em>{P_1} - r’$ to $P_0$, who adds them to obtain $ra$.</li>
<li>$P<em>0$ executes $\prod^{\rm s}</em>{\rm Sh}(P<em>0, q)$ over $\mathbb{Z}</em>{2^1}$ to generate $[![q]!]^{\rm B}$ where $q = {\rm msb}(ra)$.</li>
<li>Parties locally compute $[![\mbox{msb}(a)]!]^{\rm B} = [![p]!]^{\rm B} \oplus [![q]!]^{\rm B}$.</li>
</ul>
<hr>
<p>上面的协议用 $\prod ^{\rm s}_{\rm BitExt}([![a]!], \mathcal{P})$ 表示。这里上面用到了一个随机数 $r$ 来对 $a$ 的值进行盲化，并且可以注意到 ${\rm sign}(a \cdot r) = {\rm sign}(a) \oplus {\rm sign}(r)$，所以 $r$ 不会对生成共享份额造成影响且使得三者都不能从这个过程中知道关于 $a$ 的信息。</p>
<p>对于恶意的情况，就不能仅仅依靠 $P<em>0$ 来生成 $[![{\rm msb}(ra)]!]^{\rm B}$，下面给出了修改后的协议 $\prod ^{\rm m}</em>{\rm BitExt}([![a]!], \mathcal{P})$：</p>
<hr>
<p><strong>Offline:</strong></p>
<p>​        $P<em>1, P_2$ sample a random $r_1 \in \mathbb{Z}</em>{2^l}$ and set $p<em>1 = {\rm msb}(r_1)$ while $P_0, P_2$ sample a random $r_2 \in \mathbb{Z}</em>{2^l}$ and set $p_2 = {\rm msb}(r_2)$.</p>
<ul>
<li>Parties non-interactively generate $[![\cdot]!]$-shares of $r<em>1$ as $[![r_1]!]</em>{P<em>0}=(0,0)$, $[![r_1]!]</em>{P<em>1}=(r_1,0)$ and $[![r_1]!]</em>{P_2}=(r_1,0)$.</li>
<li>Parties non-interactively generate $[![\cdot]!]$-shares of $r<em>1$ as $[![r_2]!]</em>{P<em>0}=(0,-r_2)$, $[![r_1]!]</em>{P<em>1}=(0,0)$ and $[![r_1]!]</em>{P_2}=(0,-r_2)$.</li>
<li>Parties execute $\prod^{\rm m}_{\rm Mul}$ on $r_1$ and $r_2$ to generate $[![r]!] = [![r_1 r_2]!]$.</li>
<li>Parties non-interactively generate Boolean shares of $p<em>1$ as $[![p_1]!]^{\rm B}</em>{P<em>0}=(0,0)$, $[![p_1]!]^{\rm B}</em>{P<em>1}=(p_1,0)$ and $[![p_1]!]^{\rm B}</em>{P_2}=(p_1,0)$.</li>
<li>Parties non-interactively generate Boolean shares of $p<em>2$ as $[![p_2]!]^{\rm B}</em>{P<em>0}=(0,p_2)$, $[![p_2]!]^{\rm B}</em>{P<em>1}=(0,0)$ and $[![p_2]!]^{\rm B}</em>{P_2}=(0,p_2)$.</li>
<li>Parties locally compute $[![p]!]^{\rm B}=[![p_1]!]^{\rm B} \oplus [![p_2]!]^{\rm B}$.</li>
</ul>
<p><strong>Online:</strong></p>
<ul>
<li>Parties execute $\prod ^{\rm m}<em>{\rm Mul}$ on $[![r]!]$ and $[![a]!]$ to generate $[![ra]!]$ followed by enabling $P_0, P_1$ to reconstruct $ra$ (this is done by slightly modifying the protocol $\prod ^{\rm m}</em>{\rm Rec}$ ).</li>
<li>$P<em>1$ executes $\prod ^{\rm m}</em>{\rm Sh}(P<em>1, q)$ over $\mathbb{Z}</em>{2^1}$ to generate $[![q]!]^{\rm B}$ where $q = {\rm msb}(ra)$. In parallel, $P<em>0$ locally computes $m_q$ and sends ${\rm H}(m_q)$ to $P_2$, who abort if the value mismatches with the hash of the value $m_q$ received from $P_1$ as part of $\prod ^{\rm m}</em>{\rm Sh}(P_1, q)$.</li>
<li>Parties locally compute $[![{\rm msb}(a)]!]^{\rm B} = [![p]!]^{\rm B} \oplus [![q]!]^{\rm B}$.</li>
</ul>
<hr>
<h4 id="ML预测函数"><a href="#ML预测函数" class="headerlink" title="ML预测函数"></a>ML预测函数</h4><ul>
<li><strong>线性回归</strong>：$\rm M$ 有一个 $d$ 维的模型参数向量 $\vec{w}$ 和偏置项 $b$，$\rm C$ 有一个 $d$ 维的查询向量 $\vec{z}$。$\rm C$ 获得 $f_{\rm linr}((\vec{w}, b),\vec{z}) = \vec{w} \odot \vec{z} + b$，其中 $\vec{w} \odot \vec{z}$ 是向量 $\vec{w}$ 和向量 $\vec{z}$ 的点积；</li>
<li><strong>SVM回归</strong>：$\rm M$ 有${\alpha<em>j, y_j }^k</em>{j=1}$ 和 $d$ 维的支持向量 ${\vec{x<em>j}}^k</em>{j=1}$，$\rm C$ 有一个 $d$ 维的查询向量 $\vec{z}$。$\rm C$ 获得 $f<em>{\rm svmr}(({\alpha_j, y_j, \vec{x_j} }^k</em>{j=1}, b), \vec{z}) = \sum^k_{j=1} \alpha_j y_j (\vec{x_j} \odot \vec{z}) + b$；</li>
<li><strong>逻辑回归</strong>：$\rm M$ 和 $\rm C$ 的输入和线性回归类似，$\rm M$ 还需要提供一个在 $[0,1]$ 范围内的额外输入 $t$。$\rm C$ 获得 $f_{\rm logr}((\vec{w}, b, t), \vec{z}) = {\rm sign}((\vec{w} \odot \vec{z} + b) - {\rm ln}(\frac{t}{1-t}))$，其中 ${\rm sign}(\cdot)$ 返回对象的符号位；</li>
<li><strong>SVM分类</strong>：$\rm M$ 和 $\rm C$ 的输入和SVM回归一样，但对 $\rm C$ 的输出变为 $f<em>{\rm svmr}(({\alpha_j, y_j, \vec{x_j} }^k</em>{j=1}, b), \vec{z}) = {\rm sign}(\sum^k_{j=1} \alpha_j y_j (\vec{x_j} \odot \vec{z}) + b)$。</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] V. A. Abril, P. Maene, N. Mertens, and N. P. Smart. 2019. <em>Bristol Fashion MPC Circuits.</em> <a href="https://homes.esat.kuleuven.be/~nsmart/MPC/" target="_blank" rel="noopener">https://homes.esat.kuleuven.be/~nsmart/MPC/</a>.<br>[2] T. Araki, A. Barak, J. Furukawa, T. Lichter, Y. Lindell, A. Nof, K. Ohara, A. Watzman, and O. Weinstein. 2017. <em>Optimized Honest-Majority MPC for Malicious Adversaries - Breaking the 1 Billion-Gate Per Second Barrier.</em> In IEEE S&amp;P. 843–862.<br>[3] T. Araki, A. Barak, J. Furukawa, Y. Lindell, A. Nof, and K. Ohara. 2016. <em>DEMO: High-Throughput Secure Three-Party Computation of Kerberos Ticket Generation.</em> In ACM CCS. 1841–1843.<br>[4] T. Araki, J. Furukawa, Y. Lindell, A. Nof, and K. Ohara. 2016. <em>High-Throughput Semi-Honest Secure Three-Party Computation with an Honest Majority.</em> In ACM CCS. 805–817.<br>[5] C. Baum, I. Damgård, T. Toft, and R. W. Zakarias. 2016. <em>Better Preprocessing for Secure Multiparty Computation.</em> In ACNS. 327–345.<br>[6] D. Beaver. 1991. <em>Efficient Multiparty Protocols Using Circuit Randomization.</em> In CRYPTO. 420–432.<br>[7] D. Beaver. 1995. <em>Precomputing Oblivious Transfer.</em> In CRYPTO. 97–109.<br>[8] Z. Beerliová-Trubíniová and M. Hirt. 2006. <em>Efficient Multi-party Computation with Dispute Control.</em> In TCC. 305–328.<br>[9] Z. Beerliová-Trubíniová and M. Hirt. 2008. <em>Perfectly-Secure MPC with Linear Communication Complexity.</em> In TCC. 213–230.<br>[10] M. Ben-Or, S. Goldwasser, and A. Wigderson. 1988. <em>Completeness Theorems for Non-Cryptographic Fault-Tolerant Distributed Computation (Extended Abstract).</em> In ACM STOC. 1–10.<br>[11] Christopher Bishop. 2006. <em>Pattern Recognition and Machine Learning.</em><br>[12] D. Bogdanov, S. Laur, and J. Willemson. 2008. <em>Sharemind: A Framework for Fast Privacy-Preserving Computations.</em> In ESORICS. 192–206.<br>[13] D. Bogdanov, R. Talviste, and J. Willemson. 2012. <em>Deploying Secure Multi-Party Computation for Financial Data Analysis.</em> In FC. 57–64.<br>[14] M. Byali, A. Joseph, A. Patra, and D. Ravi. 2018. <em>Fast Secure Computation for Small Population over the Internet.</em> ACM CCS (2018), 677–694.<br>[15] O. Catrina and S. de Hoogh. 2010. <em>Secure Multiparty Linear Programming Using Fixed-Point Arithmetic.</em> In ESORICS. 134–150.<br>[16] N. Chandran, J. A. Garay, P. Mohassel, and S. Vusirikala. 2017. <em>Efficient, Constant-Round and Actively Secure MPC: Beyond the Three-Party Case.</em> In ACM CCS. 277–294.<br>[17] H. Chaudhari, A. Choudhury, A. Patra, and A. Suresh. 2019. <em>ASTRA: High-throughput 3PC over Rings with Application to Secure Prediction.</em> <a href="https://eprint.iacr.org/2019/429" target="_blank" rel="noopener">https://eprint.iacr.org/2019/429</a>. In IACR Cryptology ePrint Archive.<br>[18] K. Chida, D. Genkin, K. Hamada, D. Ikarashi, R. Kikuchi, Y. Lindell, and A. Nof. 2018. <em>Fast Large-Scale Honest-Majority MPC for Malicious Adversaries.</em> In CRYPTO. 34–64.<br>[19] A. Choudhury and A. Patra. 2017. <em>An Efficient Framework for Unconditionally Secure Multiparty Computation.</em> IEEE Trans. Information Theory (2017), 428–468.<br>[20] R. Cleve. 1986. <em>Limits on the Security of Coin Flips when Half the Processors Are Faulty (Extended Abstract).</em> In ACM STOC. 364–369.<br>[21] R. Cramer, I. Damgård, D. Escudero, P. Scholl, and C. Xing. 2018. <em>SPDZ2k: Efficient MPC mod 2ˆk for Dishonest Majority.</em> CRYPTO (2018), 769–798.<br>[22] R. Cramer, I. Damgård, and Y. Ishai. 2005. <em>Share Conversion, Pseudorandom Secret-Sharing and Applications to Secure Computation.</em> In TCC. 342–362.<br>[23] Cryptography and Privacy Engineering Group at TU Darmstadt. 2017. ENCRYPTO Utils. <a href="https://github.com/encryptogroup/ENCRYPTO_utils" target="_blank" rel="noopener">https://github.com/encryptogroup/ENCRYPTO_utils</a>.<br>[24] M. Dahl. 2018. <em>Private Image Analysis with MPC: Training CNNs on Sensitive Data using SPDZ.</em> (2018).<br>[25] I. Damgård, C. Orlandi, and M. Simkin. 2018. <em>Yet Another Compiler for Active Security or: Efficient MPC Over Arbitrary Rings.</em> CRYPTO (2018), 799–829.<br>[26] I. Damgård, V. Pastro, N. P. Smart, and S. Zakarias. 2012. <em>Multiparty Computation from Somewhat Homomorphic Encryption.</em> In CRYPTO. 643–662.<br>[27] S. de Hoogh, B. Schoenmakers, P.Chen, and H. Akker. 2014. <em>Practical Secure Decision Tree Learning in a Teletreatment Application.</em> In FC. 179–194.<br>[28] H. Eerikson, M. Keller, C. Orlandi, P. Pullonen, J. Puura, and M. Simkin. 2019. <em>Use your Brain! Arithmetic 3PC For Any Modulus with Active Security.</em> IACR<br>Cryptology ePrint Archive (2019).<br>[29] A. Esteva, B. Kuprel, R. A. Novoa, J. Ko, S. M. Swetter, H. M. Blau, and S. Thrun. 2017. <em>Dermatologist-level classification of skin cancer with deep neural networks.</em> Nature (2017), 115–118.<br>[30] J. Furukawa, Y. Lindell, A. Nof, and O. Weinstein. 2017. <em>High-Throughput Secure Three-Party Computation for Malicious Adversaries and an Honest Majority.</em> In EUROCRYPT. 225–255.<br>[31] A. Gascón, P. Schoppmann, B. Balle, M. Raykova, J. Doerner, S. Zahur, and D. Evans. 2016. <em>Secure Linear Regression on Vertically Partitioned Datasets.</em> IACR Cryptology ePrint Archive (2016).<br>[32] M. Geisler. 2007. <em>Viff: Virtual ideal functionality framework.</em><br>[33] O. Goldreich, S. Micali, and A. Wigderson. 1987. <em>How to Play any Mental Game or A Completeness Theorem for Protocols with Honest Majority.</em> In STOC. 218–229.<br>[34] S. D. Gordon, S. Ranellucci, and X. Wang. 2018. <em>Secure Computation with Low Communication from Cross-Checking.</em> In ASIACRYPT. 59–85.<br>[35] Y. Ishai, R. Kumaresan, E. Kushilevitz, and A. Paskin-Cherniavsky. 2015. <em>Secure Computation with Minimal Interaction, Revisited.</em> In CRYPTO. 359–378.<br>[36] S. Kamara, P. Mohassel, and M. Raykova. 2011. <em>Outsourcing Multi-Party Computation.</em> IACR Cryptology ePrint Archive (2011).<br>[37] J. Katz, V. Kolesnikov, and X. Wang. 2018. <em>Improved Non-Interactive Zero Knowledge with Applications to Post-Quantum Signatures.</em> In CCS. 525–537.<br>[38] M. Keller, E. Orsini, and P. Scholl. 2016. <em>MASCOT: Faster Malicious Arithmetic Secure Computation with Oblivious Transfer.</em> In ACM CCS. 830–842.<br>[39] M. Keller, V. Pastro, and D. Rotaru. 2018. <em>Overdrive: Making SPDZ Great Again.</em> In EUROCRYPT. 158–189.<br>[40] J. Launchbury, D. Archer, T. DuBuisson, and E. Mertens. 2014. <em>Application-Scale Secure Multiparty Computation.</em> In ESOP. 8–26.<br>[41] S. Laur, H. Lipmaa, and T. Mielikäinen. 2006. <em>Cryptographically private support vector machines.</em> In ACM SIGKDD. 618–624.<br>[42] Yann LeCun and Corinna Cortes. 2010. <em>MNIST handwritten digit database.</em> (2010). <a href="http://yann.lecun.com/exdb/mnist/" target="_blank" rel="noopener">http://yann.lecun.com/exdb/mnist/</a><br>[43] Y. Lindell and A. Nof. 2017. <em>A Framework for Constructing Fast MPC over Arithmetic Circuits with Malicious Adversaries and an Honest-Majority.</em> In ACM CCS. 259–276.<br>[44] J. Liu, M. Juuti, Y. L., and N. Asokan. 2017. <em>Oblivious Neural Network Predictions via MiniONN Transformations.</em> In ACM CCS. 619–631.<br>[45] E. Makri, D. Rotaru, N. P. Smart, and F. Vercauteren. 2018. <em>EPIC: Efficient Private Image Classification (or: Learning from the Masters).</em> CT-RSA (2018), 473–492.<br>[46] P. Mohassel and P. Rindal. 2018. <em>ABY3: A Mixed Protocol Framework for Machine Learning.</em> In ACM CCS. 35–52.<br>[47] P. Mohassel, M. Rosulek, and Y. Zhang. 2015. <em>Fast and Secure Three-party Computation: Garbled Circuit Approach.</em> In CCS. 591–602.<br>[48] P. Mohassel and Y. Zhang. 2017. <em>SecureML: A System for Scalable Privacy-Preserving Machine Learning.</em> In IEEE S&amp;P. 19–38.<br>[49] V. Nikolaenko, S. Ioannidis, U. Weinsberg, M. Joye, N. Taft, and D. Boneh. 2013. <em>Privacy-preserving matrix factorization.</em> In ACM CCS. 801–812.<br>[50] V. Nikolaenko, U. Weinsberg, S. Ioannidis, M. Joye, D. Boneh, and N. Taft. 2013. <em>Privacy-Preserving Ridge Regression on Hundreds of Millions of Records.</em> In IEEE S&amp;P. 334–348.<br>[51] P. S. Nordholt and M. Veeningen. 2018. <em>Minimising Communication in Honest-Majority MPC by Batchwise Multiplication Verification.</em> In ACNS. 321–339.<br>[52] T. Orekondy, B. Schiele, and M. Fritz. 2018. <em>Knockoff Nets: Stealing Functionality of Black-Box Models.</em> CoRR (2018).<br>[53] N. Papernot, P. McDaniel, I. Goodfellow, S. Jha, Z. B. Celik, and A. Swami. 2017. <em>Practical Black-Box Attacks Against Machine Learning.</em> In ASIA CCS. 506–519.<br>[54] A. Patra and D. Ravi. 2018. <em>On the Exact Round Complexity of Secure Three-Party Computation.</em> CRYPTO (2018), 425–458.<br>[55] M. S. Riazi, C. Weinert, O. Tkachenko, E. M. Songhori, T. Schneider, and F. Koushanfar. 2018. <em>Chameleon: A Hybrid Secure Computation Framework for Machine Learning Applications.</em> In AsiaCCS. 707–721.<br>[56] F. Schroff, D. Kalenichenko, and J. Philbin. 2015. <em>FaceNet: A unified embedding for face recognition and clustering.</em> In IEEE CVPR. 815–823.<br>[57] N. P. Smart and T. Wood. 2019. <em>Error Detection in Monotone Span Programs with Application to Communication-Efficient Multi-party Computation.</em> In CT-RSA. 210–229.<br>[58] F. Tramèr, F. Zhang, A. Juels, M. K. Reiter, and T. Ristenpart. 2016. <em>Stealing Machine Learning Models via Prediction APIs.</em> In USENIX. 601–618.<br>[59] S. Wagh, D. Gupta, and N. Chandran. 2019. <em>SecureNN: 3-Party Secure Computation for Neural Network Training.</em> PoPETs (2019), 26–49.<br>[60] A. C. Yao. 1982. <em>Protocols for Secure Computations.</em> In FOCS. 160–164.</p>
]]></content>
      <categories>
        <category>Papers</category>
      </categories>
      <tags>
        <tag>密码学</tag>
        <tag>MPC</tag>
        <tag>PPML</tag>
        <tag>Secret Sharing</tag>
        <tag>Neural Network</tag>
        <tag>SVM</tag>
        <tag>Linear Regression</tag>
        <tag>Logistic Regression</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记 ABY - A Framework for Efficient Mixed-Protocol Secure Two-Party Computation</title>
    <url>/2020/06/11/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-ABY-A-Framework-for-Efficient-Mixed-Protocol-Secure-Two-Party-Computation/</url>
    <content><![CDATA[<p><em>Daniel Demmler, Thomas Schneider, Michael Zohner</em></p>
<p><a href="https://dblp.uni-trier.de/db/conf/ndss/ndss2015.html#Demmler0Z15" target="_blank" rel="noopener">NDSS 2015</a></p>
<p><a href="https://www.ndss-symposium.org/ndss2015/ndss-2015-programme/aby-framework-efficient-mixed-protocol-secure-two-party-computation/" target="_blank" rel="noopener">https://www.ndss-symposium.org/ndss2015/ndss-2015-programme/aby-framework-efficient-mixed-protocol-secure-two-party-computation/</a></p>
<a id="more"></a>
<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>安全计算使相互不信任的各方能够在其私有输入上联合计算函数，而不会泄露函数的输出以外的任何信息。半诚实模型中的通用安全计算协议已经被广泛研究，并形成了几个最佳实践。在这项工作中，我们设计并实现了一个混合协议框架，称为Aby，它有效地结合了基于算术共享、布尔共享和姚的乱码电路的安全计算方案，并为安全两方计算提供了最佳实践方案。我们的框架允许预计算几乎所有的密码运算，并基于预计算的不经意传输扩展在安全计算方案之间提供新颖、高效的转换。ABY支持多种标准操作，我们在本地网络和公共洲际云上执行基准测试。从我们的基准测试中，我们对安全计算协议的高效设计有了新的见解，最突出的是，基于不经意传输的乘法比基于同态加密的乘法要高效得多。我们使用ABY为三个示例应用(私有集合交集、生物特征匹配和模幂运算)构建混合协议，并表明它们比使用单一协议更有效。</p>
<p><strong>关键词</strong>：安全的两方计算；混合协议；高效的协议设计</p>
<h1 id="共享类型"><a href="#共享类型" class="headerlink" title="共享类型"></a>共享类型</h1><p>在本节中，详细介绍作者的Aby框架使用的共享类型：算术共享(§III-A)、布尔共享(§III-B)和姚共享(§III-C)。对于每种共享类型，本文将在各自的小节中描述共享的语义、标准操作和最新技术。</p>
<h2 id="算术共享"><a href="#算术共享" class="headerlink" title="算术共享"></a>算术共享</h2><p>对于算术共享，在环 $\mathbb{Z}_{2^l}$(整数模 $2^l$)中相加地共享 $l$ 位值 $x$ 作为两个值的和。以下描述的协议基于[2]、[44]、[67]。首先，作者定义了共享语义(§III-A1)和操作(§III-A2)，并概述了基于算术共享的安全计算的相关工作(§III-A3)。然后，作者详细介绍了如何使用同态加密(§III-A4)或OT(§III-A5)生成算术乘法三元组；作者在§V-C后面的部分对这两种方法的性能进行了实验比较。在下面，作者假设要在环Z2‘中执行的所有算术运算，即所有运算都是($\bmod 2^l$)。</p>
<h3 id="共享语义"><a href="#共享语义" class="headerlink" title="共享语义"></a>共享语义</h3><p>算术共享基于在各方之间附加共享私有值，如下所示：</p>
<ul>
<li><strong>被共享的值。</strong>对于一个 $l$ 位的 $x$ 的算术共享 $\langle x \rangle ^ A$，有 $\langle x \rangle ^A<em>0 + \langle x \rangle ^A_1 \equiv x (\bmod 2^l)$，其中 $\langle x \rangle ^ A_0, \langle x \rangle ^A_1 \in \mathbb{Z}</em>{2^l}$。</li>
<li><strong>共享。</strong>$\mathsf{Shr}^A<em>i(x)$：$P_i$ 选择 $r \in_R \mathbb{Z}</em>{2^l}$，设 $\langle x \rangle^A<em>i = x - r$，然后发送 $r$ 给 $P</em>{1-i}$，后者设 $\langle x \rangle^A_{1-i} = r$。</li>
<li><strong>重构。</strong>$\mathsf{Rec}^A<em>i(x)$：$P</em>{1-i}$ 发送它的份额 $\langle x \rangle^A_{1-i}$ 给 $P_i$，后者计算 $x = \langle x \rangle ^A_0 + \langle x \rangle ^A_1$。</li>
</ul>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>每个算术电路都是一系列加法和乘法门，评估如下：</p>
<ul>
<li><strong>加法。</strong>$\langle z \rangle ^ A = \langle x \rangle ^ A + \langle y \rangle ^ A$：$P_i$ 在本地计算 $\langle z \rangle ^ A_i = \langle x \rangle ^ A_i + \langle y \rangle ^ A_i$。</li>
<li><strong>乘法。</strong>$\langle z \rangle ^ A = \langle x \rangle ^ A \cdot \langle y \rangle ^ A$：乘法使用形式为 $\langle c \rangle ^ A = \langle a \rangle ^ A \cdot \langle b \rangle ^ A$ 的预计算算术乘法三元组[4]：$P_i$ 设 $\langle e \rangle ^A_i = \langle x \rangle ^A_i - \langle a \rangle ^A_i$ 和 $\langle f \rangle ^A_i = \langle y \rangle ^A_i - \langle b \rangle ^A_i$，双方执行 $\mathsf{Rec}^A(e)$ 和 <script type="math/tex">\mathsf{Rec}^A(f)</script>，然后 $P_i$ 设 $\langle z \rangle ^ A_i = i \cdot e \cdot f + f \cdot \langle a \rangle ^ A_i + e \cdot \langle b \rangle ^ A_i + \langle c \rangle ^ A_i$。本文给出了预计算算术乘法的协议。</li>
</ul>
<h3 id="利用加性同态加密生成算术乘法三元组"><a href="#利用加性同态加密生成算术乘法三元组" class="headerlink" title="利用加性同态加密生成算术乘法三元组"></a>利用加性同态加密生成算术乘法三元组</h3><p>通常，$\langle a \rangle ^ A \cdot \langle b \rangle ^ A = \langle c \rangle ^ A$ 形式的算术乘法三元组在设置阶段使用如协议1所示的加法同态加密方案来生成。该用于生成乘法三元组的协议在[2，附录A]中被提到为“众所周知的民间传说”。对于同态加密，我们使用Paillier[25]、[26]、[62]的密码系统，或者使用Damgard-Geisler-Krøigaard(DGK)[22]、[23]的密码系统，并使用如[10]、[32]、[52]中描述的Pohlig-Hellman算法[65]进行完全解密。在Paillier加密中，明文空间为 $Z<em>N$，使用参数为 $r$ 的统计盲化；在DGK加密中，将明文空间设置为 $\mathbb{Z}</em>{2^{2l+1}}$，使用参数为 $r$ 的完全盲化。关于安全性和正确性的证明，请参阅[67]和[66]。</p>
<p><strong>复杂度。</strong>为了生成 $l$ 位乘法三元组，$P_0$ 和 $P_1$ 交换 $3$ 个密文，对于Paillier每个密文长度为 $2\varphi$ 比特(而DGK为 $\varphi$ 比特)，导致总共6个 $\varphi$ 比特的通信(对应的3个 $\varphi$ 比特)。对于Paillier加密，我们还使用了[67]中描述的打包优化，该优化将从 $P_1$ 到 $P_0$ 的多个消息打包成单个密文，从而减少解密次数，并将每个乘法三倍的通信量减少到 $4 \varphi + 2 \varphi / \lfloor \varphi / (2l+1+ \sigma) \rfloor$ 比特。</p>
<p><img src="http://images.yingwai.top/picgo/aby2p1.png" alt=""></p>
<h3 id="通过不经意传输生成算术乘法三元组"><a href="#通过不经意传输生成算术乘法三元组" class="headerlink" title="通过不经意传输生成算术乘法三元组"></a>通过不经意传输生成算术乘法三元组</h3><p>可以基于OT扩展生成算术乘法三元组，而不是使用同态加密。该议定书是在[33，Sect. 4.1]中提出的，并在[15]中使用。它允许使用OT有效地计算两个秘密共享值的乘积。在下面，本文将描述使用更有效的相关OT扩展的协议的一个微小变体。总体而言，可以在 $l$ 位串上使用 $2l$ 个相关的OT，即 C-OT$^{2l}_l$ (或者甚至在更短的串上，如下所述)来生成 $l$ 位乘法三元组。</p>
<h2 id="布尔共享"><a href="#布尔共享" class="headerlink" title="布尔共享"></a>布尔共享</h2><p>布尔共享使用基于异或的秘密共享方案。为了简化表示，假定使用单个比特值；对于 $l$ 比特的值，每个操作都并行执行多次。</p>
<h3 id="共享语义-1"><a href="#共享语义-1" class="headerlink" title="共享语义"></a>共享语义</h3><ul>
<li><strong>被共享的值。</strong>如果有 $\langle x \rangle ^B_0 \oplus \langle x \rangle ^B_1 = x$，其中 $\langle x \rangle ^B_0, \langle x \rangle ^B_1 \in \mathbb{Z}_2$，那么就说比特 $x$ 的布尔共享 $\langle x \rangle ^B$ 是在两方之间共享的。</li>
<li><strong>共享。</strong>$\mathsf{Shr}<em>i^B(x)$：$P_i$ 选择 $r \in_R {0,1}$，计算 $\langle x \rangle ^B_i = x \oplus r$，然后发送 $r$ 给 $P</em>{1-i}$，后者设 $\langle x \rangle ^B_{1-i} = r$。</li>
<li><strong>重构。</strong>$\mathsf{Rec}<em>i^B(x)$：$P</em>{1-i}$ 发送它的份额 $\langle x \rangle ^B_{1-i}$ 给 $P_i$，后者计算 $x = \langle x \rangle ^B_0 \oplus \langle x \rangle ^B_1$。</li>
</ul>
<h3 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h3><p>每个有效计算的函数都可以表示为一个由异或门和与门组成的布尔电路，本文将在下面详细说明对它的求值。</p>
<ul>
<li><strong>异或。</strong>$\langle z \rangle ^B = \langle x \rangle ^B \oplus \langle y \rangle ^B$：$P_i$ 本地计算 $\langle z \rangle ^B_i = \langle x \rangle ^B_i \oplus \langle y \rangle ^B_i$。</li>
<li><strong>与。</strong>$\langle z \rangle ^B = \langle x \rangle ^B \wedge \langle y \rangle ^B$：与使用预计算布尔乘法三元组 $\langle c \rangle ^B = \langle a \rangle ^B \wedge \langle b \rangle ^B$ 进行评估，如下所示：$P_i$ 计算 $\langle e \rangle ^B_i = \langle a \rangle ^B_i \oplus \langle x \rangle ^B_i$ 和 $\langle f \rangle ^B_i = \langle b \rangle ^B_i \oplus \langle y \rangle ^B_i$，双方执行 $\mathsf{Rec}^B(e)$ 和 $\mathsf{Rec}^B(f)$，然后 $P_i$ 设 $\langle z \rangle ^B_i = i \cdot e \cdot f \oplus f \cdot \langle a \rangle ^B_i \oplus e \cdot \langle b \rangle ^B_i \oplus \langle c \rangle ^B_i$。如文献[1]所述，使用 R-OT$^2_1$ 可以有效地预计算布尔乘法三元组。</li>
<li><strong>多路复用。</strong>对于多路复用器操作，本文使用[54]中提出的协议，该协议只需要 R-OT$^2_l$，而评估具有 $l$ 个与门的多路复用电路需要 R-OT$^{2l}_1$(参见[64]中的向量乘法三元组)。</li>
<li><strong>其它。</strong>对于标准功能，本文使用[69]中总结的深度优化电路结构。</li>
</ul>
<h2 id="姚氏共享"><a href="#姚氏共享" class="headerlink" title="姚氏共享"></a>姚氏共享</h2><p>在Yao用于安全两方计算的乱码电路协议[74]中，一方(称为Garbler)将布尔函数加密为乱码电路，由另一方(称为赋值器)进行评估。更详细地，加布勒将要计算的函数表示为布尔电路，并将满足 $k_0^w, k_1^w \in {0,1}^{\kappa}$ 的两个线密钥 $(k_0^w, k_1^w)$ 分配给每条线 $w$。然后，Garbler使用加密函数 $\mathsf{Gb}$ 对两个输入线密钥的所有可能组合上的每个门的输出线密钥进行加密(详情见§III-C2中的共享)。然后，他将损坏的电路(由所有损坏的门组成)连同电路的相应输入键一起发送给评估器(参见§III-C1的共享)。评估者使用门的输入线路密钥迭代地解密每个乱码的门，以获得输出线路密钥(参见§III-C2中的与)，并最终重构电路的明文输出(参见§III-C1中的重构)。</p>
<p>在下面，我们假设 $P_0$ 充当Garbler，$P_1$ 充当评估者，并详细说明Yao共享，假设使用free-XOR[47]和点置换[53]优化的乱码方案。使用这些技术，Garbler随机选择 $R[0]=1$ 的全局 $\kappa$ 位串 $R$。对于每根导线 $w$，线密钥分别为 $k^w_0 \in_R {0,1}^{\kappa}$ 和 $k^w_1 = k^w_0 \oplus R$。最低有效位 $k^w_0[0]$、$k^w_1[0]=1 − k^w_0[0]$ 称为置换位。作者指出，YAO共享也可以与其他改进方案一起实例化。</p>
<h3 id="共享语义-2"><a href="#共享语义-2" class="headerlink" title="共享语义"></a>共享语义</h3><p>直观地，对于每根导线 $w$，$P_0$ 持有两个键 $k_0^w$ 和 $k_1^w$，以及 $P_1$ 持有这些键中的一个，而不知道它对应于两个明文值中的哪一个。为了简化表示，我们假定使用单个比特值；对于 $l$ 比特的值，每个操作都并行执行多次。</p>
<ul>
<li><strong>被共享的值。</strong>值 $x$ 的乱码电路共享 $\langle x \rangle ^Y$ 被共享为 $\langle x \rangle ^Y_0 = k_0$ 和 $\langle x \rangle ^Y_1 = k_x = k_0 \oplus xR$。</li>
<li><strong>共享。</strong>$\mathsf{Shr}^Y_0(x)$：$P_0$ 取随机值 $\langle x \rangle ^Y_0 = k_0 \in_R {0,1}^{\kappa}$ 然后发送 $k_x = k_0 \oplus xR$ 给 $P_1$。</li>
<li><strong>重构。</strong>$\mathsf{Rec}^Y<em>i (x)$：$P</em>{1-i}$ 发送它的置换位 $\pi = \langle x \rangle ^Y_{1-i}[0]$ 给 $P_i$，后者计算 $x = \pi \oplus \langle x \rangle ^Y_i[0]$。</li>
</ul>
<h3 id="操作-2"><a href="#操作-2" class="headerlink" title="操作"></a>操作</h3><p>使用姚氏共享，由XOR和AND门组成的布尔电路评估如下：</p>
<ul>
<li><strong>异或。</strong>$\langle z \rangle ^Y = \langle x \rangle ^Y \oplus \langle y \rangle ^Y$ 使用 free-XOR 技术[47]进行评估：$P_i$ 本地计算 $\langle z \rangle ^Y_i = \langle x \rangle ^Y_i \oplus \langle y \rangle ^Y_i$。</li>
<li><strong>与。</strong>$\langle z \rangle ^Y = \langle x \rangle ^Y \wedge \langle y \rangle ^Y$ 评估如下：$P<em>0$ 使用 $\mathsf{Gb}</em>{\langle z \rangle ^Y_0}(\langle x \rangle ^Y_0, \langle y \rangle ^Y_0)$ 生成乱码表，其中 $\mathsf{Gb}$ 是[7]中定义的乱码函数。$P_0$ 发送该表给 $P_1$，后者使用它的密钥 $\langle x \rangle ^Y_1$ 和 $\langle y \rangle ^Y_1$ 进行解密。</li>
<li><strong>其它。</strong>对于标准功能，本文使用[45]中总结的尺寸优化的电路结构。</li>
</ul>
<h1 id="共享转换"><a href="#共享转换" class="headerlink" title="共享转换"></a>共享转换</h1><p>在本节中，将详细介绍在不同共享之间进行转换的方法。首先解释已经存在的或直接的转换：Y2B(§IV-A)、B2Y(§IV-B)、A2Y(§IV-C)和A2B(§IV-D)。然后，我们详细说明了B2A(§IV-E)和Y 2A(§IV-F)的改进结构。作者将共享、重构和转换操作的复杂性总结在表1。</p>
<p><img src="http://images.yingwai.top/picgo/aby2t1.png" alt=""></p>
<center>
    <i>表1 用于l比特的值的共享、重构和转换操作的在线阶段的总计算(对称密码操作数)、通信和消息数。κ是对称安全参数。</i>
</center>




<h2 id="姚氏到布尔共享-Y2B"><a href="#姚氏到布尔共享-Y2B" class="headerlink" title="姚氏到布尔共享(Y2B)"></a>姚氏到布尔共享(Y2B)</h2><p>将姚共享 $\langle x \rangle ^Y$ 转换为布尔共享 $\langle x \rangle ^B$ 是最简单的转换，基本上是免费的。关键的发现是 $\langle x \rangle ^Y_0$ 和 $\langle x \rangle ^Y_1$ 的排列位已经形成了 $x$ 的有效布尔共享。因此，$P_i$ 在本地设置 $\langle x \rangle ^B_i = Y2B(\langle x \rangle ^Y_i) = \langle x \rangle ^Y_i[0]$。</p>
<h2 id="布尔到姚氏共享-B2Y"><a href="#布尔到姚氏共享-B2Y" class="headerlink" title="布尔到姚氏共享(B2Y)"></a>布尔到姚氏共享(B2Y)</h2><p>将布尔共享 $\langle x \rangle ^B$ 转换为姚共享 $\langle x \rangle ^Y$ 非常类似于 $\mathsf{Shr}^Y<em>1$ 操作(参见§III-C1)：在下文中，我们假设 $x$ 是1比特；对于 $l$ 比特的值，每个运算都并行完成 $l$ 次。设 $x_0 = \langle x \rangle ^B_0$ 和 $x_1 = \langle x \rangle ^B_1$。$P_0$ 选取 $\langle x \rangle ^Y_0 = k_0 \in_R {0,1}^{\kappa}$。双方执行 OT$^1</em>{\kappa}$，其中 $P_0$ 作为具有输入的发送方 $(k_0 \oplus x_0 \cdot R;k_0 \oplus (1−x_0) \cdot R)$，而 $P_1$ 作为具有选择位 $x_1$ 的接收方，并且不经意地获得 $\langle x \rangle ^Y_1 = k_0 \oplus (x_0 \oplus x_1) \cdot R = k_x$。</p>
<h2 id="算术到姚氏共享-A2Y"><a href="#算术到姚氏共享-A2Y" class="headerlink" title="算术到姚氏共享(A2Y)"></a>算术到姚氏共享(A2Y)</h2><p>算术共享 $\langle x \rangle ^A$ 到Yao共享 $\langle x \rangle ^Y$ 的转换在[35]、[44]、[46]中概述，并且可以通过安全地评估加法电路来完成。更准确地说，各方秘密地将他们的算术份额 $x_0 = \langle x \rangle ^A_0$ 和 $x_1 = \langle x \rangle ^A_1$ 共享为 $\langle x_0 \rangle ^Y = \mathsf{Shr}^Y_0(x_0)$ 和 $\langle x_1 \rangle ^Y = \mathsf{Shr}^Y_1(x_1)$，并计算 $\langle x \rangle ^Y = \langle x_0 \rangle ^Y + \langle x_1 \rangle ^Y$。</p>
<h2 id="算术到布尔共享-A2B"><a href="#算术到布尔共享-A2B" class="headerlink" title="算术到布尔共享(A2B)"></a>算术到布尔共享(A2B)</h2><p>可以使用布尔加法电路(类似于§IV-C中描述的A2Y转换)或通过使用算术位提取电路[17]、[18]、[21]、[70]来完成将算术共享 $\langle x \rangle ^A$ 转换为布尔共享 $\langle x \rangle ^B$。如在[69]中总结的，布尔加法电路可以被实例化为大小优化的随 $O(l)$ 大小和深度变化的变量，或者实例化为随 $O(l\log_2l)$ 大小和 $O(\log_2l)$ 深度变化的深度优化的变量。在本文的框架中，$Y2B$ 转换是免费的，我们简单地计算 $\langle x \rangle ^B = A2B(\langle x \rangle ^A) = Y2B(A2Y(\langle x \rangle ^A))$，因为我们在§V-D中的评估表明，Yao共享中的加法比布尔共享中的加法更有效。</p>
<h2 id="布尔到算术共享-B2A"><a href="#布尔到算术共享-B2A" class="headerlink" title="布尔到算术共享(B2A)"></a>布尔到算术共享(B2A)</h2><p>将 $l$ 比特布尔共享 $\langle x \rangle ^B$ 转换为算术共享 $\langle x \rangle ^A$ 的简单解决方案是评估布尔减法电路，其中 $P_0$ 输入 $\langle x \rangle ^B_0$ 和随机数 $r \in_R {0,1}^l$，并且设置 $\langle x \rangle ^A_0 = r$，然后 $P_1$ 输入 $\langle x \rangle ^B_1$ 并获得 $\langle x \rangle ^A_1 = x - r$。然而，评估这样的布尔减法电路将具有 $O(l)$ 大小和深度或者 $O(l \log_2 l)$ 大小和 $O(\log_2 l)$ 深度[69]。</p>
<p>为了提高转换的性能，可以使用与§III-A5中描述的算术乘法三次生成类似的技术。一般的想法是对每个比特执行OT，其中我们不经意地转移了两个值，这两个值被2的幂相加相关。接收方可以获得这些值中的一个，并且通过将它们相加，各方获得有效的算术份额。</p>
<p>更详细地说，在OT协议中，$P<em>0$ 充当发送者，$P_1$ 充当接收者。在第 $i$ 个OT中，$P_0$ 随机选择 $r_i \in_R {0, 1}^l$ 以及输入 $(s</em>{i,0}, s<em>{i_1})$，其中 $s</em>{i,0} = (1 - \langle x \rangle^B<em>0[i]) \cdot 2^i - r_i$ 以及 $s</em>{i,1} = \langle x \rangle^B<em>0[i] \cdot 2^i - r_i$，而 $P_1$ 输入 $\langle x \rangle^B_1[i]$ 作为选择位，收到输出 $s</em>{\langle x \rangle ^B<em>1[i]} = (\langle x \rangle^B_0[i] \oplus \langle x \rangle^B_1[i]) \cdot 2^i - r_i$。最后，$P_0$ 计算 $\langle x \rangle^A_0 = \sum^l</em>{i=1}r<em>i$，$P_1$ 计算 $\langle x \rangle^A_1$ $=\sum^l</em>{i=1}s<em>{\langle x \rangle^B_1[i]}$ $=\sum^l</em>{i=1}(\langle x \rangle^B<em>0[i] \oplus \langle x \rangle^B_1[i]) \cdot$ $2^i-\sum^l</em>{i=1}r<em>i$ $=\sum^l</em>{i=1}x[i] \cdot 2^i -$ $\sum^l_{i=1}r_i$ $=x - \langle x \rangle^A_0$。安全性和正确性类似于§III-A5的协议。</p>
<p><strong>复杂度。</strong>观察到，由于我们传输一个随机元素和另一个作为相关性，并且只需要第 $i$ 个OT中的 $l-i$ 个最低有效位，所以我们可以使用C-OT和§III-A5中概述的相同技巧，导致(平均)C-OT$^l_{(l+1)/2}$ 和恒定轮数。相比之下，当使用布尔共享评估减法电路时，对于深度为 $O(\log_2l)$ 的电路各方将需要评估 $O(l \log_2 l)$次R-OT或对于深度为 $l$ 的电路评估 $2l$ 次ROT。本文的转换方法也比转换成姚共享(这已经需要 $2l$ OT)并在乱码电路中进行减法运算。</p>
<h2 id="姚氏到算术共享-Y2A"><a href="#姚氏到算术共享-Y2A" class="headerlink" title="姚氏到算术共享(Y2A)"></a>姚氏到算术共享(Y2A)</h2><p>在[35]，[44]，[46]中描述了从姚共享 $\langle x \rangle ^Y$ 到算术共享 $\langle x \rangle ^A$ 的转换：$P<em>0$ 随机选择 $r \in_R \mathbb{Z}</em>{2^l}$，执行 $\mathsf{Shr}^Y_0$，然后双方评估布尔减法电路 $\langle d \rangle ^Y = \langle x \rangle ^Y - \langle r \rangle ^Y$，以获得它们的算术份额为 $\langle x \rangle ^A_0 = r$ 和 $\langle x \rangle ^A_1 = \mathsf{Rec}^Y_1(\langle d \rangle ^Y)$。</p>
<p>然而，由于我们免费执行 $Y2B$，而 $B2A$ 在计算和通信方面更便宜，我们建议计算 $\langle x \rangle ^A = Y2A(\langle x \rangle ^Y) = B2A(Y2B(\langle x \rangle ^Y))$。</p>
]]></content>
      <categories>
        <category>Papers</category>
      </categories>
      <tags>
        <tag>密码学</tag>
        <tag>MPC</tag>
        <tag>PPML</tag>
        <tag>Secret Sharing</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Ubuntu deepin-wine微信字体乱码</title>
    <url>/2020/04/24/%E8%A7%A3%E5%86%B3Ubuntu-deepin-wine%E5%BE%AE%E4%BF%A1%E5%AD%97%E4%BD%93%E4%B9%B1%E7%A0%81/</url>
    <content><![CDATA[<hr>
<a id="more"></a>
<h1 id="解决乱码-修改字体-微软雅黑"><a href="#解决乱码-修改字体-微软雅黑" class="headerlink" title="解决乱码+修改字体(微软雅黑)"></a>解决乱码+修改字体(微软雅黑)</h1><p>下载微软雅黑字体,msyh.ttc</p>
<h2 id="添加字体"><a href="#添加字体" class="headerlink" title="添加字体"></a>添加字体</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cp msyh.ttc ~/.deepinwine/Deepin-WeChat/drive_c/windows/Fonts</span></span><br></pre></td></tr></table></figure>
<h2 id="修改系统注册表"><a href="#修改系统注册表" class="headerlink" title="修改系统注册表"></a>修改系统注册表</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gedit ~/.deepinwine/Deepin-WeChat/system.reg</span></span><br></pre></td></tr></table></figure>
<p>修改以下两行</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">"MS Shell Dlg"</span>=<span class="string">"msyh"</span></span><br><span class="line"><span class="string">"MS Shell Dlg 2"</span>=<span class="string">"msyh"</span></span><br></pre></td></tr></table></figure>
<h2 id="字体注册"><a href="#字体注册" class="headerlink" title="字体注册"></a>字体注册</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gedit msyh_config.reg</span></span><br></pre></td></tr></table></figure>
<p>内容添加</p>
<figure class="highlight moonscript"><table><tr><td class="code"><pre><span class="line">REGEDIT4</span><br><span class="line">[HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\FontLink\SystemLink]</span><br><span class="line"><span class="string">"Lucida Sans Unicode"</span>=<span class="string">"msyh.ttc"</span></span><br><span class="line"><span class="string">"Microsoft Sans Serif"</span>=<span class="string">"msyh.ttc"</span></span><br><span class="line"><span class="string">"MS Sans Serif"</span>=<span class="string">"msyh.ttc"</span></span><br><span class="line"><span class="string">"Tahoma"</span>=<span class="string">"msyh.ttc"</span></span><br><span class="line"><span class="string">"Tahoma Bold"</span>=<span class="string">"msyhbd.ttc"</span></span><br><span class="line"><span class="string">"msyh"</span>=<span class="string">"msyh.ttc"</span></span><br><span class="line"><span class="string">"Arial"</span>=<span class="string">"msyh.ttc"</span></span><br><span class="line"><span class="string">"Arial Black"</span>=<span class="string">"msyh.ttc"</span></span><br><span class="line">#注册</span><br><span class="line">WINEPREFIX=~/.deepinwine/Deepin-WeChat deepin-wine regedit msyh_config.reg</span><br></pre></td></tr></table></figure>
<h2 id="Reboot"><a href="#Reboot" class="headerlink" title="Reboot"></a>Reboot</h2>]]></content>
      <categories>
        <category>Env</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>全同态加密算法深入解析</title>
    <url>/2020/07/03/%E5%85%A8%E5%90%8C%E6%80%81%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<hr>
<a id="more"></a>
<p>转自<a href="https://zhuanlan.zhihu.com/p/54484449" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/54484449</a></p>
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>同态加密方案提供了一种惊人的能力——能够在不解密的情况下，对密文数据进行计算。这使您无需破坏敏感源数据，同时可以对数据进行处理。</p>
<p>其中最有影响的一个方案(也是最近一些标准化工作的主题)被称为Fan-Vercauteren (FV)方案(或称为Brakerski-Fan-Vercauteren方案)，我们将在这里深入地进行说明，同时你也可以尝试使用以下实现该方案的算法库：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Library</th>
<th>URL</th>
<th>License</th>
<th>Language</th>
</tr>
</thead>
<tbody>
<tr>
<td>HEANN</td>
<td><a href="https://github.com/kimandrik/HEAAN" target="_blank" rel="noopener">https://github.com/kimandrik/HEAAN</a></td>
<td>CC  non commercial</td>
<td>C++</td>
</tr>
<tr>
<td>NFLib</td>
<td><a href="https://github.com/quarkslab/NFLlib" target="_blank" rel="noopener">https://github.com/quarkslab/NFLlib</a></td>
<td>GPLv3</td>
<td>C++</td>
</tr>
<tr>
<td>FV-NFLib</td>
<td><a href="https://github.com/quarkslab/NFLlib" target="_blank" rel="noopener">https://github.com/quarkslab/NFLlib</a></td>
<td>GPLv3</td>
<td>C++</td>
</tr>
<tr>
<td>cuHE</td>
<td><a href="https://github.com/vernamlab/cuHE" target="_blank" rel="noopener">https://github.com/vernamlab/cuHE</a></td>
<td>MIT</td>
<td>CUDA C++</td>
</tr>
<tr>
<td>PALISADE</td>
<td><a href="https://git.njit.edu/palisade/PALISADE/tree/master" target="_blank" rel="noopener">https://git.njit.edu/palisade/PALISADE/tree/master</a></td>
<td>Liberal</td>
<td>C++</td>
</tr>
<tr>
<td>SEAL</td>
<td><a href="https://www.microsoft.com/en-us/research/project/simple-encrypted-arithmetic-library/" target="_blank" rel="noopener">https://www.microsoft.com/en-us/research/project/simple-encrypted-arithmetic-library/</a></td>
<td>Microsoft  research only</td>
<td>C++</td>
</tr>
<tr>
<td>HELib</td>
<td><a href="https://github.com/shaih/HElib" target="_blank" rel="noopener">https://github.com/shaih/HElib</a></td>
<td>Apache  2.0</td>
<td>C++</td>
</tr>
<tr>
<td>jLBC</td>
<td><a href="http://gas.dia.unisa.it/projects/jlbc/download.html" target="_blank" rel="noopener">http://gas.dia.unisa.it/projects/jlbc/download.html</a></td>
<td>LGPLv3</td>
<td>Java</td>
</tr>
</tbody>
</table>
</div>
<p>这些加密方案看起来很复杂，也有一点神秘，但希望本文能让您清楚地了解它们的工作原理和驱动因素。</p>
<p>这篇文章的整体结构包括</p>
<ul>
<li><p>一点点数学介绍</p>
</li>
<li><p>加密和解密是如何工作的</p>
</li>
<li><p>同态加法和乘法</p>
</li>
</ul>
<h1 id="数学介绍"><a href="#数学介绍" class="headerlink" title="数学介绍"></a>数学介绍</h1><p>这些同态加密方案是基于Ring Learning with Errors问题。本质上，这些方案中的数据在加密时(密文)和未加密时(明文)都以多项式表示。</p>
<p>这些几乎是学校里每个人都学过的多项式。像</p>
<script type="math/tex; mode=display">
4x^2 + 2x + 1</script><p>但有一些区别，第一个是系数都是整数，并且需要 $\bmod t$。假设 $t = 24$，这就像一个$24$小时的时钟，$21$加$6$得到$3$。多项式的所有系数都是这样处理的。</p>
<p><img src="http://images.yingwai.top/picgo/HEdif1.jpg" alt=""></p>
<p>或者，我们可以将数字考虑在$-11$到$12$之间，这样我们就可以方便地求负数。注意，这只是一个方便系数——余数为$-1$和余数为$23$(除以$24$时)之间没有区别。</p>
<p><img src="http://images.yingwai.top/picgo/HEdif2_.jpg" alt=""></p>
<p>第二点，也是比较棘手的一点，在于这种使用余数的思想不仅适用于多项式的系数，也适用于多项式本身。</p>
<p>我们定义了一个特殊的多项式，称为多项式模，并且只考虑多项式乘以该多项式模后的余数。FV方案中该多项式模的具体形式为 $x^d+1$，其中对于某些 $n$，有 $d=2n$。为了说明这一点，我们取 $n=4$，因此多项式为 $x^{16}+1$。</p>
<p>因为我们考虑的是关于模 $x^{16}+1$ 之后的余数，所以我们只需要考虑幂从 $x^0$ 到 $x^{15}$ 的多项式。任何更高次的幂都会因乘以该多项式模而消去。这也可以被理解为，$x^{16} \equiv -1 (\bmod x^{16}+1)$，这意味着 $x^{16}$ 可以被$-1$替换，以将 $x$ 的更高次幂归约到$0$到$15$的范围内。</p>
<p>所以我们考虑的多项式都是这种形式的</p>
<script type="math/tex; mode=display">
\begin{align}
a_{15}x^{15} &+ a_{14}x^{14} + a_{13}x^{13} + a_{12}x^{12} + a_{11}x^{11} + a_{10}x^{10} + a_{9}x^{9} + a_{8}x^{8}\\
+ &a_{7}x^{7} + a_{6}x^{6} + a_{5}x^{5} + a_{4}x^{4} + a_{3}x^{3} + a_{2}x^{2} + a_{1}x^{1} + a_0
\end{align}</script><p>其中这16系数(即 $a_i$)中的每一个的范围都是从 $0$ 到 $t-1$。我们可以用系数的环面来说明，如下所示：</p>
<p><img src="http://images.yingwai.top/picgo/HEdif3.jpg" alt=""></p>
<p>在这个图中，每个循环表示多项式中 $x$ 的幂次方前的系数的取值范围（包含24个可能值）。绿点代表系数取$0$时所处的位置。这为我们提供了一种很好的方法来可视化多项式，这在我们考虑加密和解密步骤如何工作时将会有所帮助。</p>
<p>FV加密方案涉及大量的多项式乘法。当我们把 $x$ 的两个幂次方相乘，比如 $2x^{14}$ 和 $x^4$ 时，我们把它们的指数相加，得到 $2x^{18}$。有人可能会假设，求这个多项式关于多项式模的余数可能需要在 $x^{16}$ 处将指数旋转回$0$，得到 $2x^2$，就像上面所示的整数系数那样。如果多项式模是 $x^{16}$，情况就是这样。然而，我们的多项式模是 $x^{16}+1$ - 如上所述，额外的$+1$因子引入了一个符号变化，这有助于进一步干扰乘法的结果。</p>
<p><img src="http://images.yingwai.top/picgo/HEdif4.jpg" alt=""></p>
<p>如上图所示，当 $2x^{14}$ 乘以 $x^4$ 后模 <script type="math/tex">x^{16}+1</script> 时，取这个项(由上面的红点表示)，向前旋转环面$4$个幂，然后从$0$处调整系数的值，得到 $22x^2$(或 $−2x^2$，如果我们认为数字是从$-12$到$11$而不是从$0$到$23$时)。</p>
<p><strong>这种形式的多项式具有非常丰富的结构和许多不错的特性。它们是分圆多项式的子集</strong>。使用其中一个作为多项式模并不是严格必需的，但是这样做会更加方便快速。</p>
<h1 id="使用环上的多项式加密"><a href="#使用环上的多项式加密" class="headerlink" title="使用环上的多项式加密"></a>使用环上的多项式加密</h1><p>我们已经介绍了FV加密方案中使用的环上的多项式的一些属性，现在我们可以讨论加密和解密的工作原理。首先，我们需要讨论如何生成私钥和公钥，然后讨论如何使用它们进行加密和解密。</p>
<h2 id="私钥和公钥"><a href="#私钥和公钥" class="headerlink" title="私钥和公钥"></a>私钥和公钥</h2><p>加密采用明文，并使用从私钥派生的公钥将其转换为密文。从明文到密文的转换是通过一种只有在您知道私钥的情况下才容易可逆的方式完成的。</p>
<p>更具体地说，明文是环上的多项式，其具有多项式模 $x^d+1$，其中 $d = 2^n$，以及系数模 $t$。明文加密后为密文，其是由两个环上的、具有相同多项式模的多项式构成的，但系数模为 $q$，通常 $q$ 远大于 $t$。</p>
<p>例如，多项式模为 $x^{4096} + 1$，这意味着明文和密文中的多项式都有 $d=4096$ 个系数。明文多项式的系数需要模 $t = 290764801$，密文多项式的系数需要模 $q = 9214347247561474048$ 或更大。</p>
<p>为了便于说明，我们将使用较小的数字，但希望这些数字能够更好地说明方案的各个步骤中发生了什么。在第一部分中，为了更直观，我们将使用 $d = 16$、$t = 7$ 和 $q = 874$。注意，这些参数是不安全的!!</p>
<p>对于私钥或密钥，我们用 $s$ 表示，它是我们随机生成的一个系数为 $-1$、$0$ 或 $1$ 的多项式。例如，</p>
<script type="math/tex; mode=display">
s = x^{15} - x^{13}  - x^{12}  - x^{11}  - x^{9}  + x^{8}  + x^{6}  - x^{4}  + x^{2}  + x - 1</script><p>接下来，我们从密文空间中随机生成一个多项式(用于生成公钥)，其系数模为 $q$，我们用 $a$ 表示。</p>
<script type="math/tex; mode=display">
\begin{align}
a = 42&x^{15} - 256x^{14} - 393x^{13} - 229x^{12} + 447x^{11} -369x^{10} - 212x^{9} + 107x^8\\
&+ 52x^7 + 70x^6 - 138x^5 + 322x^4 + 186x^3 - 282x^2 - 60x + 84
\end{align}</script><p>我们还定义了一个噪音多项式，它是“小”的，因为它是从离散高斯分布中取的一个小系数。这个多项式只在这里使用一次，然后丢弃。</p>
<script type="math/tex; mode=display">
\begin{align}
e = -3x^{15} &+ x^{14} + x^{13} + 7x^{12} - 6x^{11} - 6x^{10} + x^{9} + 4x^8\\
&- x^6 + 3x^5 -4x^4 + 4x^3 + 4x + 1
\end{align}</script><p>然后将公钥定义为一对多项式，即 $\mathbf{pk} = ([−as + e]q, a)$，其中多项式都是模多项式模和系数模 $q$ 的。</p>
<p>对于上面给出的示例，公钥的第一个多项式被构造为</p>
<p><img src="http://images.yingwai.top/picgo/HEdif5.jpg" alt=""></p>
<p>其中第一个乘法取多项式 $a$，它的系数 $\bmod q$，然后乘以系数为$-1,0$或$1$的 $s$。由于模上多项式模的多项式的乘法具有“旋转和反射”性质，有效地混合和打乱了 $a$ 的所有系数，并进一步增加了小的噪音。多项式 $a$ 有效地掩盖了公钥中的私钥。</p>
<p>通过从公钥中找到 $s$ 的方式来破解加密方案，其主要涉及的计算为 $([−as + e]q, a)$。唯一的因素是该方案中包含了噪音——如果 $e$ 为零，则很容易从公钥中计算出 $s$。当 $e$ 足够大，但又不太大时，这是一个难题。</p>
<p>本文的示例中，私钥可以通过暴力攻击恢复——尝试每个可能的 $s$ (只有$3^{16}=43046721$组合)<em>，</em>然后计算 $as + e$ 来寻找出一个接近公钥的第一项的答案。对于真正的参数，这种暴力攻击的方法是完全不可行的。$3^{4096}$是一个很大的数字，但有更聪明的方法，然后定义给定的一组参数的安全性。</p>
<h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p>加密过程看起来有点像公钥生成过程。</p>
<p>加密明文的过程是将一个系数模为 $t$ 的多项式转换为一对系数模为 $q$ 的多项式。本例中，我们将加密一个非常简单的多项式(称为消息) $- m = 3 + 4x^8 \equiv 3−3x^8$ – 只有两个不为零的系数。</p>
<p>加密还需要三个小的多项式。两个噪音多项式来自于相同的离散高斯分布(即和公钥中的噪音多项式的取法一样)，另一个多项式我们称之为 $u$，它的系数为$-1$、$0$或$1$，就像私钥一样。</p>
<script type="math/tex; mode=display">
\begin{align}
e_1 = &-5x^{15} - 2x^{14} + 3x^{13} - x^{12} - 4x^{11} + 3x^{10} + x^9 + 4x^8\\
&+4x^7 + 5x^6 - 4x^5 - 3x^4 - 3x^3 + 2x^2 - 6x +4
\end{align}</script><script type="math/tex; mode=display">
\begin{align}
e_2 = &-7x^{15} + 2x^{14} - 4x^{13} + 5x^{11} + 2x^{10} - x^9 + 4x^8\\
&-4x^7 - 3x^6 + 2x^5 - 2x^4 + x^3 - 4x^2 - 2x + 2
\end{align}</script><p>和</p>
<script type="math/tex; mode=display">
u = x^{14} + x^{13} + x^{12} - x^8 - x^5 - x^3 + 1</script><p>这些多项式只在加密过程中使用，然后丢弃。</p>
<p>密文是由两个多项式组成的，通过如下计算得到</p>
<script type="math/tex; mode=display">
\mathbf{ct} = ([\mathbf{pk}_0u + e_1 + qm/t]_q, [\mathbf{pk}_1u + e_2]_q)</script><p>请注意消息中的值是在 $\bmod t$ 的范围内，而在我们的示例中，它们被缩放为 $q/t$ (即128)，使它们覆盖 $\bmod q$ 的范围。这是消息被插入到密文时的唯一更改。这些值通过添加到第一项来掩盖，第一项的值是在 $\bmod q$ 的范围内，与随机的噪音没有区别。$u$ 的随机性改变了每次加密中使用的掩码，从而确保相同的明文在每次加密时产生不同的密文。</p>
<p><img src="http://images.yingwai.top/picgo/HEdif6.jpg" alt=""></p>
<p>同态加法和乘法之所以有效，是因为消息在密文中以比例来表示。其他项用于掩盖消息，而且可以证明它们是有效的，只有在您知道私钥的情况下才能删除它们。</p>
<p>使用上面给出的多项式显式地计算密文的第一个元素</p>
<script type="math/tex; mode=display">
\begin{align}
\mathbf{ct}_0 = 217&x^{15} - 53x^{14} + 13x^{13} - 249x^{12} - 392x{11} - 238x^{10} + 252x^9 + 115x^8\\
+5&x^7 +184x^6 -201x^5 -258x^4 -247x^3 +144x^2 +23x +42
\end{align}</script><p>代入公钥，我们可以看到密文的第一个元素展开为 $\mathbf{ct}_0 =[e_1 + eu – aus + qm / t]_q$。在这个表达式中，前两项是“小”的，与噪音成比例，后两项是“大”的。第一个大项有效地掩盖了第二个大项，即消息。</p>
<p>密文的第二个元素是这样计算的:</p>
<p><img src="http://images.yingwai.top/picgo/HEdif7.jpg" alt=""></p>
<p>代入公钥，我们看到密文的第二个元素展开为 $\mathbf{ct}_1 = [au + e_2]_q$。这说明了解密是如何工作的——如果我们知道 $s$，就可以计算出 $\mathbf{ct}_1 s = [aus + e_2s]_q$，它可以用来消除密文的第一个元素中的非消息大项。</p>
<p>综上所述，密文可以用公钥、私钥、掩码、噪音和消息表示为</p>
<p><img src="http://images.yingwai.top/picgo/HEdif8.jpg" alt=""></p>
<h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><p>如上所述，解密相对简单。首先，我们计算 $[\mathbf{ct}_0 + \mathbf{ct}_1s]_q$，它将从消息中完全移除掩码。这给我们一个多项式，它可以展开为 $[qm / t + e_1 + eu + e_2s]_q$ -也就是说，缩放后的信息加上一些噪声。因此，只要噪声不太大，我们就可以恢复消息。</p>
<p>明确地，</p>
<script type="math/tex; mode=display">
\begin{align}
\mathbf{ct}_1s + \mathbf{ct}_0 &= 13x^{15} -2x^{14} + 17x^{13} + 22x^{12} - 32x^{11} - 23x^{10} + 19x^9 - 380x^8\\
&+9x^7 + 10x^6 -13x^5 -3x^4 -2x^3 -12x^2 +7x +393
\end{align}</script><p>在这里您可以看到，除了明文的两个非零系数( $x^8$ 和 $x^0$ )之外，所有的系数都小于 $q/t = 128$。如果我们把这个多项式缩放回 $\bmod t$ 范围内的值，那么我们就得到</p>
<script type="math/tex; mode=display">
\begin{align}
\frac{13x^{15}}{128} &- \frac{x^{14}}{64} + \frac{17x^{13}}{128} + \frac{11x^{12}}{64} - \frac{x^{11}}{4} - \frac{23x^{10}}{128} + \frac{19x^{9}}{128} - \frac{95x^{8}}{32}\\
+ &\frac{9x^{7}}{128} + \frac{5x^{6}}{64} - \frac{13x^{5}}{128} - \frac{3x^{4}}{128} - \frac{x^{3}}{64} - \frac{3x^{2}}{32} + \frac{7x}{128} + \frac{393}{128}
\end{align}</script><p>四舍五入这些系数可以恢复我们的消息 $m = 3 − 3x^8$。</p>
<p>我们通过将系数四舍五入，来舍入到最接近的整数后得到我们的信息:</p>
<p><img src="http://images.yingwai.top/picgo/HEdif9.jpg" alt=""></p>
<center>
    <i>绿色-噪音变换  粉色-舍入结果</i>
</center>


<p>把它们放在一起，我们通过如下计算来解密密文</p>
<script type="math/tex; mode=display">
m' = \left[\left \lfloor \frac{t}{q}[\mathbf{ct}_0+\mathbf{ct}_1s]_q \right \rceil \right]_t</script><p>$\lfloor \rceil$ 表示舍入到最接近的整数(四舍五入)。</p>
<p>如果系数中噪音太大，那么它们最终会更接近一个与正确整数不同的整数，然后解密会(悄无声息地)失败并产生错误的结果。在上面的示例中，最大的噪音为$13 / 128$，所以仍然有一些空间允许产生更多的噪音，并且能够正确解密。噪音的含量可以通过将 $q / t$ 的比值变大或变小来调节。</p>
<h1 id="同态操作"><a href="#同态操作" class="headerlink" title="同态操作"></a>同态操作</h1><p>人们对这类密码体制如此感兴趣的一个主要原因是，它们允许同态加法和乘法(来自希腊语<em>homo</em> - same和<em>morphe</em> - shape)。这意味着您可以在数字仍然加密的情况下进行加法和乘法运算，而不必先解密它们。这是一个令人惊叹的功能，有望在数据保护和安全方面构建一个新的黄金标准。</p>
<h2 id="同态加法"><a href="#同态加法" class="headerlink" title="同态加法"></a>同态加法</h2><p>最简单的情况是两个加密数字的加法。假设我们已经用相同的公钥加密了两个多项式 $m_1$ 和 $m_2$：</p>
<script type="math/tex; mode=display">
\begin{align}
\mathbf{a} &= ([\mathbf{pk}_0 u_1 + e_1 + qm_1/t]_q, [\mathbf{pk}_1 u_1 + e_2]_q),\\
\mathbf{b} &= ([\mathbf{pk}_0 u_2 + e_3 + qm_2/t]_q, [\mathbf{pk}_1 u_2 + e_4]_q).
\end{align}</script><p>注意，我们需要使用两个不同的、小的多项式 $u_1$ 和 $u_2$，以及4个小的噪音多项式 $e_1 \cdot \cdot \cdot e_4$。</p>
<p>如果我们仅仅是将密文中的元素相加，就会得到一个新的密文</p>
<script type="math/tex; mode=display">
\mathbf{a} + \mathbf{b} = ([\mathbf{pk}_0(u_1+u_2) + (e_1+e_3) + q(m_1+m_2)/t]_q, [\mathbf{pk}_1(u_1+u_2) + (e_2+e_4)]_q)</script><p>由于消息仅存在于具有缩放的密文中，所以加法的结果与 $m_1 + m_2$ 加密的形式相同，只是增加了新的噪音：</p>
<script type="math/tex; mode=display">
\mathbf{c} = ([\mathbf{pk}_0 (u_3) + (e_5) + q(m_1+m_2)/t]_q, [\mathbf{pk}_1(u_3) + (e_6)]_q)</script><p>近似解密(舍入之前)将是</p>
<script type="math/tex; mode=display">
[q(m_1 + m_2)/t + e_5 + eu_3 + e_6s]_q</script><p>这意味着只要新的噪音不是太大，消息 $m_1 + m_2$ 将正确解密。噪音有三种类型：</p>
<script type="math/tex; mode=display">
e_5 = e_1 + e_3</script><script type="math/tex; mode=display">
eu_3 = e(u_1 + u_2)</script><script type="math/tex; mode=display">
e_6s =(e_2 + e_4)s</script><p>我们担心的是，当这些项变得足够大，以至于噪音多项式中的一个系数大于 $q/(2t)$ 时，解密就会失败，因为解密过程结束时的四舍五入操作会四舍五入到错误的数字。</p>
<p>如果我们只考虑第一项，那么我们就把来自离散高斯分布的多项式中的系数相加。这意味着，在某些情况下，我们会把一个负系数加到一个正系数上，结果会更接近于零。在其他情况下，系数会有相同的符号，所以结果会更大。我们可以做很多的同态加法，看看噪音是如何随着加法的数量增加而增加的，这是很有指导意义的。系数的分布如下图所示，其中我们添加了1、5和30个噪音多项式(随机地进行了数百次试验)。</p>
<p><img src="http://images.yingwai.top/picgo/HEdif10.png" alt=""></p>
<p>当我们添加了30个噪音多项式时，某些系数有可能会大于64，即超过了 $q/t$ 的一半，所以解密不会产生正确的结果。</p>
<p>另外两项表示不同的情况——第二项是一个噪音多项式乘以一些“小的多项式”(系数为$-1$、$0$或$1$)的总和。这种乘法会产生更大的噪音。一个噪音多项式和一个小的多项式的乘积的系数大约将是随机正负号的噪音多项式系数的2/3rds的总和。这意味着这个噪音与多项式的最高次的平方根 $\sqrt{n}$ 一致。</p>
<p>对这一项绘制与上面相同的分布可以看出，它比第一项大得多，而且即使对于我们示例中的参数，也存在错误解密的危险，即使只是添加了几个参数。</p>
<p><img src="http://images.yingwai.top/picgo/HEdif11.png" alt=""></p>
<p>第三项是类似的——一组噪音多项式之和，乘以一个“小的多项式”。它的噪音分布是这样的：</p>
<p><img src="http://images.yingwai.top/picgo/HEdif12.jpg" alt=""></p>
<p>结合起来，我们可以画出这三项的最大系数的增长，作为已经发生的加法数量的函数。这是一个须状图，给出了这些最大值的可变性。(注意噪音的均值接近于零，这是最大系数的幅值分布。)</p>
<p><img src="http://images.yingwai.top/picgo/HEdif13.jpg" alt=""></p>
<p>这表明，对于我们所选择的参数，由两个以上加法产生的密文，解码错误的概率很高，而且两次加法失败的概率也很高。这是因为有时最大错误大于$64$，当 $q/t = 128$ 时，会导致不正确的解密，就像这里一样。为了给这样的操作提供更多的空间，我们需要使用更大的 $q/t$ 比值，这可以应对通常由所执行的操作数量引入的噪音量。</p>
<p>不幸的是，由密文的同态乘法引入的噪音量又要大得多。</p>
<h2 id="同态乘法"><a href="#同态乘法" class="headerlink" title="同态乘法"></a>同态乘法</h2><p>同态乘法在程序上很简单，但是比加法复杂得多。如上所述，消息以 $qm_1/t$ 的比例出现在密文的第一个元素中。因此，将两个密文的第一个元素相乘，再乘以 $t/q$，就会得到一个带有 $qm_1m_2/t$ 的项——如果我们仍然能够除去掩码项，这个项就可以恢复。</p>
<p>因此，要理解同态乘法的机制，关键在于了解如何从密文的乘积中去掉掩码项。要做到这一点，我们的想法是把密文看作是私钥 $s$ 的幂次方的一个简单多项式。这是这篇文章中使用多项式的第三种不同的方法，所以它有点令人困惑，但是它是理解同态乘法如何工作的关键。</p>
<p>我们可以写出解密过程的第一部分，使密文的每个元素都是 $s$ 的多项式的系数：</p>
<script type="math/tex; mode=display">
[\mathbf{ct}_0 + \mathbf{ct}_1s^1]_q</script><p>请记住，$\mathbf{ct}$ 和 $s$ 本身就是多项式，所以这个方程是一个多项式乘以一个多项式($s_0$)加上一个多项式乘以另一个多项式，然后所有这些都取多项式模$x^d + 1$ 和系数模 $q$。</p>
<p>现在，我们在上面看到解密产生了一个与掩码项 $au$ 无关的量。</p>
<script type="math/tex; mode=display">
[\mathbf{ct}_0 + \mathbf{ct}_1s^1]_q \rightarrow \frac{q}{t}m + noise</script><p>好了，现在考虑两个密文 $\mathbf{a}$ 和 $\mathbf{b}$，它们被定义为两个消息 $m_1$ 和 $m_2$ 的加密，它们可以被解密：</p>
<script type="math/tex; mode=display">
[\mathbf{a}_0 + \mathbf{a}_1 s^1]_q \rightarrow \frac{q}{t}m_1 + n_1\\
[\mathbf{b}_0 + \mathbf{b}_1 s^1]_q \rightarrow \frac{q}{t}m_2 + n_2</script><p>其中 $n_1$ 和 $n_2$ 表示密文中的噪声。</p>
<p>如果我们取它们的乘积，我们有：</p>
<script type="math/tex; mode=display">
[\mathbf{a}_0 + \mathbf{a}_1 s^1]_q [\mathbf{b}_0 + \mathbf{b}_1 s^1]_q \rightarrow (\frac{q}{t}m_1 + n_1)(\frac{q}{t}m_2 + n_2)</script><p>右边的表达式与计算 $\mathbf{a}$ 和 $\mathbf{b}$ 所用的掩码无关，所以左边也必须与它们无关。</p>
<p>如果我们把左边展开成 $s$ 的形式(为了方便起见，再乘以 $t/q$)就得到了</p>
<script type="math/tex; mode=display">
mult(\mathbf{a}, \mathbf{b}) = \mathbf{c}_0 + \mathbf{c}_1s + \mathbf{c}_2 s^2</script><p>其中</p>
<script type="math/tex; mode=display">
\mathbf{c}_0 = \left[\frac{t}{q} \mathbf{a}_0 \mathbf{b}_0 \right]_q</script><script type="math/tex; mode=display">
\mathbf{c}_1 = \left[\frac{t}{q} (\mathbf{a}_1 \mathbf{b}_0 + \mathbf{a}_0 \mathbf{b}_1) \right]_q</script><script type="math/tex; mode=display">
\mathbf{c}_2 = \left[\frac{t}{q} \mathbf{a}_1 \mathbf{b}_1 \right]_q</script><p>这样做意味着我们可以计算出一个新的密文的组成部分，它比原来的密文多一个元素，并且可以正确地使用密钥 $s$ 的幂次方进行解密。</p>
<p>解密的形式展开如下：</p>
<script type="math/tex; mode=display">
\left[\left \lfloor \frac{t}{q}[\mathbf{ct}_0 s^0 + \mathbf{ct}_1 s^1 + \mathbf{ct}_2 s^2]_q \right \rceil \right]_t</script><p>这只是增加了另一项即多项式乘以多项式的平方。有很多簿记要做，但它只是学校级代数(直到模数部分!)这是解密步骤的概括，它允许我们解密同态乘法的结果。</p>
<p>要了解这一切是如何显式地工作的，请考虑 $\mathbf{a}$ 和 $\mathbf{b}$ 在加密过程中的展开式</p>
<script type="math/tex; mode=display">
\begin{align}
\mathbf{a} &= [\mathbf{pk}_0 u_1 + e_{11} + qm_1/t, \mathbf{pk}_1 u_1 + e_{12}]\\
\mathbf{b} &= [\mathbf{pk}_0 u_2 + e_{21} + qm_2/t, \mathbf{pk}_1 u_2 + e_{22}]
\end{align}</script><p>如果我们展开乘法的定义，同时对结果进行部分解密(即解密到除以 $q/t$ 和整数之前)，那么得到的表达式就很复杂。但是，由于每个密文的组件都是在解密过程中被构造成能够删除掩码项($au_i$)的，所以这个展开的结果完全不依赖于来自公钥的掩码项!!!得到的表达式如下：</p>
<script type="math/tex; mode=display">
\begin{align}
 \mathbf{c}_0 s^0 + \mathbf{c}_1 s^1 + \mathbf{c}_2 s^2 =  &\frac{q}{t}m_1m_2 + e_{22}m_1s + e_{12}m_2s + em_2u_1 + em_1u_2 + e_{21}m_1 + e_{11}m_2\\
&+ \frac{t}{q}e^2u_1u_2 + \frac{t}{q}e_{12}e_{22}s^2 + \frac{t}{q}e_{22}esu_1 + \frac{t}{q}e_{12}esu_2\\
&+ \frac{t}{q}e_{12}e_{21}s + \frac{t}{q}e_{11}e_{22}s + \frac{t}{q}e_{21}eu_1 + \frac{t}{q}e_{11}eu_2 + \frac{t}{q}e_{11}e_{21}
\end{align}</script><p>这里有很多项，但是现在我们已经去掉了掩码，问题是，噪音(除了第一个)与 $q/(2t)$ 的“噪音预算”相比有多大?</p>
<p>为了感受这一点，我们模拟了大量加密的随机信息的乘法，$d = 16$，$t = 7$，$q = 7168 = 1024 \times t$。各类型噪音的系数大小分布如下图所示。请注意，总的噪音需要大于 $q/(2t) = 512$ 才能导致解密错误。在这些项中，涉及噪音多项式的项、消息和私钥 $e<em>{22}m_1 + e</em>{12}m_2s$ 是最大的贡献者。</p>
<p><img src="http://images.yingwai.top/picgo/HEdif14.jpg" alt=""></p>
<p>上图显示，对于这些参数，最大的贡献来自于包含噪音多项式乘以消息多项式和私钥的项。这种噪音的最大系数约为300。这里有两项，其他的项更小。把所有的噪音合并成一个，就得到了乘法结果的总噪音。这些系数的分布如下图所示：</p>
<p><img src="http://images.yingwai.top/picgo/HEdif15.jpg" alt=""></p>
<p>这表明没有足够的预算来安全地进行单次乘法，然后解密这些参数的正确结果(无论如何都是不安全的!)——大约1/4000的系数将具有大于512的噪音，导致约1%的解密错误率。</p>
<p>因此，如果我们将它们视为 $s$ 的多项式，则可以进行密文的乘法，从而在解密时抵消它们自己的掩码项。将它们相乘，并分别跟踪 $s$ 的幂次方的系数和噪音量，以便我们确信它们能够正确解密。</p>
<h1 id="Relinearisation和其他话题"><a href="#Relinearisation和其他话题" class="headerlink" title="Relinearisation和其他话题"></a>Relinearisation和其他话题</h1><p>上面概述的乘法策略允许我们进行多次乘法，但代价是每次乘法都将密文的大小增加一个多项式。密文在大小上增长可能是一个问题。事实证明，有一些方法可以将密文的大小还原为两个多项式，但代价是增加噪音。这就是所谓的Relinearisation（再线性化），因为你要去掉 $s$ 多项式中的二次项和更高的项。</p>
<p>另一项使这种加密方案切实可行的重要技术是将多个消息打包到一个明文中，通过并行化提高吞吐量。</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>粗略地说，加密是将消息隐藏在一个环上的多项式中，并添加一些噪音。每个密文都包含足够的信息，可以在给定私钥的情况下除去自己的掩码。因为嵌入只涉及到消息的缩放，所以仍然可以对它们执行加法和乘法，并使用一些巧妙的结构来在之后移除掩码。该方案的安全性来自于在不知道私钥的情况下，在噪声存在的情况下很难去除掩码。这个问题的难度导致了一些优秀的安全性能，例如没有已知的量子算法来攻击这些系统。</p>
<p>如果您已经了解了这些，我们希望您现在能够更好地理解基于Ring Learning with Errors问题的同态加密方案(或者至少是这些方案中的FV方案)的工作原理。</p>
]]></content>
      <categories>
        <category>Study</category>
      </categories>
      <tags>
        <tag>密码学</tag>
        <tag>HE</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记 Designing an e-commerce recommender system based on collaborative filtering using a data mining approach</title>
    <url>/2020/05/18/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-Designing-an-e-commerce-recommender-system-based-on-collaborative-filtering-using-a-data-mining-approach/</url>
    <content><![CDATA[<p><em>Samira Khodabandehlou</em></p>
<p><a href="https://scholar.google.com/scholar?hl=zh-CN&amp;as_sdt=0%2C5&amp;q=Designing+an+e-commerce+recommender+system+based+on+collaborative+filtering+using+a+data+mining+approach&amp;btnG=" target="_blank" rel="noopener">https://scholar.google.com/scholar?hl=zh-CN&amp;as_sdt=0%2C5&amp;q=Designing+an+e-commerce+recommender+system+based+on+collaborative+filtering+using+a+data+mining+approach&amp;btnG=</a></p>
<a id="more"></a>
<p><img src="http://images.yingwai.top/picgo/Designing an e-commerce recommender system based on collaborative filtering using a data mining approach.jpg" alt=""></p>
<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>电子商务推荐系统已经转变为客户非常重要的决策辅助工具，利用信息技术和客户信息提供在线个性化推荐。同时，协同过滤推荐系统是电子商务系统成功的关键组成部分之一。尽管有协同过滤现在的普及和成功，这些系统仍然面临着一系列严重的限制，包括冷启动、user-item矩阵稀疏、可扩展性和用户兴趣在这段时间内的变化，这些都阻碍了对客户的准确推荐。虽然已有很多研究提出了克服这些局限性的方法，但还没有提供一个全面的模型来降低这些局限性：1)在产品类别层面上基于LRFM变量进行客户细分，以评估与公司的客户关系的长度、最近程度、频率和购买产品类别的金额；2)在每个聚类级别上基于用户-类别矩阵提取关联规则；3)根据人口统计变量进行客户细分；4)改变用户-项目矩阵并降低其维数；5)通过将细分方法的结果与CF加权组合来开发新的相似度函数。根据所获得的结果，本研究提出的系统消除了传统的CF约束，为客户的偏好提供了更准确、更合适的建议。</p>
<p><strong>关键词：</strong>协同过滤；数据挖掘；电子商务；推荐系统；时态信息。</p>
<p>本研究的主要目标包括：找出传统协同过滤在向合适的用户推荐合适商品方面的局限性，提出一个全面的、全新的推荐系统来消除传统CF的局限性，用真实的数据对推荐系统进行评估，以提供更准确、更符合顾客口味的推荐。</p>
<h1 id="理论背景"><a href="#理论背景" class="headerlink" title="理论背景"></a>理论背景</h1><h2 id="推荐系统"><a href="#推荐系统" class="headerlink" title="推荐系统"></a>推荐系统</h2><p><strong>推荐系统</strong>是提高电子商务环境中决策过程质量的有用工具，因为它们通过提供必要的信息和有用的建议来帮助在线决策者选择与他们的愿望和要求一致的项目(Shambour and Lu，2015；Son，2016)。事实上，识别用户偏好的能力是个性化RS的核心(Kim等人，2011年)。Ricci等人。(2011)将RS定义为特定类型的信息系统，该信息系统：</p>
<ol>
<li>帮助客户选择他们没有亲身体验的项目；</li>
<li>向顾客推荐商品；</li>
<li>通过为客户提供信息来帮助他们决定购买哪种商品。</li>
</ol>
<p>创建推荐系统有五个阶段：收集数据、分析用户信息、计算相似度、选择邻居、预测并提出前N个项目的列表(Yahya和Al-Shamri，2016)。这些系统出现在20世纪90年代中期，通常分为三类(Lee，2010；Resnick，1994)：</p>
<ol>
<li><p><strong>协同过滤</strong>：这些系统根据一组被称为邻居的相似用户或相似项目的得分提供推荐(Kim等人，2005年)。CF是Netflix和Amazon等著名电子商务公司使用的最受欢迎的RS之一(Hernando等人，2016；Kim等人，2005年)。这些系统又根据它们用于预测用户偏好的算法类型分为两类(Ghazarian和Nematbakhsh，2014)：</p>
<ul>
<li><strong>Memory-based</strong>：这些系统使用用户项目评分矩阵和KNN算法来识别用户的邻居并预测他们的偏好(Ghazarian和Nematbakhsh，2014年；Hernando等人，2016年；Kim等人，2011年)，其中使用皮尔逊相关系数等方法计算用户之间的相似性(Bobadilla等人，2012年)。在本研究中，使用KNN算法和皮尔逊相关系数来提供建议。</li>
<li><strong>Model-based</strong>：这些系统使用分段等方法处理用户的档案数据以提供建议，从而改进计算(Ghazarian和Nematbakhsh，2014；Hernando等人，2016)。</li>
</ul>
<p>尽管CF方法很受欢迎并取得了成功，但它们仍然面临着一些严重的限制。这些限制包括：</p>
<ul>
<li><strong>冷启动</strong>：在多个用户购买某个项目之前，系统不能向某人推荐该项目。这个问题被称为冷启动。用户的冷启动是指最近加入推荐系统并且没有关于他或她的足够信息的用户(Elahi等人，2016；Hu和Pu，2011；Kim等人，2011；Lee，2010；Son，2016；Sharma和Ray，2016)。</li>
<li><strong>可伸缩性</strong>：由于客户数据和产品数据的绝对数量，系统必须花费大量的金钱和时间来提取所有客户之间的相似性，导致其生产率较低(Hu和Pu，2011；Hernando等人，2016；Keramati和Khaleghi，2014；Lee，2010)。</li>
<li><strong>user-item矩阵的稀疏性</strong>：由于用户数量巨大，一个项目通常没有足够的分数或购买，导致user-item矩阵稀疏(Adomavicius和Tuzhlin，2005；Ghazarian和Nematbakhsh，2014；Karimi Alavije等人，2015，Sharma和Ray，2016)。</li>
<li><strong>用户偏好的改变</strong>：用户的品味和偏好可能会随着时间的推移而改变。例如，一位最近生了孩子的母亲可能对购买婴儿服装感兴趣，她最近的购买可能反映了这种新的关注。这是当；她可能从来没有对这样的物品有任何兴趣(Ding等人，2006年；岩田，2008年；Lee等人，2008年)。(Ding et al.，2006；Iwata，2008；Lee et al.，2008)。</li>
</ul>
<p>上述限制可能会对RS的性能产生负面影响，从而限制系统创建有意义和准确的推荐。</p>
</li>
<li><p><strong>基于内容的过滤器(Content-Based Filter，CBF)</strong>：该方法基于这样的概念，即用户对他们以前感兴趣的项目感兴趣。因此，这些系统根据项目和产品之间的相似性提供建议(Anderson和Hiralall，2009年；Elahi等人，2016年)。因此，这种方法取决于物品的规格和与这些规格相关的用户配置文件的可用性(Anderson and Hiralall，2009)。这是因为在互联网上存储大量不同种类电子产品的目录是一项非常困难的任务(Bobadilla等人，2012年)。因此，音乐或视频文件等一些产品的内容分析非常困难；这个问题使得CF比CBF要好得多(Anderson和Hiralall，2009；Kim等人，2011)。与CBF相比，CF在电子商务中具有更高的灵活性和与RS的兼容性，使其成为最常用和最有用的RS系统之一(Burke，2002；Iwata，2008；Wang and Wu，2012)。因此，在本研究中，使用CF的概念作为主要的推荐机制。</p>
</li>
<li><p>混合方法：一些RS使用上述系统的组合来减少它们的限制；更多细节将在下面的实验背景部分提供(Burke，2002；Keramati和Khaleghi，2014)。</p>
</li>
</ol>
<h2 id="客户细分"><a href="#客户细分" class="headerlink" title="客户细分"></a>客户细分</h2><p>客户细分是一种非常有用的数据挖掘方法，用于在电子商务的RS中找到“邻居”，在电子商务中，使用特定的方法，如聚类，来选择一些用户作为邻居，以改进偏好的预测(Khodabandehlou和Niknafs，2016；Li等人，2011年)。</p>
<p>在RS中，选择合适的属性进行分割是影响系统性能的重要因素之一。最近购买、频率和货币模型(RFM)的属性是基于分析客户购买行为的一种很好的客户细分方法，它已经成功地用于许多RS(Keramati和Khaleghi，2014；Khodabandehlou和Zivari Rahman，2017；Lee，2010)。各种研究表明，在RFM模型中加入L(客户关系长度)指标将导致对客户的更准确分析，并将提高细分的质量(Li等人，2011年)。因此，在本研究中，LRFM模型被用于客户细分和识别具有相似购买行为的客户类别。</p>
<p>此外，分割算法对识别出的片段的质量起着重要的作用。在聚类算法中，K-Means算法被认为是最成功和最合适的分割方法(Khodabandehlou和Niknafs，2016)，在许多研究中证明了它与RS的兼容性(Keramati和Khaleghi，2014；Karimi Alavije等人，2015；Li等人，2011年)。K-Means是一种数据挖掘方法，它需要K的初始值，即聚类的数量，才能运行。确定最佳簇数的合适方法是自组织映射(SOM)算法。该算法是一种无监督神经网络，可以从数据中识别未知模式，并估计合适的聚类数量(Abidi和Ong，2000；Mosayebian等人，2012)。</p>
<p>相关研究建议在RS中结合K-Means和SOM算法使用两阶段分割方法，以获得更准确的结果(Keramati和Khaleghi，2014；Mosayebian等人，2012年)。因此，本研究将利用这一模式进行客户细分。</p>
<h2 id="关联规则"><a href="#关联规则" class="headerlink" title="关联规则"></a>关联规则</h2><p>关联规则是数据挖掘的重要方法之一，用于分析RS大型数据库中各种商品之间的市场篮子。分析购物篮已经成为发现用户购物车之间关系的流行系统(Hsu等人，2004；Liu and Shih，2005a)。Apriori算法是最常见的关联规则之一(Hsu等人，2004；Liu和Shih，2005a，2005b)，用于在已经购买了另一件物品时找到购买特定物品的概率模式。在RS中，已经形成了许多关于不同用户的购买行为的规则(Keramati和Khaleghi，2014；Liu和Shih，2005a，2005b)。在这些规则吸引程度的衡量标准中，我们可以提到支持性规则和置信度规则，它们分别指发现的规则的传播度和可接受性(Hsu等人，2004；Keramati和Khaleghi，2014；Karimi Alavije等人，2015；Liu和Shih，2005a，2005b)。</p>
<h1 id="评估措施"><a href="#评估措施" class="headerlink" title="评估措施"></a>评估措施</h1><p>评价推荐系统的性能是保证推荐系统通用性的重要一步。有一些评价RSS准确性或性能的众所周知的度量；诸如精确度、覆盖率和F度量(为了在这两个度量之间创建平衡)，它们可以很好地显示推荐系统的性能(Bobadilla等人，2012年；Elahi等人，2016；Ghazarian和Nematbakhsh，2014；Shambour和Lu，2015；Son，2016)。因此，为了评估所提出的研究模型的性能，采用了这些测量方法。</p>
<p>在公式(1)和(2)中，喜爱的项目是指必须推荐给用户的一组产品或项目，而推荐的项目是已经由系统推荐给用户的项目的集合。精确度表示推荐集合中正确推荐的百分比，并评估这些推荐的精确度和准确性。通过公式(1)计算：</p>
<script type="math/tex; mode=display">
{\rm Precision}=\frac{\rm Recommended \ Items\cap Favorite \  Items}{\rm Recommended \  Items} \tag{1}</script><p>覆盖率表示已经向用户建议了多少用户喜欢的项目的百分比，并使用公式(2)计算：</p>
<script type="math/tex; mode=display">
{\rm Coverage}=\frac{\rm Recommended \ Items\cap Favorite \  Items}{\rm Favorite \  Items} \tag{2}</script><p>F-MEASURE是精度和覆盖范围的调和平均值，使用公式(3)计算：</p>
<script type="math/tex; mode=display">
{\rm F - measure}=\frac{2 \times \rm Coverage \cap Precision}{\rm Coverage + Precision} \tag{3}</script><h1 id="研究框架"><a href="#研究框架" class="headerlink" title="研究框架"></a>研究框架</h1><p>在设计和开发RSS时，真实、高质量的数据是非常重要的。本研究使用的这组数据与伊朗一家销售服装的网站的真实数据相关，时间范围为2015年1月21日至2016年1月21日(12个月)。此数据集涉及2542个客户和17,000条记录。在这家商店里，产品分为女装、男装、童装、女装、男装、女包和鞋、男包和鞋等七大类。据此，本研究提出的系统框架由八个主要阶段组成。在第一阶段，准备数据。该阶段由数据清理、数据整合、数据转换三个子阶段组成。在第二阶段，基于LRFM模型进行客户细分。在阶段3，基于product category-user矩阵提取关联规则。在阶段4中，完成user-item矩阵的改变。阶段5显示了基于CF的相似度计算。在阶段6中，根据人口统计特征对客户进行细分。在阶段7中，基于新的相似性函数来确定邻居。在最后阶段，推荐是根据用户的需求和特点量身定做的。在下文中，我们将对所有这些阶段进行详细说明。建议系统的总体框架如图1所示。</p>
<p><img src="http://images.yingwai.top/picgo/derf1.png" alt=""></p>
<center>
    <i>图1 建议的研究系统的总体架构</i>
</center>


<h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p>数据准备(也称为数据预处理)是RSS开发过程中不可或缺的一步，占整个RSS开发所需时间的60%-70%。此步骤包括数据清理、数据集成和数据转换三个阶段。</p>
<h3 id="数据清理"><a href="#数据清理" class="headerlink" title="数据清理"></a>数据清理</h3><p>数据清理过程包括完成缺失值、识别和消除离群值数据以及解决数据之间的冲突。此外，在此阶段，必须删除不相关或无用的字段或属性，如有必要，从初始数据集形成新的变量。在此阶段，将不完美的记录和信息不完整的客户从主数据集中剔除，数据集的记录从17,000条减少到15,386条，客户数量从2,542个减少到2,080个。为每个产品类别计算RFM变量。</p>
<h3 id="数据集成"><a href="#数据集成" class="headerlink" title="数据集成"></a>数据集成</h3><p>为了更好地理解数据，并对每个数据集中的数据进行更好的科学管理，数据集成(将两个或多个数据集合并集成在一起)是必要的，这是数据准备的第二阶段。在这一阶段，客户交易数据与他们的个人资料数据(年龄、性别、教育程度、婚姻状况和职业)集成在一起。</p>
<h3 id="数据转换"><a href="#数据转换" class="headerlink" title="数据转换"></a>数据转换</h3><p>在此阶段，必须将数据转换为适合数据挖掘和设计RS的不同形式。数据集中的字符串变量(如性别)将转换为数值变量和值。</p>
<h2 id="基于LRFM模型的分割"><a href="#基于LRFM模型的分割" class="headerlink" title="基于LRFM模型的分割"></a>基于LRFM模型的分割</h2><p>本研究采用两阶段聚类法，结合SOM(确定最佳聚类数)和K-Means(创建聚类)方法进行分割。</p>
<p>在此阶段，根据产品类别的RFM变量(每个产品类别的RFM变量的值分别计算)和L变量(客户关系的长度)进行客户细分。对于给定的客户，表1中给出了这些变量的样本，根据这些变量进行了细分。</p>
<p>在本研究中，将LRFM模型用于产品类别层面的客户细分有三个原因，包括以下几个方面：</p>
<ol>
<li>通过减少user-item矩阵中的客户数量，提高了该方法的生产率和效率，从而降低了矩阵的可扩展性和稀疏性问题。</li>
<li>这个模型不仅决定了顾客的价值，而且可以清楚地反映顾客的兴趣和偏好，例如，如果某一种产品的购买频率对于两个给定的顾客来说是相似的，可以推断这两个人对购买这两种商品的兴趣是一样的。M和R的变量也是以相同的方式推导出来的。</li>
<li>模型中的产品类别变量R涉及客户最近的品味和偏好，由于最近的购买更能反映客户当前的兴趣和偏好，它将提供更准确的推荐，更符合客户当前的兴趣。</li>
</ol>
<p><img src="http://images.yingwai.top/picgo/dert1.png" alt=""></p>
<center>
    <i>表1 基于LRFM模型的客户细分属性</i>
</center>



<h2 id="基于product-category-user矩阵的关联规则提取"><a href="#基于product-category-user矩阵的关联规则提取" class="headerlink" title="基于product category-user矩阵的关联规则提取"></a>基于product category-user矩阵的关联规则提取</h2><p>为了提取关联规则，本研究使用了Apriori算法。在此阶段，使用product category-user矩阵(客户从单个产品类别购买的次数)的交易数据在前一阶段的每个聚类的级别提取关联规则。提取的规则用于确定每个目标客户的前N个推荐产品类别的列表。推荐的每个产品类别的优先级取决于其规则的可信度和支持措施。信任度和支持度值越大的产品类别，推荐优先级越高。此阶段中提取的规则的输出(即每个目标客户的预测产品类别)将作为下一阶段的输入。产品类别级规则提取的目的是减少user-item矩阵中的产品数量，有效缓解矩阵的可扩展性和稀疏性问题。</p>
<h2 id="更改user-item矩阵"><a href="#更改user-item矩阵" class="headerlink" title="更改user-item矩阵"></a>更改user-item矩阵</h2><p>在CF系统中，user-item矩阵(包括购买/不购买项目的二进制数据或用户给予项目的分数)是关于购买偏好对客户进行聚类并确定目标客户的邻居的基础。然而，由于电子商务中商品种类繁多，该矩阵经常面临数据稀疏的问题。研究表明，推荐质量取决于user-item矩阵的密度。</p>
<p>为了使该矩阵更加密集，以这样的方式使用分段和关联规则阶段的结果，即在用于确定目标客户的邻居的user-item矩阵中，他或她将仅与他或她的集群中的用户进行比较，并且项目将限于为目标客户预测的项目。由于减少了用户数和项目数，缓解了可伸缩性问题，提高了RS的速度和准确性。</p>
<p>在他们的研究中，Lee等人。(2008)证明，最近进行的购买更能反映用户当前的偏好，最近添加到网站上出售的项目对用户更具吸引力。因此，基于表2，对于每个项目，考虑用户购买项目的时间(PT)和项目已经可供购买的时间(LT)(启动时间)的两个参数，并且改变user-item矩阵。</p>
<p><img src="http://images.yingwai.top/picgo/dert2.png" alt=""></p>
<center>
    <i>表2 基于时间信息更改user-item矩阵</i>
</center>





<p>为了确定PT和LT变量的得分，在这个改变的矩阵中，首先根据这两个参数的潜伏期将这两个参数分为五类。因此，PT参数的分数包括过去购买(分数1)、过去购买(分数2)、最近购买(分数3)、最近购买(分数4)和最近购买(分数5)。对于LT参数，得分类似。根据表3，在user-item矩阵中，对于用户给出的分数，使用组合分数。例如，对于(2，5)的组合，分数将等于7(5+2)。在计算混合得分时，这两个参数的权重都是相同的。</p>
<p><img src="http://images.yingwai.top/picgo/dert3.png" alt=""></p>
<center>
    <i>表3 对LT和PT参数进行评分</i>
</center>


<p>因此，创建了25(5×5)个双重组合，其中所有客户由55、54、53、…的组合表示。，11，其中，客户最好的类别是组合55(最近购买时间和最近上线时间的类别)和得分10，而客户最差的类别用11(最老的购买时间和最老的上线时间)表示，得分为2。根据这种评分方法，可以将客户划分为集群，并计算其相似度。创建这个新的user-item矩阵的目的是考虑用户随时间的喜好，从而提高推荐的准确性。</p>
<h2 id="基于CF的相似度计算"><a href="#基于CF的相似度计算" class="headerlink" title="基于CF的相似度计算"></a>基于CF的相似度计算</h2><p>在CF系统中，计算每个目标客户与其他客户之间的相似度的方法有很多。最流行的方法之一是使用皮尔逊相关系数，与其他传统的统计方法相比，它提供了最好的预测和推荐结果(Bobadilla等人)。(2012年)。在皮尔逊的相关方法中，使用公式(4)测量两个给定客户$u$和$u’$之间的相似性：</p>
<script type="math/tex; mode=display">
Sim(u, u') = \frac{\sum^n_{i=1}(r_{ui}-\bar{r}_u)(r_{u'i}-\bar{r}_{u'})}{\sqrt{\sum^n_{i=1}(r_{ui}-\bar{r}_u)^2\sum^n_{i=1}(r_{u'i}-\bar{r}_{u'})^2}} \tag{4}</script><p>在这个等式中，$n$是两个用户得分的项目数，$i$是两个用户得分的项目集合，$r_{ui}$是用户$u$给出的项目$i$的得分，$\bar{r}_u$是用户的平均得分。在本研究中，使用基于新的user-item矩阵的Pearson相关方法，计算客户偏好之间的相似度，然后将该阶段的结果(基于CF的相似度)用于预测客户的偏好。</p>
<h2 id="基于人口统计属性的细分"><a href="#基于人口统计属性的细分" class="headerlink" title="基于人口统计属性的细分"></a>基于人口统计属性的细分</h2><p>在这个阶段，使用两阶段聚类方法，根据年龄、性别、教育程度、婚姻状况和职业等人口统计变量对客户进行细分，然后计算他们的簇内相似度。因此，如果两个客户具有相似的人口统计属性，他们对某些项目的态度会相似，这在CF方法中没有反映出来。在本研究中，基于这些变量进行客户细分的目的是为了更好地选择新用户的邻居，通过克服冷启动问题有效改善推荐过程。</p>
<h2 id="基于新的相似度函数确定邻域"><a href="#基于新的相似度函数确定邻域" class="headerlink" title="基于新的相似度函数确定邻域"></a>基于新的相似度函数确定邻域</h2><p>在此阶段，将前一阶段得到的聚类相似度(基于人口统计属性)和CF相似度合并到一个新的相似度函数中，以缓解冷启动问题。因为在用户最近加入系统的情况下，新的相似性函数并不完全依赖于user-item矩阵。通过该函数可以得到相似度。相似度函数(Hsim)通过簇内相似度(ClusSim)和基于CF的相似度(Sim)的加权和计算如下(5)：</p>
<script type="math/tex; mode=display">
Hsim(u,u')=(1-\alpha) \times Sim(u,u') + \alpha \times clusSim(u,u') \tag{5}</script><p>在利用上述公式计算客户之间的相似度后，选择与目标客户相似度最高的K个客户作为该客户的邻居。</p>
<h2 id="提供推荐"><a href="#提供推荐" class="headerlink" title="提供推荐"></a>提供推荐</h2><p>在识别前一阶段目标客户的邻居后，通过计算这些邻居给出的得分的加权平均，预测目标客户的偏好。基于公式(6)，利用邻居得分的加权平均值$(r<em>{u’,i})$，预测用户$u$对于项目$i$，$(r</em>{u,i})$的得分如下：</p>
<script type="math/tex; mode=display">
r_{u,i} = \frac{1}{n} \sum_{u' \in U} Hsim(u,u') \times r_{u',i} \tag{6}</script><p>$U$表示评价项目$i$的用户$u$的邻居。用户$u$和$u’$，$(r<em>{u’,i})$越相似，将以更高的加权比率用于预测$(r</em>{u,i})$。最后，将预测评分最高的$N$个项目推荐给目标用户。</p>
<h1 id="评估提出的推荐方法"><a href="#评估提出的推荐方法" class="headerlink" title="评估提出的推荐方法"></a>评估提出的推荐方法</h1><p>为了评估结果，将使用的数据集分为训练集和测试集。训练数据用于推荐系统，测试数据用于评估系统结果的准确性。训练数据涵盖2015年1月25日至11月16日期间，包括2015年11月16日至2016年1月21日期间交易的测试数据。</p>
<p><img src="http://images.yingwai.top/picgo/dert4.png" alt=""></p>
<center>
    <i>表4 传统CF推荐系统与提出的CF推荐系统的评价方法比较</i>
</center>



<p>在此阶段，将比较所提出的方法与传统CF推荐系统在不同N值(推荐项目数)下以及基于使用精确度、覆盖率和F度量的测试数据的结果的准确性。</p>
<p>基于SOM算法，基于LRFM变量的最优聚类数为6个，基于人口统计变量的最优聚类数为5个。表4列出了基于不同N值的评估措施的传统方法和提出的方法的准确性。对于所有这些方法，参数K(邻居数目)的值都等于40。</p>
<p>根据表4的结果，在每个准则下，所提出的系统都比传统系统具有更好的性能。事实上，传统系统(基于F-Measure)在5个推荐项目上的准确率为43.27%，而在所提出的系统中，该准确率为55.59%。在20个推荐项目中，传统方法的准确率为62.43%，其推荐系统的准确率为81.4%。在30个项目中，传统系统的准确率为68.54%，在提出的系统中，准确率为96.59%，表明该系统在30个项目上的准确率比传统系统提高了约28%。</p>
<p><img src="http://images.yingwai.top/picgo/derf2.png" alt=""></p>
<center>
    <i>图2 比较传统方法和建议方法在不同N值下的性能(颜色请参见在线版本)</i>
</center>


<p><img src="http://images.yingwai.top/picgo/derf3.png" alt=""></p>
<center>
    <i>图3 评估不同K值对建议方法性能的影响(有关颜色，请参阅在线版本)</i>
</center>


<p>在此基础上，将推荐项数增加到N=30，两种方法的性能都有所提高。然而，增加数据数量并不会导致结果准确性的显著变化和提高。因此，将推荐项目的数量增加到某个阈值可以提高建议推荐的质量；该阈值等于N=30。为了更好地比较这两种方法的性能，图2描述了F-Measure准则的变化趋势。</p>
<p>为了评估参数K的变化在所建议的研究方法的性能中的作用，图3中描述了三个不同N值的F测量值。基于图3，对于N参数的所有三个值，将邻居数增加到K=40将提高所提出的方法的性能。但是，进一步增加该参数会降低方法的精确度，从而对推荐质量产生负面影响。</p>
<h1 id="结论及建议"><a href="#结论及建议" class="headerlink" title="结论及建议"></a>结论及建议</h1><p>本研究从冷启动、可扩展性、稀疏用户-项目矩阵以及用户兴趣的变化等方面考虑了电子商务中RS的基本和常见限制，以期解决或缓解这些限制。因此，为了克服这些局限性，人们利用一套数据挖掘方法，提出了一个综合性的电子商务推荐系统。综合研究结果，该系统的性能优于传统的CF系统。研究的总体结果表明，与传统系统相比，新的推荐系统的准确率有了显着的提高。因此，该系统对30个项目的推荐准确率比传统系统提高了约28%。此外，根据结果，系统在推荐30个项目时的准确率达到了最高水平；因此，当推荐项目数量超过30个时，传统系统和所提出的系统的准确率都没有明显的变化，因此，当推荐项目的数量超过30时，传统系统和本文提出的系统的准确率都没有明显的变化。例如，当推荐50个项目时，传统系统的准确率为68/84，新建议系统的准确率为94/45，这表明推荐项目的数量从30个增加到50个，准确率略有下降。因此，建议推荐项目的最大值为30个，因为这可能会导致计算和项目选择的复杂性。下面简要介绍一下研究成果和研究创新之处：</p>
<ul>
<li>在RS的开发过程中，在产品类别层面采用基于LRFM变量的细分方法，可以改进客户间相似度的确定方法，从而更准确、更恰当地选择目标客户的邻居。由于LRFM模型是识别客户购买行为和反映其偏好的合适方法之一，因此基于该模型在产品类别层次上进行细分，可以区分客户在购买产品类别时的偏好，并将具有相似品味和兴趣的客户归入同一聚类。例如，如果两个给定客户购买商品的频率相似，则可以得出结论，这两个客户对购买该产品类别中的商品表现出相同的兴趣水平。R和M的变量可以以相同的方式推断。另一方面，在产品类别水平上的变量R考虑了客户的利益，并且由于最近的购买更能反映客户的偏好，这将导致更准确的推荐。由于用户的喜好会随着时间的推移而改变，因此RS提供与客户当前兴趣相容的项目的能力会受到影响，这有时会导致推荐与客户当前喜好完全无关的项目。此外，在用户-项目矩阵中使用该分割的结果将降低矩阵的维数，将缓解KNN算法的稀疏矩阵和可伸缩性问题，这导致KNN算法的性能提高，因为在这种情况下，目标客户仅与用户-项目矩阵中他或她自己的集群内的客户相比较。因此，通过减少矩阵中的用户数，提高了KNN算法的速度和精度，改善了RS的整体性能。根据这一讨论和研究结果，可以安全地得出结论，使用LRFM模型可以加快提供建议的过程，并允许创建符合客户当前利益的准确建议。</li>
<li>基于product category-user矩阵的关联规则提取提高了推荐方法的性能。这些规则通过评估产品类别之间的关系，预测他们购买的概率，并向目标客户推荐一套产品类别。将user-item矩阵限制为这些推荐产品类别中的项将降低矩阵的维数，有效地缓解了KNN算法的稀疏矩阵和可伸缩性问题。在该方法中，仅从从这些规则获得的产品类别中向目标客户提供推荐项目。结果表明，该方法通过减少矩阵中的项数，提高了KNN算法的速度和精度，有效地改善了RS的整体性能，研究结果表明该方法具有较好的性能。</li>
<li>在RS的设计过程中考虑商品的购买时间以及它们在电子商务网站上的上线时间，将会提高推荐的质量。换言之，比起过去的购买，多留意顾客最近的购买，以及比起其他商品，多留意最近在网站上推出的商品，便可以更了解顾客现时的喜好，帮助他们找到更吸引人、更合意的商品。考虑到这些问题，RS才能更好地实现他们的最终目标，即向适当的个人提供适当的物品。在本研究中，这两个变量被用来创建一个新的用户-项目矩阵，并在表4和图2的基础上取得了很好的结果。</li>
<li>为了更好地使推荐与用户的喜好相一致，人口特征的作用是无可否认的，因为大多数个人购买都取决于他们的年龄、性别、教育水平等。当它与其他变量如购买行为变量(包括LRFM和user-item矩阵)一起考虑时，这一作用更为显著，这是本研究通过定义一个新的相似性函数得出的。</li>
</ul>
<p>考虑到上述问题，本研究通过关注这些问题，利用各种数据挖掘方法，试图改进和完善以往关于CF系统的研究，以期提出一个准确率和性能最高的电子商务推荐系统。</p>
<p>以下是对未来研究的一些建议：</p>
<ol>
<li>将CF方法和CBF方法相结合，开发了所提出的模型。</li>
<li>研究基于个性特征的客户细分、其他人口统计变量(如地址和收入)以及其他行为变量(如购买商品的总数)对建议系统性能的影响。</li>
<li>将所提出的方法应用于其他行业的数据集，以提供更强的通用性。</li>
<li>使用大数据对提出的模型进行进一步评估，这些数据可以从大型网店获得。</li>
</ol>
<p>与过去的大多数研究一样，这项研究在实施和评估方面存在一些局限性，包括：</p>
<ol>
<li>使用的数据集的时间段限制为一年；</li>
<li>研究数据仅限于一家网上服装店；</li>
<li>正在研究的商店顾客数量有限。</li>
</ol>
]]></content>
      <categories>
        <category>Papers</category>
      </categories>
      <tags>
        <tag>数据挖掘</tag>
        <tag>推荐系统</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记 ABY3: A Mixed Protocol Framework for Machine Learning</title>
    <url>/2020/06/18/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-ABY3-A-Mixed-Protocol-Framework-for-Machine-Learning/</url>
    <content><![CDATA[<p><em>Payman Mohassel, Peter Rindal</em></p>
<p>CCS 2018</p>
<p><a href="https://dl.acm.org/doi/10.1145/3243734.3243760" target="_blank" rel="noopener">https://dl.acm.org/doi/10.1145/3243734.3243760</a></p>
<a id="more"></a>
<p><img src="http://images.yingwai.top/picgo/ABY3.png" alt=""></p>
<h1 id="本文贡献"><a href="#本文贡献" class="headerlink" title="本文贡献"></a>本文贡献</h1><ul>
<li>新的共享十进制数近似定点乘法协议；</li>
<li>提出了三方的ABY框架，其中许多转换都是基于新技术，并在本文中首次进行了设计和优化；</li>
<li>提高了矩阵乘法的效率；</li>
<li>有效的分段多项式函数评估。</li>
</ul>
<h1 id="计算模型"><a href="#计算模型" class="headerlink" title="计算模型"></a>计算模型</h1><p>本文采用三方的重复共享，即把一个数 $x$ 拆成三份，各方都拥有三份中的两份，下面是ABY三种共享形式：</p>
<p><img src="http://images.yingwai.top/picgo/aby3ppt4.png" alt=""></p>
<p>在这种设置下，三方交互式地计算函数 $f(x)$，本篇文章主要针对机器学习中的算法。</p>
<p><img src="http://images.yingwai.top/picgo/aby3ppt2.png" alt=""></p>
<h2 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h2><p>在秘密共享的情况下，计算两个数 $[![x]!], [![y]!]$ 的和 $[![z]!] = [![x]!] + [![y]!]$ 比较简单，各方直接将其对应的份额在本地相加即可，不需要交互：</p>
<script type="math/tex; mode=display">
z_i = x_i + y_i</script><h2 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h2><p>计算两个数 $[![x]!], [![y]!]$ 的积 $[![z]!] = [![x]!] * [![y]!]$ 则复杂一点。在两方共享的情况下，需要借助额外的乘法三元组来计算，开销非常大。而三方下的复制共享这时候就起作用了，将 $xy$ 展开可以观察到有九项，每一项是两个份额的乘积，因此每一方只需要计算其可以计算的九项中的其中三项即可保持结果 $z$ 继续在三方中是加法共享的。计算完成后再把对应的结果发送给另一方，即可保持 $z$ 是重复共享的。</p>
<p><img src="http://images.yingwai.top/picgo/aby3ppt3.png" alt=""></p>
<p>可以看到乘法操作只包含了本地操作和各方各一次发送，开销比两方的情况下小很多。</p>
<h1 id="本文的框架"><a href="#本文的框架" class="headerlink" title="本文的框架"></a>本文的框架</h1><h2 id="定点运算"><a href="#定点运算" class="headerlink" title="定点运算"></a>定点运算</h2><p>定点值定义为使用二进制补码表示的一个 $k$ 位整数，其中底部 $d$ 位表示小数，即对于正值，位 $i$ 表示 $2$ 的 $(i−d)$ 次方。由于预计结果将保持在 $2^k$ 以下，因此可以使用相应的整数运算来执行加法和减法。乘法也可以以相同的方式执行，但是十进制位的数量加倍，因此必须除以 $2^d$ 以保持 $d$ 个十进制位不变。</p>
<p>在得到乘法结果后，各方可以直接把本地的份额后 $d$ 位截断，但这样会<strong>把原本份额相加的进位也截断了</strong>，导致截断后重构出来的 $\tilde{x} \neq x$。作者参考了<a href="https://yuyingwai.cn/2020/06/17/论文笔记-SecureML-A-System-for-Scalable-Privacy-Preserving-Machine-Learning/" target="_blank" rel="noopener">SecureML</a>中的两方协议，给出了他们自己的在三方下的实现：</p>
<p><img src="http://images.yingwai.top/picgo/aby3f1.png" alt=""></p>
<p>一开始作者的想法是把 $x’$ 的截断 $x = x’/2^d$ 拆成 $[![x]!] := (x_1, x_2, x_3) = (x’_1/2^d, (x’_2 + x’_3)/2^d-r, r)$，其中 $r$ 是 $\mathbb{Z}^k_2$ 中的随机数，但发现这样做有两轮通信的限制，于是进一步优化得到上面的协议。</p>
<h2 id="矢量化乘法"><a href="#矢量化乘法" class="headerlink" title="矢量化乘法"></a>矢量化乘法</h2><p>两个向量作内积定义为 $\vec{x} \cdot \vec{y} := \sum^n_{i=1} x_i y_i$。在本文的背景下计算内积，朴素的做法是对两个向量的每一个元素都执行一次乘法+截断协议，但这样需要通信 $O(n)$ 次通信。</p>
<p>于是作者进行了优化：各方只需要在本地将两个向量 $\vec{x},\vec{y}$ 的 $n$ 个分量计算相乘的份额，然后把这 $n$ 个积相加就得到了 $z’$ 的3/3共享，最后执行上一小节中的截断协议将 $[![z’]!]$ 截断为 $[![z]!]:= (z’+r’)/2^d - [![r]!]$。</p>
<p>这样做不仅可以减少通信开销，而且误差也比执行 $n$ 次乘法+截断协议低（总共只进行了一次截断，相对于整体内积的误差为 $2^{-d}$）。</p>
<h2 id="共享转换"><a href="#共享转换" class="headerlink" title="共享转换"></a>共享转换</h2><p>机器学习中有很多不同的函数，而不同的函数有适合其计算的不同共享方式：算术共享适合计算乘法和加法，而二进制共享适合计算非线性函数、最大池化以及平均值等。两方的情况可以参考<a href="https://yuyingwai.cn/2020/06/11/论文笔记-ABY-A-Framework-for-Efficient-Mixed-Protocol-Secure-Two-Party-Computation/" target="_blank" rel="noopener">ABY</a>，本文给出了三方下的共享转换。</p>
<p><img src="http://images.yingwai.top/picgo/aby3ppt6.png" alt=""></p>
<h3 id="位分解"><a href="#位分解" class="headerlink" title="位分解"></a>位分解</h3><p>$[![x]!]^A \rightarrow [![\vec{x}]!]^B$</p>
<p>最基础的想法是各方将其份额 $[![x]!]^A = (x_1, x_2, x_3)$ 输入到布尔电路中计算它们的和，但可以进行优化。观察到 $[![x]!]^A = (x_1, x_2, x_3)$ 可以转换为 $[![x_1]!]^B := (x_1,0,0), [![x_2]!]^B := (0,x_2,0), [![x_3]!]^B := (0,0,x_3)$ 而不需要交互。</p>
<p>这里没太看懂，用到了各种加法器。作者首先观察到 $x_1 + x_2 + x_3$ 的计算可以减少成执行 $k$ 个相互独立的全加器计算 $2c+s$：$\mathsf{FA}(x_1[i], x_2[i], x_3[i-1]) \rightarrow (c[i], s[i])$，其中 $i \in {0,…,k-1}$。然后再使用平行前缀加法器计算 $2[![c]!]^B + [![s]!]^B$。对于半诚实的情况，$P_2$ 可以提供 $(x_1 + x_2)$ 作为输入计算 $[![x]!]^B := [![x_1 + x_2]!]^B + [![x_3]!]^B$。</p>
<h3 id="位提取"><a href="#位提取" class="headerlink" title="位提取"></a>位提取</h3><p>$[![x]!]^A \rightarrow [![x[i]]!]^B$</p>
<p>跟上面的情况类似，只是这次是提取比特串中的单一比特，把上一小节的电路中不必要的门去掉即可。</p>
<h3 id="位组合"><a href="#位组合" class="headerlink" title="位组合"></a>位组合</h3><p>$[![x]!]^B \rightarrow [![x]!]^A$</p>
<p>用到的还是与上面类似的电路，只是操作顺序有点变化。首先 $P_1, P_2$ 输入一个随机共享 $[![-x_2]!]^B$，$P_2, P_3$ 同样输入一个随机共享 $[![-x_3]!]^B$，这两个将会是最终的转换结果的部分。这里可以利用两方间的密钥作为随机种子来生成随机数。</p>
<p>然后三方计算 $\mathsf{FA}([![x[i]]!]^B, [![-x_2[i]]!]^B, [![-x_3[i]]!]^B) \rightarrow ([![c[i]]!]^B, [![s[i]]!]^B)$，其中 $i \in {0,…,k-1}$。然后使用并行前缀加法器计算 $[![x_1]!]^B := 2[![c]!]^B + [![s]!]^B$。同样在半诚实下可以进一步优化，$P_2$ 提供 $(-x_2, -x_3)$ 作为输入计算 $[![x_1]!]^B := [![x]!]^B + [![-x_2 - x_3]!]^B$，$x_1$ 对 $P_1, P_3$ 开放，最后的共享定义为 $[![x]!]^A := (x_1, x_2, x_3)$。</p>
<h3 id="位注入"><a href="#位注入" class="headerlink" title="位注入"></a>位注入</h3><p>$[![x]!]^B \rightarrow [![x]!]^A$</p>
<p>当需要将以二进制共享方式编码的单个位 $x$ 提升为算术共享 $[![x]!]^A$ 时，通常会出现另一种特殊情况，参考3.4。</p>
<h3 id="联合姚输入"><a href="#联合姚输入" class="headerlink" title="联合姚输入"></a>联合姚输入</h3><p>在姚共享中，对于一个比特 $x$，$P<em>1$（评估者）拥有 $k^x</em>{\mathsf{x}}$ 而另外两方拥有 $k^0<em>{\mathsf{x}} \in {0,1}^{\kappa}$ 和一个全局随机串 $\Delta \in {0,1}^{\kappa}$ 使得 $k^1</em>{\mathsf{x}} := k^0<em>{\mathsf{x}} \oplus \Delta$。转换到姚共享和从姚共享转换的一个有用的原语是双方提供双方都知道的输入的能力。比如说 $P_1, P_2$ 知道一个比特 $x$，想生成共享 $[![x]!]^Y$。在半诚实设置中比较简单，$P_2$ 可以本地生成并发送 $[![x]!]^Y$ 给 $P_1$。但是在恶意设置下 $P_1$ 需要在不知道 $\Delta$ 的情况下验证 $[![x]!]^Y$ 正确地将 $x$ 编码。于是 $P_3$ 可以帮助 $P_1$ 进行验证：$P_2, P_3$ 同时发送 $k^0</em>{\mathsf{x}}$ 和 $k^1_{\mathsf{x}}$ 的承诺方案给 $P_1$ ，后者可以检查两个承诺是否一致以及是否能打开承诺。</p>
<h3 id="姚共享到二进制共享"><a href="#姚共享到二进制共享" class="headerlink" title="姚共享到二进制共享"></a>姚共享到二进制共享</h3><p>$[![x]!]^Y \rightarrow [![x]!]^B$</p>
<p>在两方的情况下，密钥的最低有效位（置换位）形成 $x$ 的两方共享，即 $x \oplus p<em>{\mathsf{x}} = k^x</em>{\mathsf{x}}[0]$，其中 $p<em>{\mathsf{x}} = k^0</em>{\mathsf{x}}[0]$。三方下 $P<em>3$ 也知道 $p</em>{\mathsf{x}}$，首先 $P<em>1,P_2$ 本地生成随机比特 $r$ 然后 $P_1$ 将 $k^x</em>{\mathsf{x}}[0] \oplus r = x \oplus p<em>{\mathsf{x}} \oplus r$ 发送给 $P_3$。于是就完成了共享的转换，原本的共享被转换为 $[![x]!]^B = (x \oplus p</em>{\mathsf{x}} \oplus r, r, p_{\mathsf{x}})$。</p>
<p>在恶意的设置下，需要确认 $P<em>1$ 发送给 $P_3$ 的 $x \oplus b \oplus r$ 中的 $b = p</em>{\mathsf{x}}$。首先 $P<em>1, P_2$ 选取 $k^r</em>{\mathsf{r}} \leftarrow {0,1}^{\kappa}$，后者发送 $k^0<em>{\mathsf{r}} := k^r</em>{\mathsf{r}} \oplus (r \Delta)$ 给 $P<em>3$。然后 $P_2,P_3$ 发送承诺 $C_0 = \mathsf{Comm}(k^{p</em>{\mathsf{x}}}<em>{\mathsf{y}}), C_1 = \mathsf{Comm}(k^{\overline{p</em>{\mathsf{x}}}}<em>{\mathsf{y}})$ 给 $P_1$，其中 $k^0</em>{\mathsf{y}} := k^0<em>{\mathsf{x}} \oplus k^0</em>{\mathsf{r}}$。$P<em>1$ 发送 $k^{x \oplus r}</em>{\mathsf{y}} := k^x<em>{\mathsf{x} } \oplus k^r</em>{\mathsf{r}}$ 给 $P<em>3$，后者验证其是否在集合 ${k^0</em>{\mathsf{y}}, k^1<em>{\mathsf{y}}}$ 中。$P_1$ 同样验证承诺 $C</em>{p<em>{\mathsf{x}} \oplus x \oplus r}$ 是否可以打开为 $k^{x \oplus r}</em>{\mathsf{y}}$ 以及 $C<em>0, C_1$ 是否一致。注意到 $x \oplus p</em>{\mathsf{x}} = k^x<em>{\mathsf{x}}[0]$，于是三方就可以计算共享 $[![x]!]^B = (x \oplus p</em>{\mathsf{x}} \oplus r, r, p<em>{\mathsf{x}})$。观察到 $P_3$ 将 $x \oplus p</em>{\mathsf{x}} \oplus r$ 计算为 $k^{x \oplus r}<em>{\mathsf{y}}[0] \oplus p</em>{\mathsf{r}}$。</p>
<h3 id="二进制共享到姚共享"><a href="#二进制共享到姚共享" class="headerlink" title="二进制共享到姚共享"></a>二进制共享到姚共享</h3><p>$[![x]!]^B \rightarrow [![x]!]^Y$</p>
<p>设 $[![x]!]^B = (x_1, x_2, x_3)$。各方使用前面讨论的程序共同输入份额 $[![x_1]!]^Y,[![x_2]!]^Y,[![x_3]!]^Y$ 作为联合姚输入。然后可以使用乱码电路来计算最终份额，该电路计算三个值的异或 $[![x]!]^Y := [![x_1]!]^Y \oplus [![x_2]!]^Y \oplus [![x_3]!]^Y$ 。使用Free-XOR技术，这不需要三方之间的任何通信，并且可以由 $P_1$ 本地计算。在半诚实的设置中，可以基于 $P_2$ 知道 $x_2$ 和 $x_3$ 这一事实来进一步优化。因此，它们可以本地计算 $x_2 \oplus x_3$，并将 $[![x_2 \oplus x_3]!]^Y$ 发送给 $P_1$，后者本地计算 $[![x]!]^Y := [![x_1]!]^Y \oplus [![x_2 \oplus x_3]!]^Y$。</p>
<h3 id="姚共享到算术共享"><a href="#姚共享到算术共享" class="headerlink" title="姚共享到算术共享"></a>姚共享到算术共享</h3><p>$[![x]!]^Y \rightarrow [![x]!]^A$</p>
<p>自然的想法是将姚共享先转换成二进制共享，再用位组合中的方法转换为算术共享。作者在这里也给出了优化方案，还是使用到了乱码电路，对这部分看得不是很懂。</p>
<h3 id="算术共享到姚共享"><a href="#算术共享到姚共享" class="headerlink" title="算术共享到姚共享"></a>算术共享到姚共享</h3><p>$[![x]!]^A \rightarrow [![x]!]^Y$</p>
<p>各方联合输入 $[![x]!]^A = (x_1, x_2, x_3)$ 的共享 $[![x_1]!]^Y,[![x_2]!]^Y,[![x_3]!]^Y$。然后使用一个乱码电路生成 $[![x]!]^Y := [![x_1]!]^Y + [![x_2]!]^Y + [![x_3]!]^Y$。</p>
<h2 id="计算-a-A-b-B-ab-A"><a href="#计算-a-A-b-B-ab-A" class="headerlink" title="计算 $[![a]!]^A [![b]!]^B = [![ab]!]^A$"></a>计算 $[![a]!]^A [![b]!]^B = [![ab]!]^A$</h2><p>虽然将共享转换后再计算上面的公式也可以，但作者在这里给出了更有效的特定协议。在训练Logistic回归和神经网络模型中通常用于逼近非线性激活函数的分段线性或多项式函数的计算需要重复该操作。</p>
<h3 id="半诚实"><a href="#半诚实" class="headerlink" title="半诚实"></a>半诚实</h3><h4 id="三方OT"><a href="#三方OT" class="headerlink" title="三方OT"></a>三方OT</h4><p>作者首先给出了三方下的不经意传输协议，在两方的OT中有两个角色：sender和receiver。在这里作者添加了一个<em>helper</em>的角色，他不会收到输出且知道receiver的选择位。这个对于(sender, receiver, helper)的功能记为 $((m_0, m_1),c, c) \mapsto (\perp, m_c, \perp)$。</p>
<p>首先sender和helper选取随机串 $w_0, w_1 \leftarrow {0,1}^k$。sender将消息盲化：$m_0 \oplus w_0, m_1 \oplus w_1$ 然后发送给receiver。helper知道receiver希望收到消息 $m_c$，这样helper可以发送 $w_c$ 给receiver来让后者重构 $m_c$。</p>
<h4 id="计算-a-b-B-ab-A"><a href="#计算-a-b-B-ab-A" class="headerlink" title="计算 $a[![b]!]^B = [![ab]!]^A$"></a>计算 $a[![b]!]^B = [![ab]!]^A$</h4><p>最简单的一种情况是 $P<em>1$ 知道的一个公共值 $a \in \mathbb{Z}</em>{2^k}$ 和一个共享比特 $b \in {0,1}$ 的乘法。首先 $P<em>3$ (sender)选取随机数 $r \leftarrow \mathbb{Z}</em>{2^k}$ 和定义两个消息 $m<em>i := (i \oplus b_1 \oplus b_3)a - r$，其中 $i \in {0,1}$。$P_2$ (receiver)为了学习消息 $m</em>{b<em>2} = (b_2 \oplus b_1 \oplus b_3)a - r = ba - r$，定义他的输入为 $b_2$。注意到 $P_1$ (helper)也知道 $b_2$，因此这里可以使用前面提到的三方OT。然后三方本地生成重复0共享 $(s_1, s_2, s_3)$ 来计算 $[![c]!] = [![ab]!] = (s_1 + r, ab-r+s_3, s_3)$。但是为了令这个2/3秘密共享合法，$c_2 = ab - r + s_3$ 要发送给 $P_1$，导致需要总共两轮通信。或者可以(并行地)重复执行三方OT过程，$P_3$ 担任sender输入 $(i+b_2+b_3)a - r + s_3$，其中 $i \in {0,1}$。于是 $P_1$ (receiver)输入 $b_2$，在第一轮中获知消息 $c_2$（非 $m</em>{b_2}$），总共 $6k$ 比特和 $1$ 轮通信。</p>
<h4 id="计算-a-A-b-B-ab-A-1"><a href="#计算-a-A-b-B-ab-A-1" class="headerlink" title="计算 $[![a]!]^A [![b]!]^B = [![ab]!]^A$"></a>计算 $[![a]!]^A [![b]!]^B = [![ab]!]^A$</h4><p>在半诚实下，并行地执行两次 $a[![b]!]^B = [![ab]!]^A$ 过程就足够了。关键在于观察到上述计算中的 $a$ 不必是公开的。也就是说，$P_1$ 可以私下选择 $a$ 的值。利用这一点，可以观察到表达式可以写成 $[![a]!][![b]!]^B = a_1[![b]!]^B + (a_2 + a_3)[![b]!]^B$。$P_1$ 充当第一次的sender，$P_3$ 充当第二次的sender。每一方总共在 $1$ 轮上传送 $4k$ 比特。</p>
<h3 id="恶意"><a href="#恶意" class="headerlink" title="恶意"></a>恶意</h3><h4 id="计算-a-b-B-ab-A-1"><a href="#计算-a-b-B-ab-A-1" class="headerlink" title="计算 $a[![b]!]^B = [![ab]!]^A$"></a>计算 $a[![b]!]^B = [![ab]!]^A$</h4><p>因为 $P_1$ 可以任意选择他输入到OT的值 $a$，所以半诚实方法在恶意设置下不适用。为了避开这一点，作者在这里先执行对 $b$ 的<em>位注入</em>。即计算 $[![b]!]^B \rightarrow [![b]!]^A$ 然后 $a[![b]!]^A = [![ab]!]^A$。在3.3节中提到，各方可以在本地计算共享 $[![b_1]!]^A, [![b_2]!]^A, [![b_2]!]^A$，其中 $[![b]!]^B = (b_1, b_2, b_3)$。现在可以通过计算 $[![b_1 \oplus b_2]!]^A = [![d]!]^A :=$ $[![b_1]!]^A + [![b_2]!]^A - 2[![b_1]!]^A[![b_2]!]^A$ 和 $[![b]!]^A := [![d \oplus b_3]!]^A$ 在算术电路中模拟这些值的异或。然后可以将最终结果计算为 $[![ab]!]^A := a[![b]!]^A$，其中每一方用 $a$ 去乘以自己 $b$ 的份额。</p>
<h4 id="计算-a-A-b-B-ab-A-2"><a href="#计算-a-A-b-B-ab-A-2" class="headerlink" title="计算 $[![a]!]^A [![b]!]^B = [![ab]!]^A$"></a>计算 $[![a]!]^A [![b]!]^B = [![ab]!]^A$</h4><p>同样，这里可以重复位注入过程，将 $[![b]!]^B$ 转换为 $[![b]!]^A$，然后使用乘法协议计算 $[![a]!]^A[![b]!]^A$。</p>
<h2 id="多项式分段函数"><a href="#多项式分段函数" class="headerlink" title="多项式分段函数"></a>多项式分段函数</h2><p>设 $f<em>1,…,f_m$ 表示具有公共系数的多项式以及有 $-\infty = c_0 &lt; c_1 &lt; … &lt; c</em>{m-1} &lt; c<em>m = \infty$ 使得 $c</em>{i-1}&lt;x \leq c<em>i$ 时 $f(x) = f_i(x)$。本文的方法是先计算向量 $b_1,…,b_m \in {0,1}$ 的秘密共享值使得 $b_i = 1 \Leftrightarrow c</em>{i-1} &lt; x \leq c_i$，然后 $f$ 可以计算为 $f(x) = \sum_i b_i f_i(x)$。</p>
<p><img src="http://images.yingwai.top/picgo/aby3ppt5.png" alt=""></p>
<p>比如说要比较 $[![x]!]$ 与 $c$ 的大小，可以看成提取 $[![x-c]!]$ 的最高有效位(MSB)（为1时 $x-c&lt;0$）。这里可以对 $[![x-c]!]$ 使用5.3中的位提取来获得二进制共享 $[![b]!]^B := [![\mathsf{msb}(x-c)]!]^B$。</p>
<p>每个 $f<em>i$ 函数被表示为多项式 $f_i([![x]!]) = a</em>{i,j}[![x]!]^j + … + a<em>{i,1}[![x]!] + a</em>{i,0}$，其中所有的 $a<em>{i,l}$ 都是公知的常数。当 $f_i$ 为0次多项式时，使用3.4中的技术可以将计算 $b_if_i([![x]!])$ 优化为 $a</em>{i,0}[![b]!]^B$。另外当 $f<em>i$ 的系数为整数时，给定 $[![x]!]^l$，$a</em>{i,l} [![x]!]^l$ 的计算可以在本地进行。但是当 $a_{i,j}$ 有非零小数时，将按照3.1的方法执行交互式截断。</p>
<h1 id="应用到机器学习"><a href="#应用到机器学习" class="headerlink" title="应用到机器学习"></a>应用到机器学习</h1><p>作者还给出了本文框架分别在线性回归、逻辑回归以及神经网络中的应用。</p>
<h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><p><img src="http://images.yingwai.top/picgo/aby3ppt7.png" alt=""></p>
<p>线性回归是比较简单的一种模型，前向运算和更新权重都只包含了加法和乘法操作，因此只要利用前面提到的加法和乘法协议就可以完成一个线性回归模型的训练。</p>
<h2 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h2><p><img src="http://images.yingwai.top/picgo/aby3ppt8.png" alt=""></p>
<p>逻辑回归是在线性回归的基础上增加了一个Sigmoid函数，因为在秘密共享的情况下计算指数函数很困难，因此可以定义一个近似函数或用多项式去逼近。文中3.5节给出了计算此类函数的方法，这里近似函数可以使用<a href="https://yuyingwai.cn/2020/06/17/论文笔记-SecureML-A-System-for-Scalable-Privacy-Preserving-Machine-Learning/" target="_blank" rel="noopener">SecureML</a>中定义的：</p>
<script type="math/tex; mode=display">
f(x) = \left\{ \begin{array}{lcl}0, & \mbox{if} & x < - \frac{1}{2} \\x + \frac{1}{2}, & \mbox{if} & - \frac{1}{2} \leq x \leq \frac{1}{2} \\1, & \mbox{if} & x > \frac{1}{2}\end{array}\right.</script><p><img src="http://images.yingwai.top/picgo/smlf5.png" alt=""></p>
<h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><p><img src="http://images.yingwai.top/picgo/aby3ppt9.png" alt=""></p>
<p>一个神经网络由很多个神经元组成，每一个神经元可以看成是与逻辑回归计算一致的单元，只是最后的非线性函数不一定是Sigmoid函数（替换成ReLU）。</p>
]]></content>
      <categories>
        <category>Papers</category>
      </categories>
      <tags>
        <tag>MPC</tag>
        <tag>PPML</tag>
        <tag>Secret Sharing</tag>
        <tag>Neural Network</tag>
        <tag>Linear Regression</tag>
        <tag>Logistic Regression</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记 High-Throughput Semi-Honest Secure Three-Party Computation with an Honest Majority</title>
    <url>/2020/06/10/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-High-Throughput-Semi-Honest-Secure-Three-Party-Computation-with-an-Honest-Majority/</url>
    <content><![CDATA[<p><em>Toshinori Araki, Jun Furukawa, Yehuda Lindell, Ariel Nof, Kazuma Ohara</em></p>
<p>CCS 2016</p>
<p><a href="https://dl.acm.org/doi/10.1145/2976749.2978331" target="_blank" rel="noopener">https://dl.acm.org/doi/10.1145/2976749.2978331</a></p>
<a id="more"></a>
<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>在这篇文章中，作者描述了一个新的信息论协议(和一个计算安全的变体)，用于诚实多数的安全三方计算。该协议的计算量和通信量非常小；对于布尔电路，每一方只为每个与门发送一位(对于异或门则不发送任何内容)。本文的协议在半诚实的攻击者面前是(基于模拟的)安全的，在恶意攻击者面前实现了客户机/服务器模型下的隐私。</p>
<p>在具有10Gbps连接的三个20核服务器的集群上，本文的协议的实现每秒执行超过130万次AES计算，涉及每秒处理超过70亿个门。此外，作者还开发了一个Kerberos扩展，它使用服务器之间共享的密钥/密码，用本文的协议取代了MIT-Kerberos中密钥分发中心(KDC)上的票证授予-票证加密。这样可以在保护密码的同时使用Kerberos。本文的实现能够支持每秒超过35,000个登录的登录风暴，即使对于非常大的组织也足够了。本文的工作证明了在标准硬件上实现高通量安全计算是可能的。</p>
<h1 id="THE-NEW-PROTOCOL"><a href="#THE-NEW-PROTOCOL" class="headerlink" title="THE NEW PROTOCOL"></a>THE NEW PROTOCOL</h1><h2 id="Securely-Computing-Boolean-Circuits"><a href="#Securely-Computing-Boolean-Circuits" class="headerlink" title="Securely Computing Boolean Circuits"></a>Securely Computing Boolean Circuits</h2><p>为了简化说明，首先描述具有与和异或门的布尔电路的特殊情况的协议。假设各方 $P_1,P_2,P_3$ 能够获得随机的 $x_1, x_2, x_3 \in {0,1 }$，使得 $x_1 \oplus x_2 \oplus x_3 = 0$。</p>
<p><strong>秘密共享。</strong>作者定义了一个3取2的秘密共享方案，记为$\left( \begin{array}{c} 3\2 \end{array} \right)$-共享，如下所示。为了共享比特 $v$，分发者在 $x_1 \oplus x_2 \oplus x_3 = 0$ 的约束下选择三个随机比特 $x_1, x_2, x_3 \in {0,1 }$。然后：</p>
<ul>
<li>$P_1$ 的份额为 $(x_1, a_1)$，其中 $a_1 = x_3 \oplus v$；</li>
<li>$P_2$ 的份额为 $(x_2, a_2)$，其中 $a_2 = x_1 \oplus v$；</li>
<li>$P_3$ 的份额为 $(x_3, a_3)$，其中 $a_3 = x_2 \oplus v$。</li>
</ul>
<p>很明显，任何一方的份额都不能揭示关于v的任何信息。此外，任何两个份额都足以获得 $v$；例如，给定 $x_1,x_2,a_1,a_2$，我们可以计算 $v = a_2 \oplus x_1$。</p>
<p><strong>异或(加法)门。</strong>设 $(x<em>1,a_1),(x_2,a_2),(x_3,a_3)$ 是 $v_1$ 的秘密共享，$(y_1,b_1),(y_2,b_2),(y_3,b_3)$ 是 $v_2$ 的秘密共享。然后，为了计算 $v_1$ 和 $v_2$ 的秘密共享，每个 $P_i$ 在本地计算 $z_i = x_i \oplus y_i$ 和 $c_i = a_i \oplus b_i$ 得到 $(z_i, c_i)$ (不需要通信)。为了查看结果是否构成 $v_1 \oplus v_2$ 的有效$\left( \begin{array}{c} 3\2 \end{array} \right)$-共享，首先注意到 $z_1 \oplus z_2 \oplus z_3 = 0$ (因为 $x_1 \oplus x_2 \oplus x_3 = 0$ 和 $y_1 \oplus y_2 \oplus y_3 = 0$)。接下来，观察到对于每个 $i \in {1,2,3}$，它持有 $c_i = z</em>{i−1} \oplus (v_1 \oplus v_2)$，其中 $i=1$ 时 $i−1=3$；例如，我们有 $c_1=a_1 \oplus b_1$ $=x_3 \oplus v_1 \oplus y_3 \oplus v_2$ $=(x_3 \oplus y_3)\oplus (v_1 \oplus v_2)$ $=z_3\oplus (v_1 \oplus v_2)$。因此，这构成具有随机性 $z_1,z_2,z_3$ 的 $v_1 \oplus v_2$ 的共享。</p>
<p><strong>与(乘法)门。</strong>现在展示各方如何计算与(乘法)门；此子协议要求每一方只发送单个比特。该协议分两个阶段工作：第一阶段双方计算输入位的与的简单$\left( \begin{array}{c} 3\3 \end{array} \right)$异或-共享，第二阶段将$\left( \begin{array}{c} 3\3 \end{array} \right)$-共享转换为上述定义的$\left( \begin{array}{c} 3\2 \end{array} \right)$-共享。</p>
<p>设 $(x_1,a_1),(x_2,a_2),(x_3,a_3)$ 是 $v_1$ 的秘密共享，$(y_1,b_1),(y_2,b_2),(y_3,b_3)$ 是 $v_2$ 的秘密共享。假设各方 $P_1,P_2,P_3$ 分别具有相关随机性 $\alpha, \beta, \gamma$，其中 $\alpha \oplus \beta \oplus \gamma = 0$。双方计算 $v_1 \cdot v_2 = v_1 \wedge v_2$ 的$\left( \begin{array}{c} 3\2 \end{array} \right)$-份额如下(从这里开始，将简单地将 $a$ 和 $b$ 的积表示为 $ab$)：</p>
<ol>
<li><p>第一步——计算$\left( \begin{array}{c} 3\3 \end{array} \right)$-共享：</p>
<ul>
<li>$P_1$ 计算 $r_1 = x_1 y_1 \oplus a_1 b_1 \oplus \alpha$，然后发送 $r_1$ 给 $P_2$；</li>
<li>$P_2$ 计算 $r_2 = x_2 y_2 \oplus a_2 b_2 \oplus \beta$，然后发送 $r_2$ 给 $P_3$；</li>
<li>$P_3$ 计算 $r_3 = x_3 y_3 \oplus a_3 b_3 \oplus \gamma$，然后发送 $r_3$ 给 $P_1$。</li>
</ul>
<p>这些消息是并行地计算和发送的。</p>
</li>
<li><p>第二步——计算$\left( \begin{array}{c} 3\2 \end{array} \right)$-共享：在此步骤中，各方根据其给定的$\left( \begin{array}{c} 3\3 \end{array} \right)$-共享和上一步中发送的消息构建$\left( \begin{array}{c} 3\2 \end{array} \right)$-共享，只需要本地计算。</p>
<ul>
<li>$P_1$ 存储 $(z_1, c_1)$，其中 $z_1 = r_1 \oplus r_3$，以及 $c_1 = r_1$；</li>
<li>$P_2$ 存储 $(z_2, c_2)$，其中 $z_2 = r_2 \oplus r_1$，以及 $c_2 = r_2$；</li>
<li>$P_3$ 存储 $(z_3, c_3)$，其中 $z_3 = r_3 \oplus r_2$，以及 $c_3 = r_3$；</li>
</ul>
</li>
</ol>
<p><strong>对第一步的解释：</strong>证明第一步中，$r_1 \oplus r_2 \oplus r_3 = v_1 \wedge v_2$。首先注意到：</p>
<script type="math/tex; mode=display">
a_1 b_1 = (x_3 \oplus v_1) (y_3 \oplus v_2) = x_3 y_3 \oplus x_3 v_2 \oplus y_3 v_1 \oplus v_1 v_2 \tag{1}</script><p>类似地有 $a_2 b_2 = x_1 y_1 \oplus x_1 v_2 \oplus y_1 v_1 \oplus v_1 v_2$ 和 $a_3 b_3 = x_2 y_2 \oplus x_2 v_2 \oplus y_2 v_1 \oplus v_1 v_2$。因此，</p>
<script type="math/tex; mode=display">
\begin{align}
r_1 &\oplus r_2 \oplus r_3 \\
 &= (x_1 y_1 \oplus a_1 b_1 \oplus \alpha) \oplus (x_2 y_2 \oplus a_2 b_2 \oplus \beta) \oplus (x_3 y_3 \oplus a_3 b_3 \oplus \gamma) \\
 &= x_1 y_1 \oplus x_2 y_2 \oplus x_3 y_3 \oplus b_1 a_1 \oplus a_2 b_2 \oplus a_3 b_3 \\
 &= x_1 y_1 \oplus x_2 y_2 \oplus x_3  y_3 \oplus (x_3 y_3 \oplus x_3 v_2 \oplus y_3 v_1 \oplus v_1 v_2) \\
 & \qquad \qquad \qquad \qquad \quad  \oplus (x_1 y_1 \oplus x_1 v_2 \oplus y_1 v_1 \oplus v_1 v_2) \\
 & \qquad \qquad \qquad \qquad \quad  \oplus (x_2 y_2 \oplus x_2 v_2 \oplus y_2 v_1 \oplus v_1 v_2) \\
 &= (x_1 \oplus x_2 \oplus x_3) v_2 \oplus (y_1 \oplus y_2 \oplus y_3) v_1 \oplus v_1 v_2 = v_1 v_2
\end{align}</script><p>第二个等号成立是因为 $\alpha \oplus \beta \oplus \gamma = 0$，第三个等号成立是因为公式 $(1)$，第四个等号成立就是简单的删除重复元素，最后一个等号成立是因为 $x_1 \oplus x_2 \oplus x_3 = y_1 \oplus y_2 \oplus y_3 = 0$。</p>
<p><strong>对第二步的解释：</strong>根据定义，为了证明结果是有效的 $v_1v_2$ 的$\left( \begin{array}{c} 3\2 \end{array} \right)$-共享，我们需要证明 $z_1,z_2,z_3$ 使得 $z_1 \oplus z_2 \oplus z_3 = 0$，并且 $c_1,c_2,c_3$ 是所定义的形式。</p>
<p>首先，$z_1 \oplus z_2 \oplus z_3 = (r_1 \oplus r_3) \oplus (r_2 \oplus r_1) \oplus (r_3 \oplus r_2) = 0$。其次，注意到$c_1 \oplus c_2 \oplus c_3 = r_1 \oplus r_2 \oplus r_3 = v_1 v_2$，移项得 $c_1 = r_1 = v_1 v_2 \oplus r_2 \oplus r_3$。又因为 $r_2 \oplus r_3 = z_3$，于是 $c_1 = v_1 v_2 \oplus z_3$，得证。对于 $c_2, c_3$ 也可以同样证明。</p>
<p><strong>协议。</strong>完整的三方协议以自然的方式工作。各方首先使用秘密共享方法共享其输入。然后，它们根据电路的预定拓扑顺序计算电路中的每个XOR与AND门。最后，各方在输出线上重建其输出。(在客户端/服务器模型中，外部客户端将其输入的共享发送给三方，然后三方根据收到的共享以相同的方式计算电路。)</p>
<p>请注意，每一方只与另一方进行通信。这一性质也适用于Sharemind的协议。然而，本文的秘密共享方案和乘法协议是完全不同的。</p>
<h2 id="Generating-Correlated-Randomness"><a href="#Generating-Correlated-Randomness" class="headerlink" title="Generating Correlated Randomness"></a>Generating Correlated Randomness</h2><p>这里将说明如何高效地为每个与门生成随机比特 $\alpha, \beta, \gamma \in {0, 1}$ ，满足 $\alpha \oplus \beta \oplus \gamma = 0$。</p>
<p><strong>信息论相关随机性。</strong>通过使每一方 $P<em>i$ 简单地选择随机 $\rho_i \in {0,1}$ 并将其发送到 $P</em>{i+1}$ (其中 $P_3$ 发送到 $P_1$)，可以安全地生成具有完美安全性的相关随机性。然后，每一方将其随机比特作为其选择的比特与其接收的比特的异或：$P_1$ 计算 $\alpha = \rho_3 \oplus \rho_1$，$P_2$ 计算 $\beta = \rho_1 \oplus \rho_2$ 以及 $P_3$ 计算 $\gamma = \rho_2 \oplus \rho_3$。观察到 $\alpha + \beta + \gamma = 0$ 满足要求。此外，如果 $P_1$ 损坏，则它除了知道 $\beta \oplus \gamma = \alpha$ 之外，对 $\beta$ 和 $\gamma$ 一无所知。这是因为 $\beta$ 和 $\gamma$ 在他们的计算中都包含了 $\rho_2$，而这对于 $P_1$ 是未知的。类似的论点也适用于损坏的 $P_2$ 或 $P_3$。尽管此解决方案既优雅又简单，但作者使用了不同的方法。这是因为这将使每个与门的通信增加一倍；确实，这仍然是非常少的通信。但是，考虑到通信是瓶颈，这将使吞吐量减半。</p>
<p><strong>计算相关随机性。</strong>接下来作者展示了如何通过计算安全地计算相关随机性，而不需要除短初始设置之外的任何交互。这使我们能够维持各方只需要在每个与门传输单个比特的当前情况。设 $\kappa$ 为安全参数，$F: {0,1}^{\kappa} \times {0,1}^{\kappa} \rightarrow {0,1}$ 为输出单比特的伪随机函数。</p>
<ol>
<li><p><strong>Init：</strong></p>
<ul>
<li>每个 $P_i$ 选择一个随机的 $k_i \in {0,1}^{\kappa}$；</li>
<li>$P_1$ 发送 $k_1$ 给 $P_3$，$P_2$ 发送 $k_2$ 给 $P_1$，$P_3$ 发送 $k_3$ 给 $P_2$。</li>
</ul>
<p>$P_1$ 持有 $k_1, k_2$，$P_2$ 持有 $k_2, k_3$，$P_3$ 持有 $k_3, k_1$。</p>
</li>
<li><p><strong>GetNextBit：</strong>给定唯一标识符 $id \in {0,1}^{\kappa}$，</p>
<ul>
<li>$P<em>1$ 计算 $\alpha = F</em>{k<em>1}(id) \oplus F</em>{k_2}(id)$；</li>
<li>$P<em>2$ 计算 $\beta = F</em>{k<em>2}(id) \oplus F</em>{k_3}(id)$；</li>
<li>$P<em>3$ 计算 $\gamma = F</em>{k<em>3}(id) \oplus F</em>{k_1}(id)$。</li>
</ul>
</li>
</ol>
<p>注意到 $\alpha \oplus \beta \oplus \gamma = 0$。此外，$P_1$ 不知道用于生成 $\beta$ 和 $\gamma$ 的 $k_3$。因此，在 $\beta$ 和 $\gamma$ 的约束下，$\beta \oplus \gamma = \alpha$ 对 $P_1$ 是伪随机的。实际上，$id$ 可以是所有各方在每次调用 <strong>GetNextBit</strong> 时本地递增的计数器。</p>
<h2 id="The-Ring-Modulo-2-n-and-Fields"><a href="#The-Ring-Modulo-2-n-and-Fields" class="headerlink" title="The Ring Modulo $2^n$ and Fields"></a>The Ring Modulo $2^n$ and Fields</h2><p>上一节讲到的是布尔电路下的协议，接下来将其推广到模 $2^n$ 的环和大于 $2$ 的任意域的一般情况。当取 $n=1$ 时，加法(和减法)与异或相同，乘法与与相同。在这种情况下，这里的协议与第2.1节中描述的协议完全相同。</p>
<p>$\left( \begin{array}{c} 3\2 \end{array} \right)$<strong>-共享。</strong>为了共享一个元素 $v \bmod 2^n$，分发者选择三个满足约束 $x<em>1 + x_2 + x_3 = 0$ 的随机元素 $x_1, x_2, x_3 \in \mathbb{Z}</em>{2^n}$。然后 $P_1$ 的份额为 $(x_1, a_1)$，其中 $a_1 = x_3 - v$；$P_2$ 的份额为 $(x_2, a_2)$，其中 $a_2 = x_1 - v$；$P_3$ 的份额为 $(x_3, a_3)$，其中 $a_3 = x_2 - v$。跟布尔电路的情况一样，每一方的份额都没有暴露关于 $v$ 的信息，而且任意两方可以重构 $v$。</p>
<p><strong>加法门。</strong>与布尔电路的情况一样，各方在本地将对应的份额进行相加模 $2^n$ 即可。</p>
<p><strong>乘法门。</strong>设 $(x<em>1,a_1),(x_2,a_2),(x_3,a_3)$ 是 $v_1$ 的秘密共享，$(y_1,b_1),(y_2,b_2),(y_3,b_3)$ 是 $v_2$ 的秘密共享。假设各方 $P_1,P_2,P_3$ 分别有 $\alpha, \beta, \gamma \in \mathbb{Z}</em>{2^n}$，其中 $\alpha + \beta + \gamma = 0$。为了计算两个值的积的$\left( \begin{array}{c} 3\2 \end{array} \right)$-份额，各方计算：</p>
<ol>
<li>$P_1$ 计算 $r_1 = \frac{a_1 b_1 - x_1 y_1 + \alpha}{3}$，然后发送 $r_1$ 给 $P_2$；</li>
<li>$P_2$ 计算 $r_2 = \frac{a_2 b_2 - x_2 y_2 + \beta}{3}$，然后发送 $r_2$ 给 $P_3$；</li>
<li>$P_3$ 计算 $r_3 = \frac{a_3 b_3 - x_3 y_3 + \gamma}{3}$，然后发送 $r_3$ 给 $P_1$；</li>
<li>$P_1$ 将它的份额定义为 $z_1 = r_3 - r_1$ 和 $c_1 = -2r_3 - r_1$；</li>
<li>$P_2$ 将它的份额定义为 $z_2 = r_1 - r_2$ 和 $c_2 = -2r_1 - r_2$；</li>
<li>$P_3$ 将它的份额定义为 $z_3 = r_2 - r_3$ 和 $c_3 = -2r_2 - r_3$。</li>
</ol>
<p>上面的计算是合法的，因为 $3$ 与 $2^n$ 是互质的；因此，$3$ 是可逆的。此外，上述结果在3个以上元素的有限域上都成立。</p>
<p>为了验证 $r_1 + r_2 + r_3 = v_1 v_2$，首先观察到</p>
<script type="math/tex; mode=display">
a_1 b_1  = (x_3 - v_1)(y_3 - v_2) = x_3 y_3 - x_3 v_2 - y_3 v_1 + v_1 v_2 \tag{2}</script><p>类似地，$a_2 b_2 = x_1 y_1 - x_1 v_2 - y_1 v_1 + v_1 v_2$，$a_3 b_3 = x_2 y_2 - x_2 v_2 - y_2 v_1 + v_1 v_2$。然后</p>
<script type="math/tex; mode=display">
\begin{align}
3(&r_1 + r_2 + r_3) \\
&= a_1 b_1 - x_1 y_1 + \alpha + a_2 b_2 - x_2 y_2 + \beta + a_3 b_3 - x_3 y_3 + \gamma \\
&= a_1 b_1 + a_2 b_2 + a_3 b_3 - x_1 y_1 - x_2 y_2 - x_3 y_3 \\
&= 3v_1 v_2 - v_1(y_1 + y_2 + y_3) - v_2(x_1 + x_2 + x_3) = 3v_1 v_2
\end{align}</script><p>接下来证明各方的$\left( \begin{array}{c} 3\2 \end{array} \right)$-份额是有效的：根据定义，各方的份额为 $(z_1, z_3 - v_1 v_2), (z_2, z_1 - v_1 v_2)$ 和 $(z_3, z_2 - v_1 v_2)$，其中 $z_1 + z_2 + z_3 = 0 \bmod 2^n$。首先后者很容易看出来是成立的，根据 $z_1, z_2, z_3$ 的定义。其次，$P_1$ 持有 $c_1$ $= -2 r_3 - r_1$ $= -r_3 - r_3 - r_1 - r_2 + r_2$ $=(r_2 - r_3)-(r_1 + r_2 + r_3)$ $=z_3 - v_1 v_2$，满足要求。对于 $P_2$ 和 $P_3$ 的情况同样成立。</p>
<p><strong>生成相关随机性。</strong>各方使用与第2.2节所述相同的(计算)方法，但有以下不同之处。首先，我们假设 $F<em>k$ 是将字符串映射到 $\mathbb{Z}</em>{2^n}$ (或等价于 ${0,1}^n$)的伪随机函数。其次，$P<em>1$计算 $\alpha = F</em>{k<em>1}(id) - F</em>{k<em>2}(id)$，$P_2$计算 $\beta = F</em>{k<em>2}(id) - F</em>{k<em>3}(id)$，$P_3$计算 $\gamma = F</em>{k<em>3}(id) - F</em>{k_1}(id)$。</p>
]]></content>
      <categories>
        <category>Papers</category>
      </categories>
      <tags>
        <tag>密码学</tag>
        <tag>MPC</tag>
        <tag>Secret Sharing</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记 Improved Garbled Circuit: Free XOR Gates and Applications</title>
    <url>/2020/06/16/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-Improved-Garbled-Circuit-Free-XOR-Gates-and-Applications/</url>
    <content><![CDATA[<p><em>Vladimir Kolesnikov, Thomas Schneider</em></p>
<p> <a href="https://dblp.uni-trier.de/db/conf/icalp/icalp2008-2.html#KolesnikovS08" target="_blank" rel="noopener">ICALP (2) 2008</a></p>
<p><a href="https://dl.acm.org/doi/10.1007/978-3-540-70583-3_40" target="_blank" rel="noopener">https://dl.acm.org/doi/10.1007/978-3-540-70583-3_40</a></p>
<a id="more"></a>
<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文提出了一种新的用于两方安全函数评估(SFE)的乱码电路结构。在本文的单轮协议中，XOR门的评估是“免费的”，这导致了对最佳乱码电路实现的相应改进(例如Fairplay)。</p>
<p>本文几乎完全使用XOR门来构建置换网络和通用电路(UC)；这使得它们的SFE(在计算和通信方面)提高了多达4倍。本文还改进了整数加法和等价性测试，最高可达2倍。</p>
<p>本文依赖随机预言(RO)假设。本文的构造在半诚实模型中被证明是安全的。</p>
<h2 id="本文的贡献"><a href="#本文的贡献" class="headerlink" title="本文的贡献"></a>本文的贡献</h2><ul>
<li>在半诚实模型下，本文提出了一种新的用于两方安全函数评估(SFE)的乱码电路结构。</li>
<li>在本文的一轮协议中，XOR门的计算是“免费的”(也就是说，不使用相关的乱码表和相应的散列或对称密钥操作)。在处理其他门时，本文的构造与最好的乱码电路实现(例如Fairplay)一样有效。</li>
</ul>
<h1 id="Setting-and-Preliminaries"><a href="#Setting-and-Preliminaries" class="headerlink" title="Setting and Preliminaries"></a>Setting and Preliminaries</h1><p>两方通用安全函数评估(SFE)允许双方评估其各自输入 $x$ 和 $y$ 上的任何函数，同时保持 $x$ 和 $y$ 的隐私。</p>
<p>本文考虑具有 $k$ 个门和任意扇出的非循环布尔电路。也就是说，每个门的(单个)输出可以用作任意数量的门的输入。本文假设电路的门 $G_1,…,G_k$ 按拓扑排序。该顺序(不一定是唯一的)确保第 $i$ 个门 $G_i$ 不具有作为连续门 $G_j,\ j&gt;i$ 的输出的输入。总是可以通过 $O(k)$ 计算在非循环电路上获得拓扑顺序。</p>
<p>本文专注于半诚实的模式，在这种模式下，参与者遵循协议，但试图从执行记录中学习信息。</p>
<p>本文使用以下标准符号：$\in_R$ 表示均匀随机采样，$|$ 表示位串的连接。$\langle a, b \rangle$ 是一个包括了 $a,b$ 两个元素的向量，且其比特串表示为 $a | b$。$W_c = g(W_a, W_b)$ 表示2输入门 $G$，其用输入线 $W_a,W_b$ 和输出线 $W_c$ 计算函数 $g: {0,1}^2 \rightarrow {0,1 }$。</p>
<p>设 $N$ 为安全参数。设 $S$ 是无限集，设 $X={X<em>s}</em>{s \in S}$ 和 $Y={Y<em>s}</em>{s \in S}$ 为分布全体。我们说 $X$ 和 $Y$ 在计算上是不可区分的，记为 $X \overset{c}{\equiv} Y$，如果对每个非均匀多项式时间微分器 $D$ 和所有足够大的 $s \in S, \ |Pr[D(X_s)=1]−Pr[D(Y_s)=1]|&lt;1/p(|s|) $ 对每个多项式 $p$。</p>
<p><strong>随机预言。</strong>RO模型是一个有用的抽象。RO只是一个随机选择的函数 ${0,1}^* \mapsto {0,1}^N$ -一个不能被多项式参与者完全存储或遍历的大对象。RO模型为所有参与者提供了Oracle访问此类功能的权限。实际上，RO由散列函数(如SHA)建模。</p>
<p><strong>不经意传输(OT)。</strong>2选1OT是两方协议。<em>发送方</em> $P<em>1$ 具有两个秘密 $m_0,m_1$，<em>接收方</em> $P_2$ 具有选择位 $i \in {0,1}$。在协议的最后，$P_2$ 得到 $m_i$，但没有获得关于 $m</em>{i-1}$ 的任何信息，$P_1$ 没有获得关于 $i$ 的任何信息。</p>
<p><strong>姚氏乱码电路(GC)。</strong>参与者 $P_1$ 首先扰乱电路 $C$：对于每条线 $W_i$ 的值 $j$，他随机选择两个秘密 $w^0_i$ 和 $w^1_i$，其中 $w^j_i$ 是一个乱值，或者说是乱码。(注：$w^j_i$ 不透露 $j$。)。此外对于每个门 $G_i$，$P_1$ 创建具有以下属性的乱码表 $T_i$ 并将其发送到 $P_2$：给定一组 $G_i$ 的输入乱码，$T_i$ 允许恢复相应 $G_i$ 的输出的乱码，而不透露其他信息。然后参与方输入的乱码被(不经意地)传输到 $P_2$。现在 $P_2$ 可以使用表格 $T_i$ 通过逐个门地评估乱码电路来简单地获得乱码输出。如果在给定输入上对 $C$ 求值时，$W_i$ 取值 $j$，则称 $W_i$ 的乱码 $w^j_i$ <em>有效</em>。观察到，对于每根导线，$P_2$ 只能获得其有效乱码。电路的输出线没有乱码(或其乱码被公布)，因此 $P_2$ (仅)获知电路的输出，而不学习内部线路值。$P_1$ 从(半诚实的) $P_2$ 学习输出。(这一步在半诚实模型中是微不足道的，通常不会在分析中考虑。)。GC的正确性源于表 $T_i$ 的构建方法。任何一方都不会从协议执行中获知任何附加信息。</p>
<h1 id="本文的协议"><a href="#本文的协议" class="headerlink" title="本文的协议"></a>本文的协议</h1><p>首先，本文展示了XOR门 $G$ 的SFE实现，它源自[14]中的一个。设 $G$ 有两根输入线 $W_a, W_b$，输出线 $W_c$。按如下方式对导线值进行乱码处理：随机选择 $w^0_a, w^0_b, R \in_R {0,1}^N$。设 $w^0_c = w^0_a \oplus w^0_b$ 和 $\forall i \in {a,b,c}: w^1_i = w^0_i \oplus R$。很容易看出，乱码门输出只需对乱码门输入进行异或运算即可获得：</p>
<script type="math/tex; mode=display">
\begin{align}
w^0_c &= w^0_a \oplus w^0_b = (w^0_a \oplus R) \oplus (w^0_b \oplus R) = w^1_a \oplus w^1_b \\
w^1_c &= w^0_c \oplus R = w^0_a \oplus (w^0_b \oplus R) = w^0_a \oplus w^1_b = (w^0_a \oplus R) \oplus w^0_b = w^1_a \oplus w^0_b
\end{align}</script><p>且乱码 $w^j_i$ 不会透露它们对应的线路值。</p>
<p>上述异或结构对乱码值施加的限制：电路中每根导线的两个值的乱码必须相差相同的值，即对于某个全局 $R$，$\forall i: w^1_i = w^0_i \oplus R$。相比之下，在以前的GC结构中，所有乱码 $w^j_i$ 是独立随机选择的，并且安全性证明依赖于该性质。</p>
<h2 id="本文的乱码电路构造"><a href="#本文的乱码电路构造" class="headerlink" title="本文的乱码电路构造"></a>本文的乱码电路构造</h2><p>设 $C$ 是一个电路。首先注意到，NOT门可以通过简单地消除它们并颠倒导线的值和乱码的对应关系来“免费”实现。</p>
<p>在下面的Alg.1中，每个乱码 $w= \langle k, p \rangle$ 由密钥 $k \in {0,1}^N$ 和排列位 $p \in {0,1}$ 组成。密钥用于表条目的解密，$p$ 用于选择要解密的条目。每条导线的两个乱码 $w^0_i, w^1_i$ 按照异或构造的要求相关：对于选定的 $R\in_R {0,1}^N$，$\forall i: w^1_i = \langle k^1_i, p^1_i \rangle = \langle k^0_i \oplus R, p^0_i \oplus 1 \rangle$，其中 $w^0_i = \langle k^0_i, p^0_i \rangle$。$H: {0,1}^* \mapsto {0,1}^{N+1}$ 是一个RO。</p>
<p>现在我们将上述想法形式化，并给出GC结构(Alg.1)和评估(Alg.2)。在SFE中，Alg.1由 $P_1$ 执行，Alg.2由 $P_2$ 执行。</p>
<p><img src="http://images.yingwai.top/picgo/freeXORa1.png" alt=""></p>
<p>注意，本文的表项加密(步骤3(C)iii)类似于Fairplay。Fairplay使用 $e_{v_a,v_b} = H(k^{v_a}_a | i | p^{v_a}_a | p^{v_b}_b) \oplus$ $H(k^{v_b}_b | i | p^{v_a}_a | p^{v_b}_b) \oplus$ $w^{g_i(v_a, v_b)}_c$。这是一个不重要的区别；我们可以使用Fairplay的加密。</p>
<p><strong>安全方面的直觉。</strong>Alg.1使用RO $H$ 的输出作为一次性垫来加密乱码表中的乱码输出值(步骤3(C)III)和乱码输出表(步骤4a)。注意，在本文的整个构造过程中，$H$ 的输入(密钥和门索引)的任何特定组合都用于加密至多一个表项。(本文假设 $H$ 中的串联和字符串表示是“正确的”。)。此外，由于被篡改电路的评估者每条线路只知道一个被篡改的值，所以他可以精确地解密 $G_i$ 的乱码表中的一个条目。所有其他条目都使用多次赋值器无法猜到的至少一个密钥进行加密。因此，在他看来，每根电线的两个乱值中的一个看起来是随机的。</p>
<p>现在给出相应的GC评估算法，由 $P_2$ 运行。回想一下，$P_2$ 会从 $P_1$ 获取所有乱码表格和 $P_1$ 输入值的乱码。由 $P_2$ 保存的输入值的乱码通过OT发送。</p>
<p><img src="http://images.yingwai.top/picgo/freeXORa2.png" alt=""></p>
<p>GC构造和评估算法可以直接用于以标准方式获得基于GC的SFE协议。为完整起见，本文包含了对此协议的描述。</p>
<hr>
<p><strong>Protocol 1.</strong> <em>(Two-party SFE protocol):</em></p>
<ul>
<li><p><strong>Inputs:</strong>  $P<em>1$ has private input $x = \langle x_1,..,x</em>{u<em>1} \rangle \in {0,1}^{u_1}$and $P_2$ has private input $y = \langle y_1,..,y</em>{u_2} \rangle \in {0,1}^{u_2}$.</p>
</li>
<li><p><strong>Auxiliary input:</strong>  A boolean acyclic circuit $C$ such that $\forall x \in {0,1}^{u_1}, y \in {0,1}^{u_2}$, it holds that $C(x,y) = f(x,y)$, where $f: {0,1}^{u_1} \times {0,1}^{u_2} \rightarrow {0,1}^v$. We require that $C$ is such that if a circuit-output wire leaves some gate $G$, then gate $G$ has no other wires leading from it into other gates (i.e., no circuit-output wire is also a gate-input wire). Likewise, a circuit-input wire that is also a circuit-output wire enters no gates. We also require that $C$ is modified to contain no NOT-gates and all n-input XOR-gates with $n &gt; 2$ replaced by 2-input XOR-gates as described in Section 3.1.</p>
</li>
<li><p><strong>The protocol:</strong></p>
<ol>
<li><p>$P_1$ constructs the garbled circuit using Algorithm 1 and sends it (i.e. the garbled tables) to $P_2$.</p>
</li>
<li><p>Let $W<em>1,.., W</em>{u<em>1}$ be the circuit input wires corresponding to $x$, and let $W</em>{u<em>1+1},..,W</em>{u_1+u_2}$ be the circuit input wires corresponding to $y$. Then, </p>
<p>​    (a) $P<em>1$ sends $P_2$ the garbled values $w^{x_1}_1,..,w^{x</em>{u<em>1}}</em>{u_1}$.</p>
<p>​    (b) For every $i \in {1, .., u<em>2}$, $P_1$ and $P_2$ execute a 1-out-of-2 oblivious transfer protocol, where $P_1$’s input is $(k^0</em>{u<em>1+i}, k^1</em>{u_1+i})$, and $P_2$’s input is $y_i$. All $u_2$ OT instances can be run in parallel.</p>
</li>
<li><p>$P_2$ now has the garbled tables and the garblings of circuit’s input wires. $P_2$ evaluates the garbled circuit, as described in Alg. 2, and outputs $f(x, y)$.</p>
</li>
</ol>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>Papers</category>
      </categories>
      <tags>
        <tag>密码学</tag>
        <tag>MPC</tag>
        <tag>Garbled Circuit</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记 Linear-Regression on Packed Encrypted Data in the Two-Server Model</title>
    <url>/2020/08/09/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-Linear-Regression-on-Packed-Encrypted-Data-in-the-Two-Server-Model/</url>
    <content><![CDATA[<p><em>Adi Akavia, Hayim Shaul, Mor Weiss, Zohar Yakhini</em></p>
<p><a href="https://dl.acm.org/doi/proceedings/10.1145/3338469" target="_blank" rel="noopener">WAHC’19: Proceedings of the 7th ACM Workshop on Encrypted Computing &amp; Applied Homomorphic Cryptography</a></p>
<p><a href="https://dl.acm.org/doi/abs/10.1145/3338469.3358942" target="_blank" rel="noopener">https://dl.acm.org/doi/abs/10.1145/3338469.3358942</a></p>
<a id="more"></a>
<p><img src="http://images.yingwai.top/picgo/LoPED.png" alt=""></p>
<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>从包含大量独立样本的联合训练数据中开发机器学习模型是一项重要的任务，可以显著提高学习模型的潜在适用性和预测能力。由于单个用户(如医院或单个实验室)通常以高置信度收集不支持准确学习的数据集，因此希望在不损害数据隐私的情况下组合来自多个用户的数据。在这篇文章中，我们开发了一种隐私保护解决方案，用于从多方(“数据所有者”)共同贡献的数据中学习线性回归模型。我们的协议是基于Giacomelli等人的协议。(ACNS 2018)，利用两个非合谋服务器和线性同态加密(LHE)学习正则化线性回归模型。我们的方法使用不同的LHE方案，使我们能够显著减少同态操作的数量和运行时间，以及总的运行时间复杂度。我们协议的另一个优点是潜在的LHE方案基于与Giacomelli等人不同的(和后量子安全的)安全假设。我们的方法利用中国剩余定理和单指令多数据表示法来获得改进的性能。对于1000x40线性回归任务，对于同态操作，我们可以在总共3秒内学习到一个模型，而文献中报道的时间超过了100秒。我们的方法还可以扩展到更大的功能空间：我们实现了一个可以处理1000x100线性回归任务的系统，在数据所有者进行更重要的离线预处理之后，投入了数分钟的服务器计算时间。我们打算将我们的协议和实现整合到一个全面的系统中，该系统可以在更大范围内处理安全的联合学习。</p>
<h2 id="本文贡献"><a href="#本文贡献" class="headerlink" title="本文贡献"></a>本文贡献</h2><ul>
<li>线性-压缩加密数据的回归(LoPED)。提出了一种新的PPRR协议，称为“分组加密数据线性回归协议(LoPED)。</li>
<li>同态计算时间加速：分析结果。与[6]相比，LoPED在同态运算的数量上提供了高达 $\Theta(d^2)$ 的加速比，其中 $d$ 是特征的数量。更准确地说，加速比是 $\Theta(\mathsf{sl})$，其中 $\mathsf{sl} \leq d^2$ 是每个SIMD密文中封装的时隙数目。</li>
<li>同态计算时间加速：实验结果。我们实现了我们的协议并进行了大量的实验，证明了同态运算(又名LHE-COMP)运行时的大幅加速；参见表1。</li>
<li>安全性。LoPED基于后量子安全假设，与[6]中使用的基于Paillier的实现形成对比；这是我们系统的一个额外优势。</li>
</ul>
<h1 id="PRELIMINARIES"><a href="#PRELIMINARIES" class="headerlink" title="PRELIMINARIES"></a>PRELIMINARIES</h1><h2 id="岭回归"><a href="#岭回归" class="headerlink" title="岭回归"></a>岭回归</h2><p>线性回归的损失函数：</p>
<script type="math/tex; mode=display">
f(w) = \sum^m_{i = 1} \left(y_i - x^T_i w \right)^2</script><p>于是 $\boldsymbol{w}$ 的最优解为</p>
<script type="math/tex; mode=display">
\hat{\boldsymbol{w}}^{*}=\underset{\hat{\boldsymbol{w}}}{\arg \min }(\boldsymbol{y}-\mathbf{X} \hat{\boldsymbol{w}})^{\mathrm{T}}(\boldsymbol{y}-\mathbf{X} \hat{\boldsymbol{w}})</script><p>对 $\hat{\boldsymbol{w}}$ 求导并令导数为零，当 $\mathbf{X}^{\mathrm{T}} \mathbf{X}$ 为满秩或正定矩阵时可得</p>
<script type="math/tex; mode=display">
\hat{\boldsymbol{w}}^{*}=\left(\mathbf{X}^{\mathrm{T}} \mathbf{X}\right)^{-1} \mathbf{X}^{\mathrm{T}} \boldsymbol{y}</script><p>然而现实中 $\mathbf{X}^{\mathrm{T}} \mathbf{X}$ 往往不是满秩矩阵。例如在许多任务中会遇到大量的变量，其数目甚至超过样例数，导致 $\mathbf{X}$ 的列数多于行数，$\mathbf{X}^{\mathrm{T}} \mathbf{X}$ 显然不满秩。从上式可以看出在计算回归系数的时候，我们需要计算矩阵 $\mathbf{X}^{\mathrm{T}} \mathbf{X}$ 的逆，但是如果该矩阵是个奇异矩阵，则无法对其进行求解。</p>
<p>因此如果出现上面的情况，我们需要对最初的标准线性回归做一定的变化使原先无法求逆的矩阵变得非奇异，使得问题可以稳定求解。我们可以通过缩减的方式来处理这些问题，例如岭回归。</p>
<p>岭回归是在标准线性回归的损失函数基础上添加了一个惩罚项 $\lambda \sum^n_{i=1} w^2_i$，称为L2正则化。</p>
<p>这个时候损失函数的形式为</p>
<script type="math/tex; mode=display">
f(w) = \sum^m_{i = 1} \left(y_i - x^T_i w \right)^2 + \lambda \sum^n_{i=1} w^2_i</script><p>将岭回归系数用矩阵的形式表示：</p>
<script type="math/tex; mode=display">
\hat{w}=\left(X^{T} X+\lambda I\right)^{-1} X^{T} y</script><p>可以看到，就是通过将 $\mathbf{X}^{\mathrm{T}} \mathbf{X}$ 加上一个单位矩阵似的矩阵变成非奇异矩阵并可以进行求逆运算。</p>
<h2 id="线性同态加密-LHE"><a href="#线性同态加密-LHE" class="headerlink" title="线性同态加密(LHE)"></a>线性同态加密(LHE)</h2><p>LHE是一种公钥加密方案，它允许人们在不知道秘密解密密钥的情况下，在加密的“幕后”执行线性运算。我们假设在密钥生成过程中，可以通过指定 $N \in \mathbb{N}$ 来选择明文空间，从而执行模 $N$ 的同态运算。这是通过将明文模 $N$ 显式地合并到方案的排列中来实现的。</p>
<p>线性同态加密(LHE)方案 $\mathcal{E}=(\mathsf{KG}, \mathsf{Enc},\mathsf{Dec},\mathsf{Eval}) $ 由四个算法组成，其中 $\mathsf{KG}, \mathsf{Enc}$ 和 $\mathsf{Eval}$ 是PPT算法，$\mathsf{Dec}$ 是(确定性)多项式时间。算法具有以下语法：</p>
<ul>
<li>$\mathsf{KG}(1^\sigma, N)$ 将安全参数 $σ$ 和 $N \in \mathbb{N}$ 作为输入。它输出一对公开和秘密加密密钥 $(\mathsf{pk}, \mathsf{sk})$。我们假设  $\mathsf{pk}$ 在其描述中包含 $N$，而不失一般性。</li>
<li>$\mathsf{Enc}(\mathsf{pk}, \mathsf{msg})$ 将公钥 $\mathsf{pk}$ 和消息 $\mathsf{msg} \in \mathbb{Z}_N$ 作为输入，输出密文 $\mathsf{c}$。</li>
<li>$\mathsf{Dec}(\mathsf{sk},\mathsf{c})$ 将秘密解密密钥 $\mathsf{sk}$ 和密文 $\mathsf{c}$ 作为输入，并输出明文消息 $\mathsf{msg’}$。</li>
<li>$\mathsf{Eval}(\mathsf{pk}, C, \mathsf{c}_1,…, \mathsf{c}_k)$ 将公钥 $\mathsf{pk}$、电路 $C: \mathbb{Z}^k_N \rightarrow \mathbb{Z}^l_N$，其中 $l, k \in \mathbb{N}$ 和 $k$ 个密文 $\mathsf{c}_1,…,\mathsf{c}_k$ 作为输入，并输出 $l$ 个密文 $(\mathsf{c}’_1,…,\mathsf{c}’_l)$。</li>
</ul>
<h1 id="问题陈述"><a href="#问题陈述" class="headerlink" title="问题陈述"></a>问题陈述</h1><h2 id="在联合数据上的岭回归"><a href="#在联合数据上的岭回归" class="headerlink" title="在联合数据上的岭回归"></a>在联合数据上的岭回归</h2><p>由于每个用户所拥有的数据样本是有限的，往往训练不出来比较好的模型。于是很自然地可以想到与其他用户一起来训练一个模型，每个用户都将自己的数据提供出来，此时样本的数量就足以训练出一个好的模型。这里不同用户的数据样本都是具有同样特征的。</p>
<p>但这样就会有隐私泄露的问题，用户都不想别人知道自己的数据，于是就需要引入隐私保护。这里假设协议的参与者都是城市且好奇的。</p>
<h2 id="Privacy-Preserving-Ridge-Regression-with-only-Linearly-Homomorphic-Encryption-中的方案"><a href="#Privacy-Preserving-Ridge-Regression-with-only-Linearly-Homomorphic-Encryption-中的方案" class="headerlink" title="Privacy-Preserving Ridge Regression with only Linearly-Homomorphic Encryption 中的方案"></a>Privacy-Preserving Ridge Regression with only Linearly-Homomorphic Encryption 中的方案</h2><p>在这篇文章之前最好的双服务器模型PPRR方案是 <a href="https://yuyingwai.cn/2020/08/10/论文笔记-Privacy-Preserving-Ridge-Regression-with-only-Linearly-Homomorphic-Encryption/" target="_blank" rel="noopener"><em>Privacy-Preserving Ridge Regression with only Linearly-Homomorphic Encryption</em></a> 中的方案，如图1所示，</p>
<p><img src="http://images.yingwai.top/picgo/LoPEDf1.png" alt=""></p>
<p>该协议对参数 $n, d, \ell, \lambda$ 进行操作，并选择明文环 $\mathbb{Z}_N$ 满足：</p>
<script type="math/tex; mode=display">
N > 2d(d - 1)^{\frac{d-1}{2}}10^{4\ell d}(n^2 + \lambda)^{2d} \tag{1}</script><p>在初始化阶段，$\mathcal{S}_2$ 生成LHE密钥 $(\mathsf{pk}, \mathsf{sk})$，然后发布公钥 $\mathsf{pk}$。然后该协议对在多个数据所有者之间水平划分的输入 $(X|\vec{y}) \in \mathbb{R}^{n \times (d+1)}$ 训练岭回归模型，如下所示。</p>
<ol>
<li>首先每个数据拥有者计算其对于 $d \times d$ 矩阵 $A = X^T X + \lambda I$ 的份额，将其缩放为嵌入 $\mathbb{Z}_N$ 的整数值，用LHE方案加密该份额，并将密文发送给 $\mathcal{S}_1$。用类似的方式计算 $\vec{b} = X^T \cdot \vec{y}$。</li>
<li>其次 $\mathcal{S}_1$ 将所有的份额结合起来获得 $A$ 的逐项输入加密 $\mathbf{A}$，假设其在 $\mathbb{Z}^{d \times d}_N$ 中是可逆的。然后 $\mathcal{S}_1$ 使用同态性质对 $A$ 进行盲化，具体为 $\mathcal{S}_1$ 使用LHE计算 $A \cdot R$ 的加密 $\mathbf{C}$，其中 $R \in \mathsf{GL}(d, \mathbb{Z}_N)$ 是一个随机的可逆矩阵。用类似的方法盲化 $\vec{b}$，得到 $\vec{\mathbf{v}}$ 为加密后的 $\vec{v} = \vec{b} + A \cdot \vec{r}$，其中 $r \in \mathbb{Z}^d_N$ 是一致随机的。然后 $\mathcal{S}_1$ 将 $\mathbf{C}$ 和 $\vec{\mathbf{v}}$ 发送给 $\mathcal{S}_2$。</li>
<li>$\mathcal{S}_2$ 使用密钥解密，求解线性系统 $C \cdot \vec{w}^<em> = \vec{v} \bmod N$ 来获得盲化后的模型 $\vec{w}^</em>$，然后发送给 $\mathcal{S}_1$。</li>
<li>最后 $\mathcal{S}_1$ 去除盲化获得模型 $\vec{w}’ = R \cdot \vec{w}^* - \vec{r} \in \mathbb{Z}^d_N$。对 $\vec{w}’$ 使用有理数重构获得输出模型 $\vec{w} \in \mathbb{Q}^d$，然后 $\mathcal{S}_1$ 对各方进行广播。</li>
</ol>
<h1 id="本文的隐私保护岭回归协议"><a href="#本文的隐私保护岭回归协议" class="headerlink" title="本文的隐私保护岭回归协议"></a>本文的隐私保护岭回归协议</h1><p>本文的模型与 <em>Privacy-Preserving Ridge Regression with only Linearly-Homomorphic Encryption</em> 中的模型一样，主要包括两个主体：数据拥有者 $DO$ 和服务器 $\mathcal{S}$。其中数据拥有者的数量是已知的；服务器有两个，$\mathcal{S}_1$ 负责将 $DO$ 的数据聚合，$\mathcal{S}_2$ 负责更新权重。分为了三个阶段：初始化、上传输入和训练阶段。</p>
<p><img src="http://images.yingwai.top/picgo/LoPEDf2.png" alt=""></p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>初始化（图2）包括 $\mathcal{S}_2$ 生成LHE方案密钥，和发布公钥。</p>
<p>由于 <em>Privacy-Preserving Ridge Regression with only Linearly-Homomorphic Encryption</em> 中的明文模数太大，而HElib和SEAL分别只支持62位和60位的明文模数，因此本文使用了中国剩余定理(CRT)来将明文空间缩小，使用 $\mathbb{Z}<em>{p_1},…,\mathbb{Z}</em>{p<em>t}$ 中的消息列表来表示 $\mathbb{Z}_N$ 中的消息，使得 $N = \prod^t</em>{i=1} p_i$，每个模 $p_i$ 需要独立的加密密钥也由 $\mathcal{S}_2$ 来生成。（前面提到的另一个方案中的操作是直接在 $\mathbb{Z}_N$ 中进行的，因此 $\mathcal{S}_2$ 仅生成一对密钥 $(\mathsf{pk}, \mathsf{sk})$。）</p>
<h2 id="上传输入"><a href="#上传输入" class="headerlink" title="上传输入"></a>上传输入</h2><p>在图一中我们假设输入在数据拥有者之间水平分割，类似横向联邦学习（样本的联合）。</p>
<p>令 $X \in \mathbb{R}^{n \times d}, \vec{y} \in \mathbb{R}^{n \times 1}$ 分别表示数据矩阵和响应向量，于是存在 $[n]$ 的分割 $I<em>1,…,I_m$ 使得 $DO_j$ 拥有 $X^j = X</em>{I<em>j} = (X_k : k \in I_j)$（$X_k$ 表示 $X$ 的第 $k$ 行）和 $\vec{y}^j = \vec{y}</em>{I<em>j} = (y_k)</em>{k \in I<em>j}$。这些输入按比例缩放并嵌入到足够大的 $N$ 的 $\mathbb{Z}_N$ 中（有关 $N$ 的要求请参见公式1）。对每个 $1 \leq j \leq m$，令 $A^j = \sum</em>{k \in I<em>j} \left(X^j_k \right)^T \cdot X^j_k \in \mathbb{Z}^{d \times d}_N$，和 $\vec{b}_j = \sum</em>{k \in I_j} X^j_k \cdot \vec{y}^j_k \in \mathbb{Z}^d_N$。每个 $DO_j$ 在本地从他的输入计算 $A^j, \vec{b}^j$，计算</p>
<script type="math/tex; mode=display">
A^{j,p_i} = \left(A^j \bmod p_i \right) \quad \mathrm{and} \quad \vec{b}^{j, p_i} = \left(\vec{b}^j \bmod p_i \right)</script><p>然后发送加密后的 $A^{j, p_i}, \vec{b}^{j, p_i}, i \in [t]$ 给 $\mathcal{S}_1$。</p>
<h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2><p><img src="http://images.yingwai.top/picgo/LoPEDf3.png" alt=""></p>
<p>在这个阶段，$\mathcal{S}_1$ 结合以及盲化来自所有数据拥有者的数据，$\mathcal{S}_2$ 对盲化后的数据执行学习。</p>
<p>在使用下面的方式将来自所有数据拥有者的数据组合后可以获得 $A = X^T X + \lambda I$（其中 $\lambda$ 是图1中的正则化参数，$I$ 是单位矩阵）和 $\vec{b} = X^T \vec{y}$：在前一个阶段 $\mathcal{S}_1$ 获得了 $A^1,…,A^m$ 和 $\vec{b}^1,…,\vec{b}^m$，于是有</p>
<script type="math/tex; mode=display">
A = \sum^{m}_{j=1} A_j + \lambda I \quad \mathrm{and} \quad b = \sum^m_{j=1} b_j</script><p>因为本文使用CRT表示，需要计算 $A^{p_i} = A \bmod p_i$ 和 $\vec{b}^{p_i} = \vec{b} \bmod p_i$ 对每个 $i \in [t]$，而不是 $A, \vec{b}$。为此，$\mathcal{S}_1$ 使用LHE方案的线性同态从 $A^{j, p_i}, \vec{b}^{j, p_i}$ 计算 $A^{p_i}, \vec{b}^{p_i}$（参见图3中的步骤1）。</p>
<p>本文的盲化方法类似3.2小节中的描述，但需要进行一些修改去兼容CRT表示。具体地说，$\mathcal{S}<em>1$ 选择一个随机的可逆矩阵 $R \in \mathbb{Z}^{d \times d}</em>{N}$ 和随机的 $\vec{r} \in \mathbb{Z}^d<em>N$，然后计算 $C = A \cdot R$ 和 $\vec{v} = \vec{b} + A \cdot \vec{r}$。另外，由于对每个 $i \in [t]$，对 $A^{p_i}, \vec{b}^{p_i}$ 的操作是在 $\mathbb{Z}</em>{p_i}$ 内的，所以使用 $R^{p_i} = R \bmod p_i$ 和 $\vec{r}^{p_i} = \vec{r} \bmod p_i$ 来执行盲化，于是盲化后的数据矩阵和响应向量分别为 $C^{p_i} = A^{p_i} \cdot R^{p_i} \bmod p_i$ 和 $\vec{v}^{p_i} = \vec{b}^{p_i} + A^{p_i} \cdot \vec{r}^{p_i} \bmod p_i$（见图3中的步骤3a）。$C^{p_i}, \vec{v}^{p_i}$ 是由 $\mathcal{S}_1$ 使用LHE方案的线性同态来计算的，然后发送给 $\mathcal{S}_2$。$\mathcal{S}_2$ 解密这些密文来获取 $C^{p_i}, \vec{v}^{p_i}, i \in [t]$，然后使用CRT重构来恢复 $C, \vec{v}$。</p>
<p>然后 $\mathcal{S}_2$ 计算 $C^{-1} = \mathsf{adj}(C) / \mathsf{det}(C)$（其中 $\mathsf{adj}(C), \mathsf{det}(c)$ 分别表示 $C$ 的伴随矩阵和行列式）来求解线性系统 $C \cdot \vec{w} = \vec{v}$，获得盲化后的模型 $\vec{w}^<em>$ 并发送给 $\mathcal{S}_1$。于是 $\mathcal{S}_1$ 可以计算 $\vec{w} = R \cdot \vec{w}^</em> - \vec{r}$ 来去盲化。这给出了 $\mathbb{Z}^d_N$ 中的一个模型，$\mathbb{Q}^d$ 中的相应模型可以使用有理重构从该模型中重构出来(参见第3.2节中的讨论)。</p>
<h1 id="将SIMD集成到LoPED"><a href="#将SIMD集成到LoPED" class="headerlink" title="将SIMD集成到LoPED"></a>将SIMD集成到LoPED</h1><h2 id="SIMD背景知识"><a href="#SIMD背景知识" class="headerlink" title="SIMD背景知识"></a>SIMD背景知识</h2><p>支持单指令多数据(SIMD)的加密方案和实现包括：Brakerski-Gentry-Vaikuntanathan和Fan-Vercauteren的基于RLWE的方案(通常称为BGV/FV)及其在HElib和SEAL库中的实现。这些方案允许在单个密文中将多个消息“打包”在不同的“槽”中。本文将打包参数，即打包在一个密文中的消息数目记为 $\mathsf{sl}$，并且密文中的不同时隙记为 $\mathbf{c} = (\mathbf{c}(1),…,\mathbf{c}(\mathsf{sl}))$。对打包密文的操作以SIMD（单指令多数据）方式完成。例如，由 $c=a \odot b$ 表示的SIMD乘法定义为 $\mathbf{c}(i) = \mathbf{a}(i) \odot \mathbf{b}(i)$，其中 $i = 1,…,\mathsf{sl}$。</p>
<p>重要的是要注意，在整个计算过程中幼稚地使用SIMD可能不会提高效率，因为涉及不同时隙上的计算的操作(例如，矩阵乘法，见下文)会招致高开销，这实际上可能会损害效率。</p>
<h2 id="将SIMD集成到LoPED-1"><a href="#将SIMD集成到LoPED-1" class="headerlink" title="将SIMD集成到LoPED"></a>将SIMD集成到LoPED</h2><p>首先看看LoPED中同态计算的操作：</p>
<ol>
<li>向量相加（图3步骤1）</li>
<li>矩阵相加（图3步骤1）</li>
<li>矩阵相乘（图3步骤3a）</li>
<li>矩阵向量乘法（图3步骤3a）</li>
</ol>
<p>在这些操作中最昂贵的是第三个，因此本文将其与作者引入的矢量的新表示法以及作者为有效执行上述其他操作而设计的新协议相结合。</p>
<h3 id="矩阵编码和逐个矩阵乘法"><a href="#矩阵编码和逐个矩阵乘法" class="headerlink" title="矩阵编码和逐个矩阵乘法"></a>矩阵编码和逐个矩阵乘法</h3><p>如上所述，本文使用 <em>Secure Out-sourced Matrix Computation and Application to Neural Networks</em> 的方案来使用SIMD进行高效的矩阵乘法，因此使用它们的矩阵编码。上面的方案区分从左侧相乘的矩阵和从右侧相乘的矩阵，并对每个矩阵使用不同的编码。设 $L$ 和 $R$ 是两个 $d\times d$ 矩阵，我们希望计算 $A=L \cdot R$，现在描述 $L$ 和 $R$ 的编码。</p>
<h4 id="Type-L-和-Type-R-编码以及-Type-N-表示"><a href="#Type-L-和-Type-R-编码以及-Type-N-表示" class="headerlink" title="Type-L 和 Type-R 编码以及 Type-N 表示"></a>Type-L 和 Type-R 编码以及 Type-N 表示</h4><p>本文将矩阵 $L$（乘积中的左矩阵）的编码表示为 Type-L 编码，其由 $L$ 的 $d$ 个旋转 $L_1,…,L_d$ 组成，其中 $L_i$ 为一个 $L$ 旋转其行后计算得到的 $d \times d$ 矩阵；类似地，将矩阵 $R$（乘积中的右矩阵）的编码表示为 Type-R 编码，也由 $d$ 个旋转组成，每个 $R_i$ 是 $R$ 旋转其列后得到的 $d \times d$ 矩阵（例子见图4）。然后用 Type-N 表示不作任何处理的原始矩阵的排列。</p>
<p>对于以上两种编码，个人的理解是（拿 $L$ 来说）：</p>
<ul>
<li>$L_1$：第 $i$ 行的元素往前移动 $i-1$ 个位置（前 $i-1$ 个移动到后面）；</li>
<li>$L_2$：第 $i$ 行的元素往前移动 $i$ 个位置；</li>
<li>以此类推：$L_j$：第 $i$ 行的元素往前移动 $i+j-2$ 个位置。</li>
</ul>
<p>$R$ 也是类似的。</p>
<p>作者还说到可以将这 $d$ 个矩阵打包到较少数量的密文中，从而减少开销。具体地说，原来的矩阵表示需要 $d^2$ 密文，而本文的表示需要 $d \cdot \lceil \frac{d^2}{\mathsf{sl}} \rceil$ 密文(当 $\mathsf{sl} &gt; d$ 时，其优于 $d^2$)。</p>
<h4 id="逐个矩阵乘法"><a href="#逐个矩阵乘法" class="headerlink" title="逐个矩阵乘法"></a>逐个矩阵乘法</h4><p><img src="http://images.yingwai.top/picgo/LoPEDf4.png" alt=""></p>
<p>矩阵乘法的例子见上图，计算 $A = L \cdot R$ 可以分解成计算 $A = \sum^d_{i=1} A_i$，其中 $A_i = L_i \odot R_i$ 为两个矩阵的对应元素相乘。</p>
<p>在我们的协议中，我们将加密矩阵与公共矩阵相乘(参见图3中的步骤3a)。这是使用基础LHE方案的 $\mathsf{Eval}$ 算法完成的，用 $\mathsf{Eval}(\mathsf{pk},\mathsf{MatMult}, \mathbf{L}, R)$ 表示在输入电路 $C<em>{\mathsf{MatMult}, R}$ 和密文 $\mathbf{L}$ 上运行 $\mathsf{Eval}$，其中 $C</em>{\mathsf{MatMult}, R}$ 输入一个矩阵 $L$ 的Type-L编码，计算输出得到其与一个公共矩阵 $R$ 的乘积 $A = L \cdot R$。</p>
<h4 id="通过序列化提高效率"><a href="#通过序列化提高效率" class="headerlink" title="通过序列化提高效率"></a>通过序列化提高效率</h4><p>本文通过将多个矩阵条目打包到单个密文中来提高效率（并克服了保存每个矩阵的多个旋转副本所带来的开销）。这是通过首先将 $d \times d$ 矩阵表示(“序列化”)为长度为 $d^2$ 的向量来实现的。</p>
<p><img src="http://images.yingwai.top/picgo/LoPEDf5.png" alt=""></p>
<p>就是将矩阵从左到右、从上到下，按列的顺序打包到密文中。也就是说，$A$ 的元素 $A_{c,l}$ 出现在串行化后的 $A$ 的第 $((c−1)d+l)$ 个位置。然后，可以将串行化矩阵（如果需要则用零填充）加密成密文（打包到时隙中）。</p>
<h3 id="向量表示"><a href="#向量表示" class="headerlink" title="向量表示"></a>向量表示</h3><p>本文描述了两种不同的矢量编码，每种编码都用于优化不同操作的复杂度。第一个编码称之为Type-M，允许高效的矩阵-向量乘法。第二种编码称之为Type-A，允许高效的向量相加。</p>
<p><img src="http://images.yingwai.top/picgo/LoPEDf6.png" alt=""></p>
<p>在计算矩阵-向量乘法时，首先将向量映射为一个 $d \times d$ 矩阵（Type-M编码：其中第一列为向量，其余列用0填充），然后再将该矩阵编码为Type-R矩阵，进行矩阵乘法。而Type-A编码则是对Type-M矩阵的序列化。</p>
<p>我们注意到，虽然可以对类型M编码执行加法，但它的效率低于将两个类型A编码相加。例如当 $\mathsf{sl}=d$ 时，将两个Type-M向量相加需要 $d$ 次运算，但是添加两个Type-A编码只需要一次操作。</p>
<p><img src="http://images.yingwai.top/picgo/LoPEDf7.png" alt=""></p>
<p>Type-M编码的向量与Type-L编码的矩阵相乘得到的结果序列化后，直接把多余的0去掉就可以变成与Type-A编码的向量格式一致，从而可以直接把两个向量相加（例子见图7）。</p>
]]></content>
      <categories>
        <category>Papers</category>
      </categories>
      <tags>
        <tag>PPML</tag>
        <tag>Linear Regression</tag>
        <tag>HE</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记 Privacy-preserving SVM on Outsourced Genomic Data via Secure Multi-party Computation</title>
    <url>/2020/07/02/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-Privacy-preserving-SVM-on-Outsourced-Genomic-Data-via-Secure-Multi-party-Computation/</url>
    <content><![CDATA[<p><em>Huajie Chen, Ali Burak Ünal, Mete Akgün, Nico Pfeifer∗</em></p>
<p><a href="https://dblp.uni-trier.de/db/conf/codaspy/iwspa2020.html#ChenUAP20" target="_blank" rel="noopener">IWSPA@CODASPY 2020</a></p>
<p><a href="https://dl.acm.org/doi/abs/10.1145/3375708.3380316" target="_blank" rel="noopener">https://dl.acm.org/doi/abs/10.1145/3375708.3380316</a></p>
<a id="more"></a>
<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>机器学习方法以其高效、强大的数据挖掘能力被广泛应用于医学数据研究等领域。然而，将不受保护的数据提交给试图训练机器学习模型的第三方，当第三方受到对手的攻击时，可能会受到数据泄露和隐私侵犯的影响。因此，设计一种执行加密计算的协议是不可避免的。为了解决这个问题，我们提出了基于安全多方计算的协议来私下训练支持向量机模型。利用半诚实对手模型和不经意转移，所提出的协议能够在不牺牲个人隐私的情况下对来自不同来源的组合数据进行非线性支持向量机训练。这些协议被应用于在HIV序列数据上训练具有径向基函数核的支持向量机模型，以预测某种抗病毒药物的疗效，这只有在病毒只能使用人类CCR5辅助受体进入细胞的情况下才有效。以10个由随机生成的整数组成的数据源(每个数据源包含100个标记样本)的合成数据为基准，该协议在算术/布尔电路中分别平均消耗了2991.386/166.912毫秒的在线时间。优化后的参数对训练数据的交叉验证平均达到0.5819 F1分，随后在由CCR5及其亚型蛋白序列组成的测试数据集上交叉验证达到0.7058 F1分。在实际数据上的完整训练和测试过程，编码后总共包含766个样本，924个特征，分别使用算术/布尔电路平均耗时43.75/15.84秒，与文献中的一些现有研究相比，这表明了我们协议的有效性和高效性。</p>
<h1 id="INTRODUCTION"><a href="#INTRODUCTION" class="headerlink" title="INTRODUCTION"></a>INTRODUCTION</h1><p>近年来，机器学习方法在许多科学研究领域得到了广泛的应用，通过发现数据中的模式来解决问题。在医疗数据上应用机器学习方法，例如支持向量机(SVM)，使得能够检测先前未知或对于人类实体来说太难识别的模式。因此，它可以为医疗技术的发展做出贡献。例如，通过使用聚类、多维缩放和支持向量机来表征新的艾滋病毒耐药突变[19]。以“稀疏组套索回归”为核心的基于网络的预后预测(NOP)方法已被编制成基于基因表达谱的乳腺癌状态预测方法[1]，人工神经网络(ANN)可以给出癌症的预测和预后[3]。</p>
<p>随着最新的技术，如第二代/第三代DNA测序，获得完整的人类基因组已经变得高效和廉价，导致许多研究解决了各种与健康相关的研究问题。然而，在第三方访问数据的过程中，患者的隐私可能会受到泄露。针对这一问题，设计了基于安全多方计算(MPC)[13，14]和同态加密[6，8，10]的隐私保护机器学习方法。然而，这些方法在不同的安全假设下表现出不同的性能。这意味着他们必须在隐私和性能之间进行权衡。据我们所知，利用预测控制训练非线性支持向量机缺乏有效的方法。</p>
<h2 id="Contributions"><a href="#Contributions" class="headerlink" title="Contributions"></a>Contributions</h2><p>在本文中，我们设计并实现了一个基于MPC的解决方案，将支持向量机训练外包给两个非合谋的代理服务器。我们的目标是使支持向量机在来自多个来源的海量数据上的隐私保护训练变得高效。为此，我们提出了基于算术秘密共享的Beaver乘法三元组[2]和基于布尔秘密共享的Goldreich-MicaliWigderson(GMW)协议[7]的两种不同的解决方案。我们使用单指令多数据(SIMD)操作，允许并行化来提高协议的性能。</p>
<p>在我们的协议中，初始化阶段可以在本地完成。来自各种数据源(如医院)的基因组序列数据首先采用独热编码进行编码。接下来，编码序列被分成两份，并分别分配给计算方。自己的点积也在当地计算、拆分并分发给各方。在训练过程中，在计算方之间进行MPC，得到计算结果，然后将计算结果发送给用户并进行重构，得到包含来自不同来源的数据的点积以及来自同一方的数据的点积的完整的GRAM矩阵。最后，用户在所需的核矩阵上训练SVM模型，该核矩阵可以通过导出的GRAM矩阵来计算。类别标签在纯文本域中发送，因为它们不会显示关于样本的任何额外信息。</p>
<p>我们将我们的方案应用于HIV序列数据，以预测某种抗病毒药物的疗效，只有当病毒只能使用人类CCR5辅助受体进入细胞时，这种方法才有效。我们设计的基于算术和布尔电路的协议对10个由随机生成的整数组成的数据源的在线执行电路消耗了2991.38/166.912毫秒的时间，每个数据源包含100个带标签的样本，每个样本中有924个特征，即列。我们通过F1-Score对我们的结果进行了评估，训练数据的平均得分为0.5819，测试数据的平均得分为0.7058，证明了该协议的有效性。在算术/布尔电路协议中，对实际数据的完整训练和测试过程分别花费了算术/布尔电路协议的43.75/15.84秒，编码后总共包含766个样本，924个特征。</p>
<p>论文的其余部分安排如下：第二部分介绍了相关工作。第3节和第4节分别列出了所需的预备知识和协议的详细概念。第五节对协议进行了评价和进一步的讨论。第六节对本文进行了总结。</p>
<h1 id="PRELIMINARIES"><a href="#PRELIMINARIES" class="headerlink" title="PRELIMINARIES"></a>PRELIMINARIES</h1><p>在这一部分中，给出了我们的方法所使用的方法和算法。</p>
<h2 id="序列独热编码"><a href="#序列独热编码" class="headerlink" title="序列独热编码"></a>序列独热编码</h2><p>在数据预处理阶段，我们使用的序列通过一次热编码被编码成数字形式。假设 $c_i$ 是序列 $S$ 中位置 $i$ 处的角色，其中 $i \in \mathbb{Z}, i&lt; |S|$。因为有20个氨基酸残基和1个GAP，所以 $c_i$ 可以编码成21位的形式。</p>
<p>例如，如果 $c_i$ 是丙氨酸，则 $c_i$ 将被编码为 “$1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0$”，如果 $c_i$ 是一个GAP，则 $c_i$ 为 “$0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1$”。随着编码程序的迭代，整个序列将被编码成上述格式。</p>
<h2 id="序列相似性的度量"><a href="#序列相似性的度量" class="headerlink" title="序列相似性的度量"></a>序列相似性的度量</h2><p>为了评估序列的相似性，利用了汉明距离的倒数。汉明距离被描述为在具有相同长度的两个字符串之间的相同位置处的不同字符对的数量。例如，给定两个长度相同的字符串 $s<em>1$ 和 $s_2$，每个字符串中总共有 $l$ 个字符。$D</em>{\mathbb{H}}$ 为字符串 $s_1$ 和 $s_2$ 定义的汉明距离：</p>
<script type="math/tex; mode=display">
D_{\mathbb{H}}(s_1, s_2) = \sum^{l}_{i=1}I(s_1(i),s_2(i))</script><p>其中 $l$ 是序列的长度，$I$ 是函数，如果给定的两个字符 $s<em>1(i)$ 和 <script type="math/tex">s_2(i)</script> 相同，则该函数返回1，否则返回0。在本项目中，两个序列的碱基相似度与汉明距离成反比，即 $l-D</em>{\mathbb{H}}(s_1, s_2)$。</p>
<p>根据第3.1节，现在可以将一个序列视为二进制值的一个向量 $\vec{v}$。如果同一位置的任意两个序列中的任意两个字符相同，则这两个编码字符的点积 $\vec{v_1} \cdot \vec{v_2}$ 结果为1，否则为0。在这种情况下，两个序列的相似性越大，点积就越高。一旦计算了所有可能的序列对的相似度，就获得了矩阵 $\mathbf{M} \in \mathbb{Z}^{n \times n}$，其中 $n$ 表示计算中涉及的序列的数目。</p>
<h2 id="安全多方计算"><a href="#安全多方计算" class="headerlink" title="安全多方计算"></a>安全多方计算</h2><p>这里作者采用两方的设置，可以参考<a href="https://yuyingwai.cn/2020/06/11/论文笔记-ABY-A-Framework-for-Efficient-Mixed-Protocol-Secure-Two-Party-Computation/" target="_blank" rel="noopener">ABY</a>中第2节的算术共享和布尔共享。</p>
<h2 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a>支持向量机</h2><p>支持向量机作为一种有监督的机器学习方法，经常被用来解决分类问题。它们已被证明在解决中、低尺度预测问题上优于许多其他方法，特别是在结合核函数的情况下。支持向量机的优化问题表示如下：</p>
<script type="math/tex; mode=display">
\begin{align}
\min_{\omega \in \mathbb{R}^d, b\in \mathbb{R}, \xi \in \mathbb{R}^n} \ \ \  &\frac{1}{2} ||\omega||^2 + \frac{C}{n}\sum^n_{i=1} \xi_i \\
\mbox{s.t.} \ \ \  &Y_i(\langle \omega, X_i \rangle + b) \geq 1 - \xi_i \tag{1} \\
 &i=1,...,n,\  \xi_i \geq 0
\end{align}</script><p>其中，$\omega, b, \xi, C, n$ 遵循列出的顺序，分别表示具有 $n$ 维数的向量、干扰 $\omega$ 和 $X_i$ 之间的点积的参数、确定点可以超出超平面多远的参数、惩罚的权重以及数据点的数量 $Y$。$X_i$ 和 $Y_i$ 表示数据特征向量及其标注。在上述支持向量机模型中，数据点被允许穿过超平面，但将受到松弛变量 $\xi_i$ 的惩罚，该松弛变量由惩罚因子 $C$ 缩放。通过调整 $C$，可以改变惩罚的权重。</p>
<h2 id="径向基函数核"><a href="#径向基函数核" class="headerlink" title="径向基函数核"></a>径向基函数核</h2><p>RBF核因其有效性和普适性而被广泛应用于支持向量机分类中[9]，其核函数定义如下：</p>
<script type="math/tex; mode=display">
\begin{align}
K(\vec{x}, \vec{y}) &= \exp(- \frac{||\vec{x} - \vec{y}||^2}{2\sigma^2}) \tag{2}\\ 
&= \exp(-\frac{\vec{x} \cdot \vec{x} - 2 \vec{x} \cdot \vec{y} + \vec{y} \cdot \vec{y}}{2 \sigma^2})
\end{align}</script><p>在这个方程中，“$\cdot$” 表示向量之间的点积算子，而 $\sigma$ 则作为调整相似度的参数，当 $\sigma$ 增大时，指数函数的结果将趋于接近1，表明两个序列的相似度较高，反之亦然，此外，方程的第二行表明，在我们的协议中，只能根据用于计算径向基核矩阵的向量的点积来计算径向基核。</p>
<h1 id="隐私保护支持向量机"><a href="#隐私保护支持向量机" class="headerlink" title="隐私保护支持向量机"></a>隐私保护支持向量机</h1><p>在这一部分中，我们系统地描述了我们的隐私保护支持向量机协议。在4.1节中，我们将对其进行概述，随后将详细说明协议的各个阶段。这里继承了3.3节中的记号。</p>
<h2 id="系统概述"><a href="#系统概述" class="headerlink" title="系统概述"></a>系统概述</h2><p>在我们的协议中，来自多个医疗机构的基因组数据集以秘密共享的形式被外包给两个非共谋的代理服务器。两个非合谋的代理服务器在收到允许查询数据的第三方(如研究人员)的请求后，执行MPC以生成支持向量机训练所需的样本的GRAM矩阵。协议结构如图1所示，在此协议中，有以下各方扮演的角色：</p>
<ol>
<li><strong>数据源：</strong>在此上下文中，它们是医疗机构，表示为 $H_j$，其中 $j \in \mathbb{N}^+ , j \leq n$，其中 $n$ 表示数据源的数量。他们以秘密共享的形式将基因组数据上传到两个代理服务器。</li>
<li><strong>用户：</strong>用户 $U$，例如科学研究人员，他请求两个代理服务器对秘密共享数据执行一些安全计算，以产生用于支持向量机训练的格拉姆矩阵。</li>
<li><strong>两个代理服务器：</strong>两个非合谋服务器作为计算方，记为 $P_i$，其中 $i \in {0,1}$ 负责格拉姆矩阵的安全计算。在利用基因组数据训练机器学习模型的同时，选择两个不完全信任的第三方被认为是确保隐私保护的最实用和最实惠的解决方案[17]。</li>
</ol>
<p><img src="http://images.yingwai.top/picgo/ppossvmf1.png" alt=""></p>
<center>
    <i>图1 协议结构：从数据源到MPC，最终到用户进程</i>
</center>




<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ol>
<li>$H_j$ 中的原始序列数据在本地编码为数字矢量(参见第4.2节)。</li>
<li>在 $H_j$ 中，编码的序列数据在本地被分成两个共享 $A/B$，并分别发送到 $P_0$ 和 $P_1$ (参见第4.3节)。</li>
<li>在 $H_j$ 中本地预先计算自身点积，然后它们也被分成两个份额 $A/B$，并分别发送到 $P_0$ 和 $P_1$ (参见第4.4节)。</li>
</ol>
<h3 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h3><ol>
<li>接收到来自 $U$ 的查询后，在 $P_0$ 和 $P_1$ 之间进行预测编码，以在包含编码序列的文件之间获得所需的处理数据(参见第4.5节和第4.6节)。</li>
<li>然后对自积和交叉点乘积进行积分以获得整个格拉姆矩阵，并将其传递给 $U$ (参见第4.7节)。</li>
<li>在 $U$ 中使用格拉姆矩阵来训练支持向量机模型并测试结果模型(参见第4.8节)。</li>
</ol>
<h2 id="蛋白质序列编码"><a href="#蛋白质序列编码" class="headerlink" title="蛋白质序列编码"></a>蛋白质序列编码</h2><p>序列编码功能采用代表一个残基的一个字符，并将其编码为21位格式，如3.1节所述。输出文件包含编码序列，其中每行代表一个蛋白质序列，21列中的每一列代表一个残基(或gap)。</p>
<h2 id="编码数据的秘密共享"><a href="#编码数据的秘密共享" class="headerlink" title="编码数据的秘密共享"></a>编码数据的秘密共享</h2><p>使用算术共享和布尔共享将原始编码数据分割成两个共享。在基于算术共享的协议中，产生的随机整数小于 $2^l$。此后，随机整数将作为共享并帮助构建另一个共享。在基于布尔共享的协议中，随机比特被生成为一个共享，并且它们被用来构造另一个共享。最终，在这两种协议中，两个共享将分别写入两个文件。使用算术共享的编码数据的秘密共享如图2所示。</p>
<p><img src="http://images.yingwai.top/picgo/ppossvmf2.png" alt=""></p>
<center>
    <i>图2 共享数据生成</i>
</center>




<h2 id="本地计算自点积"><a href="#本地计算自点积" class="headerlink" title="本地计算自点积"></a>本地计算自点积</h2><p>数据源计算“自身点积”，这意味着每个数据点的两个实例的点积是在本地计算的。这样的本地计算降低了总的通信成本。该过程的结果是由前面提到的共享数据生成技术产生的点积矩阵的两部分。点积矩阵的份额接下来被分发到两个第三方代理服务器上，即 $P_0$ 和 $P_1$，然后可以在 $U$ 上重建这些份额。</p>
<h2 id="使用算术电路进行点积计算"><a href="#使用算术电路进行点积计算" class="headerlink" title="使用算术电路进行点积计算"></a>使用算术电路进行点积计算</h2><p>所有需要乘成两个长数组的文件都被集成，省略了重复SIMD数据生成的不必要步骤。例如，假设文件 $A$、文件 $B$、文件 $C$ 分别表示为 $f_a$，$f_b$ 和 $f_c$，则这些文件中分别包含3、2和1个共享编码序列，由 $a_i,b_i,c_i$ 表示，其中 $i$ 表示某个文件中的序列索引。长阵列A将是 “$a_1a_2a_3a_1a_2a_3a_1a_2a_3b_1b_2$”，而另一个长阵列将是 “$b_1b_1b_1b_2b_2b_2c_1c_1c_1c_1c_1$”。这些操作分别称为 $\mbox{GetLongArrayA}()$ 和 $\mbox{GetLongArrayB}()$。</p>
<p><img src="http://images.yingwai.top/picgo/ppossvma1.png" alt=""></p>
<p>算法1首先构造两个长数组，以减少创建SIMD数据的次数。通过一次乘以两个长阵列，成功地降低了协议的运行时间。此算法省略了文件与其自身之间的点积计算，因为它可以先前本地计算，如第4.4节所述。通过将数组放入SIMD共享，从而实现对多个数据的操作。在乘法之后，然后执行每个点积计算块中的乘法结果的求和，以便分别对来自两个向量的每对元素的乘法进行局部求和。最后，将最终结果加载到数组中。图3显示了基于算术电路的安全协议的一般结构。</p>
<h2 id="基于布尔电路的点积计算"><a href="#基于布尔电路的点积计算" class="headerlink" title="基于布尔电路的点积计算"></a>基于布尔电路的点积计算</h2><p>算法2类似于算法1。协议的结构如图3所示。两者之间的区别在于共享类型和电路类型。在此上下文中，仅在0和1之间执行乘法，这符合布尔共享的位长(1位)。因此，布尔电路中的安全与运算可以取代算术电路中的安全乘法，实现更好的计算性能。因此，共享的位长可以减少到1，这可以在通信过程中节省大量的计算能力。就布尔份额而言，它与算术份额差别很大，因此在以以前的方式局部相乘后无法求和。因此，设计了基于安全加法的特定函数，用于在点积块中对乘法结果求和。</p>
<p><img src="http://images.yingwai.top/picgo/ppossvmf3.png" alt=""></p>
<center>
    <i>图3 点积计算</i>
</center>

<p><img src="http://images.yingwai.top/picgo/ppossvma2_.png" alt=""></p>
<h2 id="结果数组集成与点积矩阵生成"><a href="#结果数组集成与点积矩阵生成" class="headerlink" title="结果数组集成与点积矩阵生成"></a>结果数组集成与点积矩阵生成</h2><p>通过我们的协议，可以在 $U$ 上手动将自身的点积重构成一个数组。然后计算自/交叉点乘积数组中访问位置的索引表。基于索引表，将生成 $2D$ 矢量，即 $n \times n$ 矩阵，其中 $n$ 表示计算中涉及的序列总数，并将其写入文件中作为最终输出。在机器学习中，必须严格遵循数据和标签的顺序，这样才能正确地训练模型。因此，数组的排序过程是必不可少的。</p>
<h2 id="支持向量机交叉验证实验"><a href="#支持向量机交叉验证实验" class="headerlink" title="支持向量机交叉验证实验"></a>支持向量机交叉验证实验</h2><p>在所有数据中，随机选取20%的数据对模型进行检验。在计算格拉姆矩阵的基础上，通过5次交叉验证对支持向量机的误分类惩罚参数 $C$、类不平衡权值 $W$ 和径向基函数的相似度调整参数 $\sigma$ 进行优化。$C$ 和 $\sigma$ 分别在集合 $s<em>C=[10^{-3},10^{-2},\cdot \cdot \cdot,10^2, 10^3]$，$S</em>{\sigma}=[0.125, 0.25, 0.5, 1, 2, 4, 8]$ 上进行优化，而类权重选自集合 $S_W = [1:1,1:2,1:4,1:8,1:16]$，前者表示标签0的类权重，前者占多数，后者表示标签1的类权重。最终，确定在优化过程中达到最高F1得分的参数集。然后，利用这些最优参数对最终模型进行训练。最后，利用测试数据对训练好的模型进行检验，并用F1得分对预测结果进行评估。</p>
<h2 id="安全性分析"><a href="#安全性分析" class="headerlink" title="安全性分析"></a>安全性分析</h2><p>将数据外包给 $N$ 非合谋、半诚实的第三方是在[11]中首次研究的。给出了通用解决方案的安全性证明。在我们的协议中，利用[11]中的外包思想，多个医疗机构将基因组数据外包给两个非合谋、半诚实的第三方。我们需要保护个人的隐私，他们的基因组数据被外包给两个非串通的服务器。我们基于算术电路和布尔电路的协议的安全性依赖于分别基于Beaver乘法三元组的协议[2]和GMW协议[7]的已证明的安全性。一个半诚实的对手最多可以攻破一个代理服务器，就可以获得个人私有基因组数据的一份。我们知道基因组数据是通过算术或布尔共享来共享的，所以它看起来像是统一随机的数据。这确保了敌手不能获得任何有关个人的私人基因组数据。我们的协议是安全的，不会受到恶意数据提供商和用户的攻击。数据提供者仅以共享的形式向两个代理服务器发送基因组数据，并且不接收来自其他方的任何消息。他们的恶意输入不会导致任何数据泄露。用户输入的任何变化都会导致不同的分析响应。这确保了针对恶意用户的安全性。所有通信方之间的机密性、完整性和认证都是使用最先进的技术(如TLS[5])提供的。</p>
<h1 id="CONCLUSION"><a href="#CONCLUSION" class="headerlink" title="CONCLUSION"></a>CONCLUSION</h1><p>本文提出了两种支持向量机隐私保护训练方案，用于支持向量机对来自多个来源的外包基因组数据的隐私保护训练。在我们的方案中，我们利用算术秘密共享、布尔秘密共享和不经意转移来同时保证支持向量机训练的安全和高效。我们的协议在两个半可信代理服务器上执行，每个服务器只访问训练支持向量机所需的结果点积的一部分。我们的方案在半诚实对手模型下是安全的。我们在真实的HIV数据集和合成数据集上进行了实验，以显示我们协议的有效性和效率。在未来的工作中，我们将使我们的协议在不显著降低性能的情况下确保免受恶意攻击的安全。</p>
]]></content>
      <categories>
        <category>Papers</category>
      </categories>
      <tags>
        <tag>MPC</tag>
        <tag>PPML</tag>
        <tag>Secret Sharing</tag>
        <tag>SVM</tag>
        <tag>HIV co-receptor prediction</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记 SecureML: A System for Scalable Privacy-Preserving Machine Learning</title>
    <url>/2020/06/17/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-SecureML-A-System-for-Scalable-Privacy-Preserving-Machine-Learning/</url>
    <content><![CDATA[<p><em>Payman Mohassel,  Yupeng Zhang</em></p>
<p><a href="https://dblp.uni-trier.de/db/conf/sp/sp2017.html#MohasselZ17" target="_blank" rel="noopener">IEEE Symposium on Security and Privacy 2017</a></p>
<p><a href="https://eprint.iacr.org/2017/396.pdf" target="_blank" rel="noopener">https://eprint.iacr.org/2017/396.pdf</a></p>
<a id="more"></a>
<h1 id="文章贡献"><a href="#文章贡献" class="headerlink" title="文章贡献"></a>文章贡献</h1><ul>
<li><strong>两方计算：</strong>第一个提出在两方计算模型下处理机器学习模型问题；</li>
<li><strong>秘密分享：</strong>第一个将秘密分享引入该问题，支持在两方上任意分布的数据；</li>
<li><strong>Secure SGD：</strong>在两方下提出了训练模型的安全SGD算法；</li>
<li><strong>秘密截断：</strong>分析了在秘密分享下如何进行定点数截断问题。</li>
</ul>
<h1 id="计算模型"><a href="#计算模型" class="headerlink" title="计算模型"></a>计算模型</h1><p>本文考虑一个客户端集合 $\mathcal{C}_1,…,\mathcal{C}_m$ 想要使用它们的数据训练一个模型，客户端将数据 $x_i$ 以秘密分享的模式分发给两个非合谋的服务器 $\mathcal{S}_0, \mathcal{S}_1$（例如一方拥有随机数 $r_i$ 而另一方拥有 $x_i - r_i$），服务器交互式地计算函数 $f(x_i)$，得到预测标签 $y_i$。</p>
<p><img src="http://images.yingwai.top/picgo/smlf3.png" alt=""></p>
<p><img src="http://images.yingwai.top/picgo/smlppt1.png" alt=""></p>
<h1 id="PPML"><a href="#PPML" class="headerlink" title="PPML"></a>PPML</h1><p>本文给出了满足隐私保护的线性回归、逻辑回归以及神经网络的协议。</p>
<h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><p>$y = \sum^d<em>{j=1} x</em>{ij} w_j = \vec{x_i} \cdot \vec{w}$</p>
<p><strong>损失函数：</strong></p>
<p>$C(\mathbf{w}) = \frac{1}{n} \sum C_i(\mathbf{w})$，</p>
<p>其中 $C_i(\mathbf{w}) = \frac{1}{2}(\mathbf{x}_i \cdot \mathbf{w} - y_i)^2$。</p>
<p>更新权重的公式为：</p>
<script type="math/tex; mode=display">
\begin{align}
w_j : &= w_j - \alpha \frac{\partial C_i(\mathbf{w})}{\partial w_j} \\
&= w_j - \alpha (\mathbf{x}_i \cdot \mathbf{w} - y_i) x_{ij}
\end{align}</script><p>可以看到只有加法和乘法的运算。</p>
<p>数据是在两个服务器中加法共享的，计算两个数 $\langle a \rangle, \langle b \rangle$ 的和比较简单，两个服务器各自在本地将对应的份额相加即可；计算乘法则比较麻烦，需要借助乘法三元组 $(\langle u \rangle, \langle v \rangle, \langle z \rangle)$ 满足$z = uv \bmod 2^l$：</p>
<p><img src="http://images.yingwai.top/picgo/smlppt2.png" alt=""></p>
<p>接下来就可以得到上述算法的向量版本，以下是文章给出的具体协议：</p>
<p><img src="http://images.yingwai.top/picgo/smlf4.png" alt=""></p>
<p>为了提高效率，使用了batch的方法来更新权重。</p>
<h2 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h2><p>$g(\mathbf{x}_i) = f(\mathbf{x}_i \cdot \mathbf{w}) = \frac{1}{1+e^{-\mathbf{x}_i \cdot \mathbf{w}}}$</p>
<p>和线性回归相比，逻辑回归在线性回归的基础上增加了一个Sigmoid函数，其计算起来很困难，通常是使用多项式去拟合，但需要多项式次数较高且其并不收敛，导致在 $x$ 较大时准确率不高。</p>
<p>因此作者提出了他们称为Secure-computation-friendly activation function：</p>
<script type="math/tex; mode=display">
f(x) = \left\{ \begin{array}{lcl}
0, & \mbox{if} & x < - \frac{1}{2} \\
x + \frac{1}{2}, & \mbox{if} & - \frac{1}{2} \leq x \leq \frac{1}{2} \\
1, & \mbox{if} & x > \frac{1}{2}
\end{array}\right.</script><p>该函数的图像与Sigmoid函数类似：</p>
<p><img src="http://images.yingwai.top/picgo/smlf5.png" alt=""></p>
<p>于是计算完矩阵-向量乘法后还需要计算上面的分段函数，因为要判断 $u+\frac{1}{2}$ 和 $u- \frac{1}{2}$ 的符号，这里算术共享就不是很适合，而Yao共享很适合，因此需要先把共享转换成Yao共享，在<a href="https://yuyingwai.cn/2020/06/11/论文笔记-ABY-A-Framework-for-Efficient-Mixed-Protocol-Secure-Two-Party-Computation/" target="_blank" rel="noopener">ABY</a>框架中有介绍。</p>
<p>这里作者将函数 $f(u)$ 改写成了如下形式，方便乱码电路的计算：</p>
<script type="math/tex; mode=display">
f(u) = (\neg b_2) + (b_2 \wedge (\neg b_1))u</script><p>其中 $b_1, b_2$ 分别为：</p>
<script type="math/tex; mode=display">
b_1 = \left\{ \begin{array}{ll}
0, & \mbox{if} \ \  u+\frac{1}{2} \geq 0 \\
1, & \mbox{otherwise}
\end{array}\right.</script><script type="math/tex; mode=display">
b_2 = \left\{ \begin{array}{ll}
0, & \mbox{if} \ \  u-\frac{1}{2} \geq 0 \\
1, & \mbox{otherwise}
\end{array}\right.</script><p>于是构造电路以 $\langle u \rangle_0 + \frac{1}{2}$ 和 $\langle u \rangle_1$ 作为输出，将它们相加并把结果的符号位 $b_1$ 输出，$b_2$ 同理，最后计算上面的 $f(u)$ 即可。下面是完整的协议：</p>
<p><img src="http://images.yingwai.top/picgo/smlf13.png" alt=""></p>
<h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><p>神经网络可以看作很多个与逻辑回归计算方式一致的神经元组成，用上面逻辑回归中的方法处理即可。</p>
]]></content>
      <categories>
        <category>Papers</category>
      </categories>
      <tags>
        <tag>MPC</tag>
        <tag>PPML</tag>
        <tag>Secret Sharing</tag>
        <tag>Neural Network</tag>
        <tag>Linear Regression</tag>
        <tag>Logistic Regression</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记 Privacy-Preserving Ridge Regression with only Linearly-Homomorphic Encryption</title>
    <url>/2020/08/10/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-Privacy-Preserving-Ridge-Regression-with-only-Linearly-Homomorphic-Encryption/</url>
    <content><![CDATA[<p><em>Irene Giacomelli, Somesh Jha, Marc Joye, C. David Page, and Kyonghwan Yoon</em></p>
<p><a href="https://dblp.uni-trier.de/db/conf/acns/acns2018.html#GiacomelliJJPY18" target="_blank" rel="noopener">ACNS 2018</a></p>
<p><a href="https://link.springer.com/chapter/10.1007/978-3-319-93387-0_13" target="_blank" rel="noopener">https://link.springer.com/chapter/10.1007/978-3-319-93387-0_13</a></p>
<a id="more"></a>
<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>具有L2范数正则化的线性回归(即岭回归)是一种重要的统计技术，它使用线性函数来模拟某些解释值和结果值之间的关系。在许多应用中(例如，个性化医疗中的预测建模)，这些值表示由不愿意共享它们的几个不同方拥有的敏感数据。在这种情况下，训练线性回归模型变得具有挑战性，并且需要特定的密码解决方案。尼古拉恩科等人优雅地解决了这个问题。在标准普尔(奥克兰)2013年。他们提出了一个双服务器系统，使用线性同态加密(LHE)和姚的两方协议(乱码电路)。在这项工作中，我们提出了一种新的系统，它可以只使用LHE(即不使用姚的协议)来训练脊线性回归模型。这极大地提高了整体性能(在计算和通信方面)，因为姚的协议是以前解决方案中的主要瓶颈。在人工生成数据集和真实数据集上验证了该系统的有效性。</p>
<h2 id="本文的贡献"><a href="#本文的贡献" class="headerlink" title="本文的贡献"></a>本文的贡献</h2><p>本文提出了一种新的两服务台模型中的岭回归系统。</p>
<ul>
<li><p>对于第一阶段，作者扩展了Nikolaenko等人使用的方法，涉及使用标记同态加密技术加密任意划分的数据集，以支持通过LHE方案加密的密文对之间的乘法。通过这种方式，作者展示了仅基于LHE的解决方案可以处理比水平分区情况更复杂的场景。</p>
</li>
<li><p>对于第二阶段，作者通过设计一个只利用底层加密方案的线性同态性质求解 $A \boldsymbol{w}=\boldsymbol{b}$ 的加性同态两方协议来避免姚的协议。这可以提高整体性能，特别是显著降低通信开销。作为一个亮点，如果我们水平划分(分成10个大小相等的部分)1000万个实例和20个特征的数据集，我们的隐私保护回归方法运行在2分钟以内，产生1.3MB的通信开销。在[23]中提出的系统需要超过50min和270MB的交换数据来执行类似的计算。</p>
</li>
<li><p>最后，作者注意到基于梯度下降的解决方案使用迭代算法，并且存在估计迭代次数 $t$ 的问题。或者 $t$ 被固定为确保找到模型的良好近似的高值，这为协议带来了更高的复杂度；或者 $t$ 是基于数据集自适应地选择的，这在隐私保护设置中可能是不可行的；或者 $t$ 是基于数据集自适应地选择的，这在隐私保护设置中可能是不可行的。本文求解 $A \boldsymbol{w}=\boldsymbol{b}$ 的解决方案不存在这个问题。</p>
</li>
</ul>
<h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><h2 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h2><p>见<a href="https://yuyingwai.cn/2020/08/09/论文笔记-Linear-Regression-on-Packed-Encrypted-Data-in-the-Two-Server-Model/" target="_blank" rel="noopener">LoPED</a>中的2.1小节。</p>
<h2 id="密码工具"><a href="#密码工具" class="headerlink" title="密码工具"></a>密码工具</h2><p>一般的加法同态算法只能计算一个密文和一个明文的乘积：</p>
<script type="math/tex; mode=display">
\mathsf{cMult}(a,c) = c \odot c \cdots \odot c \quad (a \ \mathrm{times})</script><p>而不能计算两个密文的乘积 $c \times c’$。因此作者在这里使用了一种称为 <em>labeled-homomorphic encryption</em>（labHE）的同态加密技术：</p>
<p>令 $(\mathsf{Gen, Enc, Dec})$ 为一个具有安全参数 $\kappa$ 和明文空间 $\mathcal{M}$ 的LHE方案。假设乘法运算在 $\mathcal{M}$ 中给出；例如 $(\mathcal{M}, +, \cdot)$ 是一个有限环。令 $F: {0,1 }^s \times \mathcal{L} \rightarrow \mathcal{M}$ 是一个有种子空间为 ${0,1}^s \ (s = \mathrm{poly}(\kappa))$ 以及标记空间 $\mathcal{L}$ 的伪随机函数。定义：</p>
<ul>
<li><p>$\mathsf{labGen}(\kappa)$：对输入 $\kappa$，它运行 $\mathsf{Gen}(\kappa)$ 然后输出 $(sk, pk)$。</p>
</li>
<li><p>$\mathsf{localGen}(pk)$：对于每个用户 $i$ 以及公钥作为输入，它在 ${0,1}^s$ 中选取随机种子 $\sigma<em>i$ 然后计算 $pk_i = \mathsf{Enc}</em>{pk}(\underline{\sigma_i})$，其中 $\underline{\sigma_i}$ 是作为 $\mathcal{M}$ 中元素的 $\sigma_i$ 的编码。它输出 $(\sigma_i, pk_i)$。</p>
</li>
<li><p>$\mathsf{labEnc}<em>{pk}(\sigma_i, m, \tau)$：对来自用户 $i$ 的一个带有标签 $\tau \in \mathcal{L}$ 的消息 $m \in \mathcal{M}$，它计算 $b = F(\sigma_i, \tau)$ 然后输出标记的密文 $\boldsymbol{c} = (a, c) \in \mathcal{M \times C}$，其中 $a = m - b$ 在 $\mathcal{M}$ 中而 $c = \mathsf{Enc}</em>{pk}(b)$。</p>
</li>
<li><p>$\mathsf{labMult}(\boldsymbol{c, c’})$：输入两个标记的密文 $\boldsymbol{c} = (a, c)$ 和 $\boldsymbol{c’} = (a’, c’)$，它计算一个密文下的“乘积” $d = \mathsf{labMult}(\boldsymbol{c, c’})$ 为 $d = \mathsf{Enc}<em>{pk}(a \cdot a’) \odot \mathsf{cMult}(a, c’) \odot \mathsf{cMult}(a’, c)$。容易验证 $\mathsf{Dec}</em>{sk}(d) = m \cdot m’ - b \cdot b’$：</p>
<script type="math/tex; mode=display">
\begin{align}
m \cdot m' &= (a+b)(a'+b')\\
&= a \cdot a' + a \cdot c' + a' \cdot c + b \cdot b'
\end{align}</script></li>
<li><p>$\mathsf{labDec}<em>{sk}(pk_i, pk_j, \tilde{c})$：输入 $\tilde{c}$，它首先从 $\mathsf{Dec}</em>{sk}(pk<em>i)$ 恢复 $\sigma_i$ 和 $\sigma_j$。然后，它对所有 $t = 1,…,n$ 计算 $b_t = F(\sigma_i, \tau_t)$ 和 $b’_t = F(\sigma_j, \tau_t’)$。最后，它计算 $\tilde{b} = \sum^n</em>{t=1} b<em>t \cdot b_t’$ 和 $\tilde{m} = \mathsf{Dec}</em>{sk}(\tilde{c}) + \tilde{b}$。容易验证 $\tilde{m} = \sum^n_{t=1} m_t \cdot m_t’$。</p>
</li>
</ul>
<h1 id="系统概览"><a href="#系统概览" class="headerlink" title="系统概览"></a>系统概览</h1><p><a href="https://yuyingwai.cn/2020/08/09/论文笔记-Linear-Regression-on-Packed-Encrypted-Data-in-the-Two-Server-Model/" target="_blank" rel="noopener">LoPED</a>是基于本篇文章的，因此设定差不多。本文考虑这样的设置，其中训练数据集对于想要训练岭回归模型的实体不是明文可用的。相反，后者可以访问数据的加密副本，因此需要处理密钥的一方的帮助才能了解所需的模型。更准确地说，本文中的协议是为以下各方设计的：</p>
<ul>
<li><em>数据拥有者</em>：有 $m$ 个数据拥有者 $DO_1,…,DO_m$；每个 $DO_i$ 都有一个私有的数据集 $\mathcal{D}_i$ ，并且愿意共享其加密后的版本。</li>
<li><em>机器学习引擎</em>（MLE）：这是希望对通过合并本地数据集 $\mathcal{D}_1,…,\mathcal{D}_m$ 而获得的数据集 $\mathcal{D}$ 运行线性回归算法，但只能访问它们的加密副本的一方。因此，MLE需要加密服务提供商的帮助。</li>
<li><em>加密服务提供商</em>（CSP）负责初始化系统中使用的加密方案，并与MLE交互以帮助其完成其任务(计算线性回归模型)。CSP管理加密密钥，并且是唯一能够解密的实体。</li>
</ul>
<p>本文假设MLE和CSP没有串通，而且所有涉及的各方都是诚实但好奇的。此外，本文假设对于协议中涉及的每一对参与方，都存在一个私有的、经过身份验证的对等信道。特别是，任何两个参与者之间的通信都不能被窃听。</p>
<p>本文的目标是确保MLE获得模型，而MLE和CSP都不会学习到模型本身所揭示的关于私有数据集 $\mathcal{D}_i$ 的任何其他信息。即使在两个服务器(MLE或CSP)中的一个与一些数据所有者勾结的情况下，它们也不应该了解关于诚实的数据所有者持有的数据的额外信息。为了实现这一目标，本文设计了一个系统，它可以被视为由前面提到的 $m+2$ 方运行的多方协议，并由一系列步骤指定。该系统具有以下两阶段架构：</p>
<p><strong>阶段1（聚合本地数据集）：</strong>CSP生成密钥对 $(sk,pk)$，保存 $sk$ 以及公开 $pk$；每个 $DO_i$ 用 $pk$ 加密自己的数据集 $\mathcal{D}_i$ 并发送给MLE。MLE使用接收到的密文和同态的特性来获得 $A$ 和 $\boldsymbol{b}$ 的密文。</p>
<p><strong>阶段2（计算模型）：</strong>MLE盲化 $A$ 和 $\boldsymbol{b}$ 并发送给CSP；后者解密对盲化后的数据解密并运行给定的算法。该算法的输出（“盲化模型”）是一个向量 $\tilde{\boldsymbol{w}}$，CSP把它发送给MLE，后者去盲化后获得 $\boldsymbol{w}^*$。</p>
<ul>
<li>MLE选取一个随机可逆矩阵 $R \in \mathrm{GL}(d, \mathcal{M})$ 和随机向量 $\boldsymbol{r} \in \mathcal{M}$，然后使用线性同态加密的性质计算 $C’ = \mathsf{Enc}<em>{pk}(AR)$ 和 $\boldsymbol{d’} = \mathsf{Enc}</em>{pk}(\boldsymbol{b} + A \boldsymbol{r})$。值 $C = AR$ 和 $\boldsymbol{d} = \boldsymbol{b} + A \boldsymbol{r}$ 就是“盲化数据”。</li>
<li>CSP解密 $C’$ 和 $\boldsymbol{d’}$，然后计算 $\tilde{\boldsymbol{w}} = C^{-1} \boldsymbol{d}$。向量 $\tilde{\boldsymbol{w}}$ 为“盲化模型”，发送回给MLE。</li>
<li>MLE计算 $\boldsymbol{w}^* = R \tilde{\boldsymbol{w}} - \boldsymbol{r}$，容易验证 $R \tilde{\boldsymbol{w}} - \boldsymbol{r} = R(AR)^{-1}(\boldsymbol{b} + A \boldsymbol{r}) - \boldsymbol{r} = A^{-1} \boldsymbol{b}$。</li>
</ul>
<h1 id="协议描述"><a href="#协议描述" class="headerlink" title="协议描述"></a>协议描述</h1><h2 id="阶段1：聚合数据集"><a href="#阶段1：聚合数据集" class="headerlink" title="阶段1：聚合数据集"></a>阶段1：聚合数据集</h2><p>两种情况，第一种情况为 $X$ 和 $\boldsymbol{y}$ 的数据集被水平划分为 $m$ 个数据集，即每个 $DO$ 拥有：</p>
<script type="math/tex; mode=display">
\mathcal{D}_k = \{(\boldsymbol{x}_{n_{k-1}+1}, y_{n_{k-1}+1}),...,(\boldsymbol{x}_{n_k}, y_{n_k}) \} \tag{2}</script><p>其中 $k = 1,…,m \ (0 = n_0 &lt; n_1&lt;\cdots&lt;n_m=m)$。这种情况下就是每个 $DO_i$ 对其数据集 $A$ 和 $\boldsymbol{b}$ 的所有项加密发送给MLE，后者进行聚合：</p>
<p><img src="http://images.yingwai.top/picgo/PPRRwoLHEp1.png" alt=""></p>
<p>第二种情况为每个 $DO$ 拥有 $X$ 和 $\boldsymbol{y}$ 中的某些元素：</p>
<script type="math/tex; mode=display">
\mathcal{D}_{k}=\left\{X[i, j]=\boldsymbol{x}_{i}[j] \mid(i, j) \in D_{k}\right\} \cup\left\{\boldsymbol{y}[i]=y_{i} \mid(i, 0) \in D_{k}\right\} \tag{3}</script><p>其中 $D_{k} \subseteq{1, \ldots, n} \times{0,1, \ldots, d}$。这种情况下，要计算矩阵 $A$ 和向量 $\boldsymbol{b}$ 就要把来自两个用户的数据乘在一起（例如一方拥有 $X$ 而另一方拥有 $\boldsymbol{y}$），此时可以用到前面的 $\mathsf{labMult}$：</p>
<p><img src="http://images.yingwai.top/picgo/PPRRwoLHEp2.png" alt=""></p>
<h2 id="阶段2：计算模型"><a href="#阶段2：计算模型" class="headerlink" title="阶段2：计算模型"></a>阶段2：计算模型</h2><p>在阶段1的最后，MLE知道了 $A$ 和 $\boldsymbol{b}$ 的密文。第3节中已经描述过大致的过程，即MLE先发送盲化后的数据给CSP，后者求解得到盲化后的模型后发送回给MLE，最后MLE去盲化得到模型 $\boldsymbol{w}^*$：</p>
<p><img src="http://images.yingwai.top/picgo/PPRRwoLHEp3.png" alt=""></p>
<h2 id="参数的选择"><a href="#参数的选择" class="headerlink" title="参数的选择"></a>参数的选择</h2><p>在 $\Pi_2$ 的最后一步使用了有理数重构从 $\mathbb{Z}_N$ 中计算的 $A \boldsymbol{w} = \boldsymbol{b}$ 的解中恢复 $\boldsymbol{w}^* \in \mathbb{Q}^d$。如果有理数 $t=r/s$ 且 $−R\leq r\leq R, 0&lt;s \leq S$ 以及 $\gcd(s,N)=1$ 在 $\mathbb{Z}_N$ 中表示为 $t’ = rs^{-1} \bmod N$，则拉格朗日-高斯算法在 $2RS &lt;N$ 的情况下唯一地恢复 $r$ 和 $s$。</p>
<p>由于 $\boldsymbol{w}^* = A^{-1}\boldsymbol{b} = \frac{1}{\mathrm{det}(A)} \mathrm{adj}(A)\boldsymbol{b} \in \mathbb{Q}^d$，为了使得选择的 $N$ 满足前面提到的条件，需要限制 $\mathrm{det}(A)$ 和向量 $\mathrm{adj}(A)\boldsymbol{b}$ 的条目。令 $\alpha = \max {|A |<em>{\infty},| \boldsymbol{b} |</em>{\infty} }$，利用Hadamard不等式，有 $0 &lt; \mathrm{det}(A) \leq \alpha^d$（$A$ 是正定矩阵）和 $| \mathrm{adj}(A)\boldsymbol{b} |_{\infty} \leq d(d-1)^{\frac{d-1}{2}} \alpha^d$。</p>
<p>对 $X$ 和 $\boldsymbol{y}$ 使用与第二节相同的假设（即 $X$ 和 $\boldsymbol{y}$ 的条目都是 $[-\delta, \delta]$ 中的实数，有最多 $\ell$ 位小数），有 $\alpha \leq 10^{2\ell}(n \delta^2 + \lambda)$。由此得出条件 $2RS &lt; N$ 在以下情况时满足：</p>
<script type="math/tex; mode=display">
2d(d-1)^{\frac{d-1}{2}} 10^{4\ell d}(n\delta^2 + \lambda)^{2d} < N \tag{4}</script><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><p><a href="https://yuyingwai.cn/2020/06/17/论文笔记-SecureML-A-System-for-Scalable-Privacy-Preserving-Machine-Learning/" target="_blank" rel="noopener">SecureML</a>仅使用相加的秘密共享和海狸三元组来设计假设数据集的任意分区的系统。就通信复杂度而言，SecureML在任意划分的情况下比本文的解决方案执行得更好。然而，如果训练数据集是水平划分的，并且 $n \gg d$（例如 $n=Θ(d^{2.5})$）。例如，如果 $d=100, n=105$时，SecureML中的系统只有预处理阶段的200MB，而 $Π_{1,\mathrm{hor}}+Π_2$ 的总成本小于120MB。</p>
]]></content>
      <categories>
        <category>Papers</category>
      </categories>
      <tags>
        <tag>PPML</tag>
        <tag>Linear Regression</tag>
        <tag>HE</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记 Efficient Multi-Key Homomorphic Encryption with Packed Ciphertexts with Application to Oblivious Neural Network Inference</title>
    <url>/2020/07/09/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-Efficient-Multi-Key-Homomorphic-Encryption-with-Packed-Ciphertexts-with-Application-to-Oblivious-Neural-Network-Inference/</url>
    <content><![CDATA[<p><em>Hao Chen, Wei Dai, Miran Kim, Yongsoo Song</em></p>
<p>CCS 2019</p>
<p><a href="https://dl.acm.org/doi/10.1145/3319535.3363207" target="_blank" rel="noopener">https://dl.acm.org/doi/10.1145/3319535.3363207</a></p>
<a id="more"></a>
<h1 id="本文的贡献"><a href="#本文的贡献" class="headerlink" title="本文的贡献"></a>本文的贡献</h1><p>本文设计了BFV[6，22]和CKKS[16]方案的多密钥变体。本文提出了一种新的生成重线性化密钥的方法，与文献[13]中的以前技术相比，该方法更简单、更快。此外，本文将这些方案[9，12，14]的最新自举算法应用于多密钥场景，以构建具有压缩密文的多密钥完全同态加密。最后，作者使用Microsoft SEAL[47]给出了本文的多密钥方案的概念验证实现，并给出了实验结果。据作者所知，这是支持打包密文的MKHE方案的第一个实际实现。</p>
<p>本文还提出了MKHE的第一个可行的应用，它安全地评估了预先训练的卷积神经网络(CNN)模型。本文构建了一个高效的协议，云服务器使用模型提供者提供的分类器为数据所有者提供在线预测服务，同时使用MKHE保护数据和模型的隐私。如图1所示，本文的方案支持多密钥操作，使得以较低的端到端延迟和接近最佳的数据和模型提供者成本来实现这一点。服务器可以存储以不同密钥加密的大量密文，但是特定任务的计算成本仅取决于与电路相关的各方的数量。作者注意到，本文的解决方案比单密钥HE更有优势，因为ML模型提供者不需要将未加密的模型发送到服务器。</p>
<p><img src="http://images.yingwai.top/picgo/emkhef1.png" alt=""></p>
<h1 id="BACKGROUND"><a href="#BACKGROUND" class="headerlink" title="BACKGROUND"></a>BACKGROUND</h1><h2 id="记号法"><a href="#记号法" class="headerlink" title="记号法"></a>记号法</h2><p>除非另有说明，否则所有对数都以 $2$ 为底。我们用粗体表示向量，例如$\mathbf{a}$，用大写粗体表示矩阵，例如 $\mathbf{A}$。本文用 $\langle \mathbf{u}, \mathbf{v} \rangle$ 表示两个向量 $\mathbf{u}, \mathbf{v}$ 的通常点积。对于实数 $r$，$\lfloor r \rceil$ 表示最表示最接近 $r$ 的整数，在平局的情况下向上舍入。本文用 $x \leftarrow D$ 表示按分布 $D$ 抽样的 $x$。对于有限集 $S$，$U(S)$ 表示 $S$ 上的均匀分布。本文用 $\lambda$ 表示安全参数：所有已知的对作用域内的密码方案的有效攻击都应该采用 $\Omega(2^\lambda)$ 位运算。</p>
<h2 id="多密钥同态加密"><a href="#多密钥同态加密" class="headerlink" title="多密钥同态加密"></a>多密钥同态加密</h2><p>多密钥同态加密是一种密码系统，它允许我们对可能在不同密钥下加密的密文评估算术电路。</p>
<p>设 $\mathcal{M}$ 是具有算术结构的消息空间。MKHE方案MKHE由五个PPT算法($\mathsf{Setup}, \mathsf{KeyGen}, \mathsf{Enc}, \mathsf{Dec}, \mathsf{Eval}$)组成。本文假设每个参与方都有对其公钥和私钥的引用(索引)。多密钥密文隐式包含<em>有序</em>集合 $T = {id<em>1, …, id_k}$ 相关联的引用。例如，新的密文 $\mathsf{ct} \leftarrow \mathsf{MKHE.Enc}(\mu; \mathsf{pk}</em>{id})$ 对应于单个元素集合 $T = {id}$，但是随着来自不同方的密文之间的计算的进行，参考集合的大小变得更大。</p>
<ul>
<li><p><strong>初始化</strong>：$pp \leftarrow \mathsf{MKHE.Setup}(1^\lambda)$。将安全参数作为输入并返回公共参数化。本文假设所有其他算法都隐含地将 $pp$ 作为输入。</p>
</li>
<li><p><strong>密钥生成</strong>：$(\mathsf{sk}, \mathsf{pk}) \leftarrow \mathsf{MKHE.KeyGen}(pp)$。输出一对私钥和公钥。</p>
</li>
<li><p><strong>加密</strong>：$\mathsf{ct} \leftarrow \mathsf{MKHE.Enc}(\mu; \mathsf{pk})$。加密明文 $\mu \in \mathcal{M}$ 并输出密文 $\mathsf{ct} \in {0,1 }^*$。</p>
</li>
<li><p><strong>解密</strong>：$\mu \leftarrow \mathsf{MKHE.Dec}(\overline{\mathsf{ct}}; {\mathsf{sk}<em>{id}}</em>{id \in T})$。给定具有对应密钥序列的密文 $\overline{\mathsf{ct}}$，输出明文 $\mu$。</p>
</li>
<li><p><strong>同态评估</strong>：</p>
<script type="math/tex; mode=display">
\overline{\mathsf{ct}} \leftarrow \mathsf{MKHE.Eval}(\mathcal{C}, (\overline{\mathsf{ct}}_1,...,\overline{\mathsf{ct}}_l),\{\mathsf{pk}_{id}\}_{id \in T})</script><p>给定电路 $\mathcal{C}$，多密钥密文的元组 $(\overline{\mathsf{ct}}<em>1,…,\overline{\mathsf{ct}}_l)$ 和对应的一组公钥 ${\mathsf{pk}</em>{id}}_{id \in T}$，输出密文 $\overline{\mathsf{ct}}$。它的参考集是输入密文 $\overline{\mathsf{ct}}_j, 1 \leq j \leq l$ 的联合 $T = T_1 \cup \cdots \cup T_l$。</p>
</li>
</ul>
<p><strong>语义安全。</strong>对于任意两条消息 $\mu_0, \mu_1 \in \mathcal{M}, \ \ i = 0, 1$ 的分布 ${\mathsf{MKHE.Enc}(\mu_i; \mathsf{pk}) }$ 在 $pp \leftarrow \mathsf{MKHE.Setup}(1^\lambda)$ 和 $(\mathsf{sk}, \mathsf{pk}) \leftarrow \mathsf{MKHE.KeyGen}(pp)$ 的计算上应该是不可区分的。</p>
<p><strong>正确性和紧凑性。</strong>如果与 $k$ 方相关的密文的大小受固定多项式 ${\rm poly}(\cdot, \cdot)$ 的 ${\rm poly}(\lambda, k)$ 的限制，则MKHE方案是紧致的。</p>
<p>对于 $1 \leq j \leq l$，设 $\overline{\mathsf{ct}}<em>j$ 为密文(参考集合 $T_j$)，使得 $\mathsf{MKHE.Dec}(\overline{\mathsf{ct}}_j; {\mathsf{sk}</em>{id}}<em>{id \in T} = \mu_j$。设 $\mathcal{C} : \mathcal{M}^l \rightarrow \mathcal{M}$ 为电路，$\overline{\mathsf{ct}} \leftarrow \mathsf{MKHE.Eval}(\mathcal{C}, (\overline{\mathsf{ct}}_1,…,\overline{\mathsf{ct}}_l),{\mathsf{pk}</em>{id}}_{id \in T})$，其中 $T = T_1 \cup \cdots \cup T_l$。然后，</p>
<script type="math/tex; mode=display">
\mathsf{MKHE.Dec}(\overline{\mathsf{ct}}; \{\mathsf{sk}_{id}\}_{id \in T} = \mathcal{C}(\mu_1,...,\mu_l) \tag{1}</script><p>以压倒性的可能性。对于近似算术[16]，可以用类似于CKKS格式的近似相等来代替(1)的相等。</p>
<h2 id="环上容错学习"><a href="#环上容错学习" class="headerlink" title="环上容错学习"></a>环上容错学习</h2><p>在整篇文章中，作者假设 $n$ 是2的幂整数，并且 $R=\mathbb{Z}[X]/(X^n+1)$。对于 $R$ 的模为整数 $q$ 的剩余环，本文记作 $R_q=R/(q·R)$。带参数 $(n,q,\chi,\psi)$ 的环学习假设是给定任意多项式数目的形式的样本 $(a_i,b_i=s \cdot a_i+e_i) \in R^2_q$，其中 $a_i$ 在 $R_q$ 中是一致随机的，$s$ 选自 $R_q$ 上的密钥分布 $\chi$，$e_i$ 取自 $R$ 上的误差分布 $\psi$，$b_i$ 是 $R_q$ 中的均匀随机元素、在计算上是不可区分的。</p>
<h2 id="小工具分解"><a href="#小工具分解" class="headerlink" title="小工具分解"></a>小工具分解</h2><p>设 $\mathbf{g}=(g<em>i) \in \mathbb{Z}^d$ 为小工具向量，$q$ 为整数。小工具分解，由 $\mathbf{g}^{-1}$ 表示，是从 $R_q$ 到 $R^d$ 的函数，它将元素 $a \in R_q$ 转换成<em>小</em>多项式向量 $u=(u_0,…,u</em>{d−1})\in R^d$ ，使得 $a = \sum^{d-1}_{i=0} g_i \cdot u_i \pmod{q}$。</p>
<p>小工具分解技术被广泛应用于HE方案的构建中。例如，非线性电路的同态评估是基于密钥切换技术的，并且大多数HE方案利用各种小工具分解方法来控制噪声增长。文献中已经提出了各种分解方法，如位分解[6，7]、基分解[17，21]和基于RNS的分解[4，30]。本文的实现利用了RNS友好的分解来提高效率。</p>
<h1 id="本文的构造"><a href="#本文的构造" class="headerlink" title="本文的构造"></a>本文的构造</h1><h2 id="基本方案"><a href="#基本方案" class="headerlink" title="基本方案"></a>基本方案</h2><ul>
<li>$\mathsf{Setup}(1^\lambda)$：对于给定的安全参数 $\lambda$，设置RLWE维数 $n$、密文模数 $q$、密钥分布 $\chi$ 和R上的误差分布 $\psi$。生成随机向量 $\mathbf{a} \leftarrow U(R^d_q)$。返回公共参数 $pp=(n, q, \chi, \psi, \mathbf{a})$。</li>
<li>$\mathsf{KeyGen}(pp)$：选取密钥 $s \leftarrow \chi$。选取误差向量 $e \leftarrow \psi^d$，并将公钥在 $R^d_q$ 中设置为 $\mathbf{b} = -s \cdot \mathbf{a} + \mathbf{e} \pmod{q}$。</li>
<li>$\mathsf{UniEnc}(\mu;s)$：对于输入明文 $\mu \in R$，生成密文 $\mathbf{D} = [\mathbf{d}_0 | \mathbf{d}_1 | \mathbf{d}_2] \in R^{d \times 3}_q$，如下所示：<ol>
<li>选取 $r \leftarrow \chi$；</li>
<li>选取 $\mathbf{d}_1 \leftarrow U(R^d_q)$ 和 $\mathbf{e}_1 \leftarrow \psi^d$，然后设 $\mathbf{d}_0 = -s \cdot \mathbf{d}_1 + \mathbf{e}_1 + r \cdot \mathbf{g} \pmod{q}$；</li>
<li>选取 $\mathbf{e}_2 \leftarrow \psi^d$ 然后设 $\mathbf{d}_2 = r \cdot \mathbf{a} + \mathbf{e}_2 + \mu \cdot \mathbf{g} \pmod{q}$。</li>
</ol>
</li>
</ul>
<p>公共参数 $pp$ 包含一个随机生成的向量 $\mathbf{a} \in R^d_q$，因此本文假设使用公共引用字符串模型。各方应将相同的公共参数作为密钥生成算法的输入，以支持多密钥同态运算。在以前关于MKHE的所有工作中都做出了同样的假设。</p>
<p>单一加密算法是对称加密，它可以加密单个环形元件。一次加密的密文 $\mathbf{D} = [\mathbf{d}_0 | \mathbf{d}_1 | \mathbf{d}_2] \leftarrow \mathsf{UniEnc}(\mu;s)$ 由 $R^d_q$ 中的三个矢量组成，其大小是 $R^{2d \times 2}_q$ 中普通RGSW密文的(3/4)倍。对于一次加密密文 $\mathbf{D}$，前两列 $[\mathbf{d}_0 | \mathbf{d}_1]$ 可以被视为秘密 $s$ 下的 $r$ 的加密，而 $[\mathbf{d}_2 | -\mathbf{a}]$ 形成秘密 $r$ 下的 $\mu$ 的加密。</p>
<h2 id="再线性化"><a href="#再线性化" class="headerlink" title="再线性化"></a>再线性化</h2><p>在级联秘密 $\overline{\mathsf{sk}} = (1, s_1, …, s_k)$ 下加密的两个多密钥密文 $\overline{\mathsf{ct}}_i \in R^{k+1}_q$ 的张量积 $\overline{\mathsf{ct}} = \overline{\mathsf{ct}}_1 \otimes \overline{\mathsf{ct}}_2$ 可以看作是对应于张量平方密钥 $\overline{\mathsf{sk}} \otimes \overline{\mathsf{sk}}$ 的密文。$\overline{\mathsf{sk}} \otimes \overline{\mathsf{sk}}$ 包含一些与两个不同方相关的非线性项 $s_i \cdot s_j$。因此，计算服务器应该能够通过非线性项 $s_i \cdot s_j$ 的线性化来将扩展密文 $\overline{\mathsf{ct}} \in R^{(k+1) \times (k+1)}_q$ 转换为规范密文。</p>
<p>本文的重新线性化方法需要由单个各方生成的相同公共材料(评估密钥)，如下所示：</p>
<ul>
<li>$\mathsf{EvkGen}(s)$：给定秘密 $s \in R$，返回 $\mathbf{D} \leftarrow \mathsf{UniEnc}(s;s)$。</li>
</ul>
<p>准确地说，每一方 $i$ 通过运行算法(si，bi)←KeyGen(Pp)和Di←EvkGen(Si)来生成其自己的秘密密钥、公共密钥和评估密钥，然后发布该对(bi，Di)。在本节的其余部分，我们将介绍两种重新线性化算法，并说明它们的优缺点。</p>
]]></content>
      <categories>
        <category>Papers</category>
      </categories>
      <tags>
        <tag>PPML</tag>
        <tag>Neural Network</tag>
        <tag>HE</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记 Oblivious Neural Network Predictions via MiniONN Transformations</title>
    <url>/2020/05/26/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-Oblivious-Neural-Network-Predictions-via-MiniONN-Transformations/</url>
    <content><![CDATA[<p><em>Jian Liu, Mika Juuti, Yao Lu, N. Asokan</em></p>
<p>CCS 2017</p>
<p><a href="https://dl.acm.org/doi/10.1145/3133956.3134056" target="_blank" rel="noopener">https://dl.acm.org/doi/10.1145/3133956.3134056</a></p>
<a id="more"></a>
<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>托管在云服务中的机器学习模型越来越受欢迎，但存在隐私风险：向该服务发送预测请求的客户端需要披露潜在的敏感信息。在本文中，我们探讨了隐私保护预测问题：在每次预测之后，服务器对客户端的输入一无所知，客户端对模型一无所知。</p>
<p>我们提出了MiniONN，这是第一种将现有的神经网络转换为不经意的神经网络的方法，该网络以合理的效率支持隐私保护预测。与以前的工作不同，MiniONN不需要改变模型的训练方式。为此，我们为神经网络预测模型中常用的操作设计了健忘协议。我们证明了MiniONN在响应延迟和消息大小方面优于现有的工作。通过对标准数据集训练的几种典型神经网络模型的变换，证明了MiniONN的广泛适用性。</p>
<p><strong>关键词</strong>：隐私；机器学习；神经网络预测；安全两方计算</p>
<h2 id="贡献"><a href="#贡献" class="headerlink" title="贡献"></a>贡献</h2><ul>
<li>提出了MiniONN，这是第一个<strong>可以将任何普通神经网络模型转换为不经意神经网络</strong>的技术，而不需要对训练阶段进行任何修改。</li>
<li><strong>为神经网络预测中的常见操作设计了不经意的协议</strong>。特别地，作者<strong>使非线性函数(例如，Sigmoid和tanh)服从于作者的ONN变换</strong>，而精确度损失可以忽略不计。</li>
<li>构建了<strong>MiniONN的完整实现</strong>，并通过使用它来<strong>转换从几个标准数据集训练</strong>的神经网络模型来展示其广泛的适用性。特别是，对于从MNIST数据集[38]训练的相同模型，MiniONN的性能<strong>明显</strong>好于以前的工作[28, 44]。</li>
<li>分析了<strong>模型复杂性对转换后的ONN的预测精度和计算/通信开销的影响</strong>。讨论了神经网络设计者如何在预测精度和开销之间选择合适的折衷方案。</li>
</ul>
<h1 id="BACKGROUND-AND-PRELIMINARIES"><a href="#BACKGROUND-AND-PRELIMINARIES" class="headerlink" title="BACKGROUND AND PRELIMINARIES"></a>BACKGROUND AND PRELIMINARIES</h1><p><img src="http://images.yingwai.top/picgo/minionnt1.png" alt=""></p>
<center>
    <i>表1 符号表示</i>
</center>



<h1 id="MiniONN概述"><a href="#MiniONN概述" class="headerlink" title="MiniONN概述"></a>MiniONN概述</h1><p>在本节中，通过转换以下形式的神经网络来解释MiniONN的基本思想：</p>
<script type="math/tex; mode=display">
\mathbf{z} := \mathbf{W'} \cdot f(\mathbf{W} \cdot \mathbf{x} + \mathbf{b}) + \mathbf{b'} \tag{4}</script><p>其中$\mathbf{x} = \left[ \begin{matrix} x<em>1\ x_2 \end{matrix} \right]$，$\mathbf{W} = \left[ \begin{matrix} w</em>{1,1} &amp; w<em>{1,2}\ w</em>{2,1} &amp; w<em>{2,2} \end{matrix} \right]$，$\mathbf{b} = \left[ \begin{matrix} b_1\ b_2 \end{matrix} \right]$，$\mathbf{W’} = \left[ \begin{matrix} w’</em>{1,1} &amp; w’<em>{1,2}\ w’</em>{2,1} &amp; w’_{2,2} \end{matrix} \right]$ 以及 $\mathbf{b’} = \left[ \begin{matrix} b’_1\ b’_2 \end{matrix} \right]$。</p>
<p>MiniONN的核心思想是让 $\mathcal{S}$ 和 $\mathcal{C}$ 加法共享神经网络每一层的输入和输出值。也就是说，在每一层的开始，$\mathcal{S}$ 和 $\mathcal{C}$ 将各自持有一份“份额”，使得份额的模加等于该神经网络的非不经意版本中对该层的输入。输出值将用作下一层的输入。</p>
<p>为此，让 $\mathcal{S}$ 和 $\mathcal{C}$ 首先进入预计算阶段(该阶段独立于 $\mathcal{C}$ 的输入$\mathbf{x}$)，在该阶段中，它们为权重矩阵的每一行(在本例中为 $\mathbf{W}$ 和 $\mathbf{W’}$)联合生成一组点积三元组 $\left \langle u,v,\mathbf{w} \cdot \mathbf{r} \right \rangle$。具体地说，对于 $\mathbf{w}$的每一行，$\mathcal{S}$ 和 $\mathcal{C}$，运行一个协议，该协议安全地实现理想功能 $\mathcal{F}$ 三元组(在图1中)，以生成点积三元组，从而：</p>
<script type="math/tex; mode=display">
\begin{align}
u_1 + v_1 (\bmod N) &= w_{1,1} r_1 + w_{1,2} r_2,\\
u_2 + v_2 (\bmod N) &= w_{2,1} r_1 + w_{2,2} r_2,\\
u'_1 + v'_1 (\bmod N) &= w'_{1,1} r'_1 + w'_{1,2} r'_2,\\
u'_2 + v'_2 (\bmod N) &= w'_{2,1} r'_1 + w'_{2,2} r'_2.
\end{align}</script><p><img src="http://images.yingwai.top/picgo/minionnf1.png" alt=""></p>
<center>
    <i>图1 理想的生成点积三元组的功能</i>
</center>

<p>当 $\mathcal{C}$ 想要请求 $\mathcal{S}$ 计算向量 $\mathbf{x}=[x_1,x_2]$ 的预测时，对于每个 $x_i$，$\mathcal{C}$ 选择在预计算阶段中生成的三元组，并使用它的 $r_i$ 来盲化 $x_i$。</p>
<script type="math/tex; mode=display">
\begin{align}
x_1^{\mathcal{C}} &:= r_1, x_1^{\mathcal{S}} := x_1 - r_1 (\bmod N),\\
x_2^{\mathcal{C}} &:= r_2, x_2^{\mathcal{S}} := x_2 - r_2 (\bmod N).
\end{align}</script><p>然后 $\mathcal{C}$ 然后发送 $\mathbf{x}^{\mathcal{S}}$ 给 $\mathcal{S}$，$\mathcal{S}$ 计算</p>
<script type="math/tex; mode=display">
\begin{align}
y_1^{\mathcal{S}} &:= w_{1,1} x_1^{\mathcal{S}} + w_{1,2} x_2^{\mathcal{S}} + b_1 + u_1 (\bmod N),\\
y_2^{\mathcal{S}} &:= w_{2,1} x_1^{\mathcal{S}} + w_{2,2} x_2^{\mathcal{S}} + b_2 + u_2 (\bmod N).
\end{align}</script><p>同时，$\mathcal{C}$ 设：</p>
<script type="math/tex; mode=display">
\begin{align}
y_1^{\mathcal{C}} &:= v_1 (\bmod N),\\
y_2^{\mathcal{C}} &:= v_2 (\bmod N).
\end{align}</script><p>显然</p>
<script type="math/tex; mode=display">
\begin{align}
y_1^{\mathcal{C}} + y_1^{\mathcal{S}} &= w_{1,1} x_1 + w_{1,2} x_2 + b_1 (\bmod N),\\
y_2^{\mathcal{C}} + y_2^{\mathcal{S}} &= w_{2,1} x_1 + w_{2,2} x_2 + b_2 (\bmod N).
\end{align}</script><p>因此，在此交互结束时，$\mathcal{S}$ 和 $\mathcal{C}$ 相加地共享由层1中的线性变换产生的输出值 $\mathbf{y}$，而不需要 $\mathcal{S}$ 学习输入 $\mathbf{x}$，任何一方都不学习 $\mathbf{y}$。</p>
<p>对于激活/池化操作 $f()$，$\mathcal{S}$ 和 $\mathcal{C}$ 运行安全地实现图2中的理想功能的协议，该协议隐式地重构每个 $y_i := y^{\mathcal{C}}_i + y^{\mathcal{S}}_i (\bmod N)$ 并返回 $x^{\mathcal{S}}_i := f(y_i) - x^{\mathcal{C}}_i$ 给 $\mathcal{S}$，其中 $x^{\mathcal{C}}_i$ 是来自预计算阶段的先前共享的三元组的 $\mathcal{C}$ 分量，即 $x_1^{\mathcal{C}} := r’_1$ 和 $x_2^{\mathcal{C}} := r’_2$。</p>
<p><img src="http://images.yingwai.top/picgo/minionnf2.png" alt=""></p>
<center>
    <i>图2 理想的不经意激活/池化f()的功能</i>
</center>

<p>最后一层的变换与第一层相同。也就是说，$\mathcal{S}$ 计算：</p>
<script type="math/tex; mode=display">
\begin{align}
y_1^{\mathcal{S}} &:= w'_{1,1} x_1^{\mathcal{S}} + w'_{1,2} x_2^{\mathcal{S}} + b'_1 + u'_1 (\bmod N),\\
y_2^{\mathcal{S}} &:= w'_{2,1} x_1^{\mathcal{S}} + w'_{2,2} x_2^{\mathcal{S}} + b'_2 + u'_2 (\bmod N);
\end{align}</script><p>$\mathcal{C}$ 设：</p>
<script type="math/tex; mode=display">
\begin{align}
y_1^{\mathcal{C}} &:= v'_1 (\bmod N),\\
y_2^{\mathcal{C}} &:= v'_2 (\bmod N),
\end{align}</script><p>最后，$\mathcal{S}$ 将 $[y_1^{\mathcal{S}}, y_2^{\mathcal{S}}]$ 返回给 $\mathcal{C}$，$\mathcal{C}$ 输出最终预测：</p>
<script type="math/tex; mode=display">
\begin{align}
z_1 &:= y_1^{\mathcal{C}} + y_1^{\mathcal{S}},\\
z_2 &:= y_2^{\mathcal{C}} + y_2^{\mathcal{S}}.
\end{align}</script><p>注意到MiniONN在 $\mathbb{Z}_N$ 中工作，而神经网络需要浮点计算。一种简单地解决办法是把神经网络中的值与一个固定的常数相乘，将小数部分放大到整数。一种类似的技术被用来减少神经网络预测中的存储器需求，而精确度损失可以忽略不计[42]。必须确保任何(中间)结果的绝对值不会超过 $\lfloor N/2 \rfloor$。</p>
]]></content>
      <categories>
        <category>Papers</category>
      </categories>
      <tags>
        <tag>密码学</tag>
        <tag>MPC</tag>
        <tag>PPML</tag>
        <tag>Neural Network</tag>
      </tags>
  </entry>
  <entry>
    <title>论文笔记 Automatic Unit Test Generation and Execution for JavaScript Program through Symbolic Execution</title>
    <url>/2020/04/16/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0-Automatic-Unit-Test-Generation-and-Execution-for-JavaScript-Program-through-Symbolic-Execution/</url>
    <content><![CDATA[<p><a href="https://www.semanticscholar.org/author/Hideo-Tanida/2725857" target="_blank" rel="noopener">Hideo Tanida</a>, <a href="https://www.semanticscholar.org/author/Guodong-Li/1720073" target="_blank" rel="noopener">Guodong Li</a>, <a href="https://www.semanticscholar.org/author/Indradeep-Ghosh/3291522" target="_blank" rel="noopener">Indradeep Ghosh</a>, <a href="https://www.semanticscholar.org/author/Tadahiro-Uehara/3081128" target="_blank" rel="noopener">Tadahiro Uehara</a></p>
<p>Published in ICSEA 2014</p>
<p><a href="https://scholar.google.com/scholar?hl=zh-CN&amp;as_sdt=0%2C5&amp;q=Automatic+Unit+Test+Generation+and+Execution+for+JavaScript+Program+through+Symbolic+Execution&amp;btnG=" target="_blank" rel="noopener">https://scholar.google.com/scholar?hl=zh-CN&amp;as_sdt=0%2C5&amp;q=Automatic+Unit+Test+Generation+and+Execution+for+JavaScript+Program+through+Symbolic+Execution&amp;btnG=</a></p>
<a id="more"></a>
<h2 id="摘要及介绍"><a href="#摘要及介绍" class="headerlink" title="摘要及介绍"></a>摘要及介绍</h2><h3 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h3><p>​        考虑到对更具交互性的Web/移动应用程序的需求，JavaScript有望成为一种使用更广泛的编程语言。虽然JavaScript代码的可靠性将更加重要，但与其他语言相比，该语言的测试技术仍然不足。本文提出了一种为JavaScript代码自动生成高覆盖率单元测试的技术。该技术使用JavaScript代码的符号执行引擎，以及自动为不感兴趣的代码生成存根的存根/驱动程序生成引擎。本文的方法允许全自动生成用于高覆盖率的JavaScript代码单元测试的输入数据，从而以较少的工作量确保目标代码的质量。</p>
<h3 id="主要贡献"><a href="#主要贡献" class="headerlink" title="主要贡献"></a>主要贡献</h3><ul>
<li>本文提出了一种在工具<strong>SymJS</strong>上通过符号执行为JavaScript代码生成测试输入的技术；</li>
<li>对比现有工具，本文的约束求解器<strong>PASS</strong>[10]允许为具有各种复杂字符串操作的程序生成测试；</li>
<li>并且不需要对目标代码进行任何修改，而现有的符号执行器需要修改和多次运行，因此适用于现实中的开发；</li>
<li>本文的自动生成存根/驱动程序代码允许完全自动生成测试数据。</li>
</ul>
<h3 id="现有的工具"><a href="#现有的工具" class="headerlink" title="现有的工具"></a>现有的工具</h3><p>​        现有的JavaScript代码测试工具包括<strong>Kudzu</strong>[8]和<strong>Jalangi</strong>[9]。kudzu自动生成程序函数的输入数据，目的是自动发现目标中的安全漏洞。Jalangi允许在正常的具体执行下修改路径约束，以便获得与以前运行不同的结果。然而，由于字符串约束处理方面的限制，以及需要手动创建用于测试的驱动程序/存根，这些工具不能应用于现实中JavaScript代码的单元测试。</p>
<h2 id="背景及基础知识"><a href="#背景及基础知识" class="headerlink" title="背景及基础知识"></a>背景及基础知识</h2><h3 id="符号执行"><a href="#符号执行" class="headerlink" title="符号执行"></a>符号执行</h3><p>​        符号执行（Symbolic Execution）是一种程序分析技术，可以通过分析程序源代码来得到测试输入。通俗来讲，比如说游戏中一个角色在佩戴各种装备之后的面板数值为：攻击力xxx、防御力xxx…；此时通过佩戴装备到获得属性的过程就好比一个程序，佩戴装备的品质就是这个程序的输入，而最后获得的属性就是这个程序的输出；符号执行的过程则是进行分析，从某组给定的属性逆向推导，最后得到某组质量的装备，佩戴这组装备可以获得一开始给定的属性。</p>
<h4 id="符号执行的基本原理"><a href="#符号执行的基本原理" class="headerlink" title="符号执行的基本原理"></a>符号执行的基本原理</h4><p>​        符号执行的关键思想是把输入变为符号值，那么程序的输出值就是一个符号输入值的函数。在程序执行期间，获得每个执行路径中的变量的值要满足的约束。在获得程序内所有路径的约束之后，通过将约束提供给诸如可满足性模理论（SMT）[7]求解器之类的求解器，可以获得执行每条路径的输入变量的具体值。</p>
<p>参考：<a href="https://zhuanlan.zhihu.com/p/26927127" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26927127</a></p>
<h4 id="通过符号执行生成测试输入"><a href="#通过符号执行生成测试输入" class="headerlink" title="通过符号执行生成测试输入"></a>通过符号执行生成测试输入</h4><p>​        在程序的符号执行期间，执行每个路径所需要满足的约束是以迭代的方式计算的。在访问程序内每条可能的路径之后，获得所有路径的约束。使用<strong>SMT</strong>等求解器可以获得满足约束条件的变量的具体值。得到的值是与约束条件相对应的，可以用来进行测试。</p>
<h3 id="SymJS"><a href="#SymJS" class="headerlink" title="SymJS"></a>SymJS</h3><p>SymJS是一个用于自动测试JavaScript Web应用程序客户端的框架，该工具包括一个用于JavaScript的符号执行引擎和一个Web页面的自动的事件资源管理器。而其中符号引擎包括一个符号虚拟机、一个字符串+数字解算器和一个符号可执行DOM模型。</p>
<p>​        SymJS解释从目标程序源代码编译的字节码。现有的符号执行器（如<strong>Klee</strong>[2]和<strong>Symbol Pathfinder</strong>[3]）都采用这种方法。处理字节码而不是源代码允许实现符号执行器，而无需处理语言的复杂语法。SymJS被实现为Rhino字节码的解释器，它在执行每条字节码指令时更新程序状态(堆/栈内容和路径条件)。在命中分支指令时，它复制程序状态并继续执行两个分支。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Tool</th>
<th style="text-align:center">Target Lang.</th>
<th style="text-align:center">Sym.VM</th>
<th style="text-align:center">Dep./Cache Solving</th>
<th style="text-align:center">String Solving</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">SymJS</td>
<td style="text-align:center">JavaScript</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
</tr>
<tr>
<td style="text-align:center">KLEE [2]</td>
<td style="text-align:center">C</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">No</td>
</tr>
<tr>
<td style="text-align:center">SAGE [6]</td>
<td style="text-align:center">x86 binary</td>
<td style="text-align:center">No</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">No</td>
</tr>
<tr>
<td style="text-align:center">Sym JPF [3]</td>
<td style="text-align:center">Java</td>
<td style="text-align:center">Yes</td>
<td style="text-align:center">No</td>
<td style="text-align:center">No</td>
</tr>
<tr>
<td style="text-align:center">Kudzu [8]</td>
<td style="text-align:center">JavaScript</td>
<td style="text-align:center">No</td>
<td style="text-align:center">No</td>
<td style="text-align:center">Yes</td>
</tr>
<tr>
<td style="text-align:center">Jalangi [9]</td>
<td style="text-align:center">JavaScript</td>
<td style="text-align:center">No</td>
<td style="text-align:center">No</td>
<td style="text-align:center">Limited</td>
</tr>
</tbody>
</table>
</div>
<center>
    <i>表I 符号执行器的比较</i>
</center>


<p>​        为了实现目标程序的符号执行，本文修改了原始Rhino对表II中所示指令的解释。堆栈操作、异常处理和变量范围管理的指令处理保持不变。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">操作</th>
<th style="text-align:center">指令</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Arithemetic/Logical Operations</td>
<td style="text-align:center">ADD, SUB, MUL, DIV, MOD, NEG, POS, BITNOT, BITAND, BITOR, BITXOR, LSH, RSH,URSH <em>etc.</em></td>
</tr>
<tr>
<td style="text-align:center">Comparisons</td>
<td style="text-align:center">EQ, NE, GE, GT, LE, LT, NOT, SHEQ, SHNE <em>etc.</em></td>
</tr>
<tr>
<td style="text-align:center">Branches</td>
<td style="text-align:center">IFEQ, IFNE, IFEQ_POP <em>etc.</em></td>
</tr>
<tr>
<td style="text-align:center">Function Calls</td>
<td style="text-align:center">RETURN, CALL, TAIL_CALL <em>etc.</em></td>
</tr>
<tr>
<td style="text-align:center">Object Manipulations</td>
<td style="text-align:center">NEW, REF, IN, INSTANCEOF, TYPEOF, GETNAME, SETNAME, NAME <em>etc.</em></td>
</tr>
<tr>
<td style="text-align:center">Object Accesses</td>
<td style="text-align:center">GETPROP, SETPROP, DELPROP, GETELEM, SETELEM, GETREF, SETREF <em>etc.</em></td>
</tr>
</tbody>
</table>
</div>
<center>
    <i>表II 修改后的指令解释</i>
</center>
例如，指令 `ADD op1 op2` 解释如下：

(1)从堆栈中弹出操作数 `op1` 和 `op2` 。操作数可以使用抽象的值，也可以使用具体的值。

(2)检查操作数的类型。如果两个操作数都是字符串，则计算结果是操作数的拼接。如果它们是数值，则结果是操作数的总和。否则，将**根据ECMAScript语言标准转换值**，结果是将获得的值拼接或相加。

#### 分支指令

​        比较指令之后是Rhino字节码中的分支指令。SymJS处理比较和分支指令对，如下所示：

​        首先，在进行必要的类型转换后，生成与比较结果相对应的布尔公式。假设所创建的公式由符号 $c$ 表示，我们检查 $c$ 及其否定 $\neg c$ 是否与路径条件 $pc$ 一起满足。换句话说，我们检查 $pc \land c$ 和 $pc \land \neg c$ 的可满足性。如果两者都是可满足的，我们建立对应于 $pc \land c$ 和 $pc \land \neg c$ 的状态 $s_1, s_2$，并从状态 $s_1$ 和 $s_2$ 继续执行。如果其中一个是可满足的，则选择与可满足的状态相对应的状态，并从该点继续执行。

​        SymJS支持两种方式来管理在命中分支等情况下创建的状态。第一种方法是**存储程序状态变量，包括堆/栈的内容**，如[2] [3]中所做的那样。第二种方法是**只记住在分支上走哪一侧。此方法需要在回溯时从初始状态重新执行目标程序。**但是，它得益于其简单的实现和较小的内存占用。这种方法被称为“模糊”，类似于[4] [6]中介绍的技术。但是，本文的技术是在符号执行器上实现的，不需要修改现有JavaScript工具[8] [9]所需的目标代码。

​        在通过模糊化执行程序的符号过程中，状态仅由分支上的哪一方表示和存储。该信息可用于从程序的初始状态重新执行该程序，并探索目标可能采取的状态空间。在模糊化期间，用与表I中的测试1-6相对应的路径条件符号执行图1中的目标程序之后的状态如表IV所示。符号L、R表示在分支指令上走左/右分支。

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func0</span> (<span class="params">s, a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(””.equals(s)) &#123; <span class="comment">// block 0</span></span><br><span class="line">		s = <span class="literal">null</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (s.length &lt;= <span class="number">5</span>) &#123; <span class="comment">// block 1</span></span><br><span class="line">			a = a + status;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span>(””.equals(s)) &#123; <span class="comment">// block 2</span></span><br><span class="line">				Lib.m0(); <span class="comment">// Unreachable</span></span><br><span class="line">			&#125; <span class="keyword">else</span> &#123; <span class="comment">// block 3</span></span><br><span class="line">				Lib.m1();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (a &lt;= Lib.m2()) &#123; <span class="comment">// block A</span></span><br><span class="line">	a = <span class="number">0</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123; <span class="comment">// block B</span></span><br><span class="line">	a = a + s.length; <span class="comment">// Error with null s</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<center>
    <i>图1 一个代码框架：
    s, a, Lib.m2()可以取任意值</i>
</center>



<p><img src="http://images.yingwai.top/picgo/SymJSf2.png" alt=""></p>
<center>
    <i>图2 代码执行路径</i>
</center>



<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Test No.</th>
<th style="text-align:left">Blocks Executed</th>
<th>State Representation</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:left">0, A</td>
<td>L;L</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:left">0, B</td>
<td>L;R</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:left">1, A</td>
<td>R;L;L</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:left">1, B</td>
<td>R;L;R</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:left">3, A</td>
<td>R;R;R;L</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:left">3, B</td>
<td>R;R;R;R</td>
</tr>
</tbody>
</table>
</div>
<center>
    <i>表IV 执行图1代码后的模糊表示</i>
</center>



<h4 id="PASS"><a href="#PASS" class="headerlink" title="PASS"></a>PASS</h4><p>​        对于表IV中的每个状态表示，可以获得相应的路径条件。如果有可能获得满足约束条件的解，则可以将其用作测试期间的输入。关于数值的约束可以通过SMT求解器来解决，但<strong>SMT不能处理对于字符串的约束</strong>。因此本文使用约束求解器PASS。</p>
<p>​        <strong>PASS可以处理对整数、位向量、浮点数和字符串的约束。</strong>虽然以前的支持字符串约束的约束解算器使用位向量或自动机，但通过参数化数组传递引入的建模可以实现更高效的求解。因此，它可以解决ECMAScript标准中与字符串操作相对应的大部分约束。</p>
<h4 id="符号存根及驱动程序"><a href="#符号存根及驱动程序" class="headerlink" title="符号存根及驱动程序"></a>符号存根及驱动程序</h4><p>​        符号变量是通过符号执行生成测试输入的对象。<strong>SymJS允许通过函数调用定义符号变量。</strong>下面的代码片段展示了定义符号字符串变量的例子：</p>
<p><code>var s = symjs_mk_symbol_string();</code></p>
<p>​        以上的例子定义了字符串类型的符号变量，也可以通过<code>symjs_mk_symbolic_int()</code>、<code>symjs_mk_symbolic_bool()</code>和<code>symjs_mk_symbolic_real()</code>分别定义整型、布尔型以及浮点型的符号变量。虽然SymJS只允许字符串、整数、布尔值和浮点数是符号的，但它们的约束作为更复杂的对象的组成部分保留在赋值/引用上，从而允许生成对象组成部分的值不断变化的测试。</p>
<p>​        为了确定图1中函数<code>func0()</code>的测试输入，需要额外的代码段。首先需要一个如下所示的符号驱动程序：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = symjs_mk_symbolic_string();</span><br><span class="line"><span class="keyword">var</span> a = symjs_mk_symbolic_float();</span><br><span class="line">func0(s, a);</span><br></pre></td></tr></table></figure>
<center>
    <i>图3 用于执行图1中代码的符号驱动程序</i>
</center>

<p>驱动程序声明符号变量并将它们作为参数传递给函数。注入依赖项的存根也是必需的。如下所示的符号存根包括符号变量声明。通过存根，包含对<code>Lib.m2()</code>的函数调用的返回值，以测试SymJS获得的输入。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Lib.m2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> symjs_mk_symbolic_float();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<center>
    <i>图4 提供图1中代码使用的Lib.m2()的符号存根</i>
</center>

<p>函数<code>symjs_mk_symbolic_*()</code>是用于在测试生成期间定义新符号变量的表达式。<strong>SymJS允许使用生成的测试输入进行正常的具体执行。</strong>在具体执行期间，函数返回测试输入中包含的具体值。SymJS可以将测试输入导出为JavaScript Object Notation (JSON) 格式的外部文件。文件可以由测试回放库读取，该库在<code>symjs_mk_symbolic_*()</code>函数调用中返回相应的测试输入数据。加载到典型Web浏览器中的测试库可以在没有自定义JavaScript解释器的情况下执行生成的测试。</p>
<h2 id="符号存根及驱动程序的自动生成"><a href="#符号存根及驱动程序的自动生成" class="headerlink" title="符号存根及驱动程序的自动生成"></a>符号存根及驱动程序的自动生成</h2><p>​        如第2部分所述，符号存根和驱动程序需要对目标函数进行符号执行并获得测试输入。返回符号变量的符号存根用于生成从被测函数调用的函数的返回值。需要符号驱动程序来改变传递给测试函数的参数。</p>
<h3 id="生成符号存根和驱动程序的策略"><a href="#生成符号存根和驱动程序的策略" class="headerlink" title="生成符号存根和驱动程序的策略"></a>生成符号存根和驱动程序的策略</h3><p>​        本文的符号存根生成技术为指定的函数和类生成存根。本文的驱动程序生成技术发出调用指定函数的代码。</p>
<p>​        对于存根生成，生成函数根据调用者期望的返回值类型，创建和返回对象。以下是预期类型与返回对象之间的映射关系：</p>
<ul>
<li><p>字符串、整数、布尔值和浮点数这些可以被SymJS作为符号处理的类型（后面称为SymJS基础类型）：</p>
<p>新定义的相应类型的符号变量。</p>
</li>
<li><p>其他类：</p>
<p>预期类型的新实例化对象。如果该类的目标是生成存根，则返回<strong>新实例化的存根对象</strong>。</p>
</li>
<li><p>Void：不返回任何内容。</p>
</li>
</ul>
<p>​        为了创建类的存根，还需要生成构造函数的存根。在这里，本文生成空构造函数，这将导致所有无状态对象。我们的方法假设没有对存根类的字段的直接访问，并且不为字段生成存根。</p>
<p>​        注意：即使返回值类型不是SymJS的基本类型，也可能得到多个测试输入。如果在返回的对象中定义的函数返回符号变量，会出现这种情况。如果<strong>非SymJS基本类型的对象包含返回SymJS基本类型的对象的函数，并且非SymJS基本类型生成了存根</strong>，就会发生这种情况。因此可以通过调用返回非SymJS基本类型的函数来获得多组测试输入。</p>
<p>​        使用本文的技术生成的符号驱动程序具有以下功能：</p>
<ul>
<li>如果待测函数不是静态的、需要一个实例去执行，则实例化对应类的对象并调用该函数</li>
<li>如果待测函数是静态的，就直接调用函数</li>
</ul>
<p>对于传递给函数的参数，驱动程序根据预期类型提供以下对象：</p>
<ul>
<li><p>SymJS基本类型：</p>
<p>新定义的相应类型的符号变量。</p>
</li>
<li><p>其他类：</p>
<p>预期类型的新实例化对象。如果该类的目标是存根生成，则传递新实例化的存根对象。</p>
</li>
</ul>
<p>​        选择参数的方式类似于解决在符号存根中返回什么的方式。</p>
<h3 id="从注释生成符号存根和驱动程序"><a href="#从注释生成符号存根和驱动程序" class="headerlink" title="从注释生成符号存根和驱动程序"></a>从注释生成符号存根和驱动程序</h3><p>​        上一部分提出的符号存根/驱动程序生成策略需要知道来自目标代码的类型信息，生成存根需要调用方期望的返回值类型，需要传递给被测函数的参数类型才能生成驱动程序。</p>
<p>​        但是JavaScript是一种动态类型语言，在真正运行前很难确定返回值和参数的类型。很多JavaScript程序对返回值和参数的类型有一个期望，通常是在应用程序编程接口（API）等中给出的。此外，有一种方法可以<strong>用机器可读的方式表示JavaScript代码的类型信息</strong>，就是JSDoc风格的注释。本文从JSDoc3[13]约定的风格的注释中获取类型信息，生成符号存根和驱动程序。</p>
<p>​        JSDoc3主要允许通过<code>@return</code>注释声明返回值类型。为了为图1的代码片段中使用的函数<code>Lib.m2()</code>生成符号存根，需要如下所示的注释：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@return <span class="type">&#123;Number&#125;</span> </span>m2 value */</span></span><br><span class="line">Lib.m2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; ... &#125;;</span><br></pre></td></tr></table></figure>
<p>如果将此类注释附加到函数的原始源代码，则可以确定返回值的类型。根据获得的返回值类型，可以以全自动的方式生成图4中的符号存根。该示例演示了为返回SymJS原语的函数生成符号存根。下面展示了为返回非SymJS基本类型的函数生成符号存根的示例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@return <span class="type">&#123;tx.Data&#125;</span> </span>data */</span></span><br><span class="line">tx.Ui.getValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; ... &#125;;</span><br></pre></td></tr></table></figure>
<center>
    ↓
</center>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">tx.Ui.getValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> tx.Data();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>​        符号驱动程序的生成也是一样的。</p>
<p>​        传递给函数的参数类型通常使用JSDoc3的<code>@param</code>注释给出。函数<code>func0()</code>的符号驱动程序可以从该函数中的注释生成：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@param <span class="type">&#123;String&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param <span class="type">&#123;Number&#125;</span> </span>a */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func0</span>(<span class="params">s, a</span>) </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure>
<p>注释给出了函数的参数类型，允许生成图3中的符号驱动程序。</p>
<p>​        提出的自动生成符号存根和驱动程序的技术是作为JSDoc3的插件实现的。也可以使用其他来源的类型信息，例如API规范文档。</p>
<h2 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h2><p>​        本文使用一个工业JavaScript程序进行了实验。该程序对应于在本文的自定义Web应用程序实现框架上实现的Web应用程序的客户端部分。该程序调用未在我们的框架中包装的ECMAScript标准中定义的API，并且它只包含对标准API或本文的框架的调用。表V显示了目标程序的统计数据：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">#Line</th>
<th style="text-align:center">#Function</th>
<th style="text-align:center">#File</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">431</td>
<td style="text-align:center">23</td>
<td style="text-align:center">1</td>
</tr>
</tbody>
</table>
</div>
<center>
    <i>表V 目标程序的统计数据</i>
</center>

<h3 id="符号存根和驱动程序的生成"><a href="#符号存根和驱动程序的生成" class="headerlink" title="符号存根和驱动程序的生成"></a>符号存根和驱动程序的生成</h3><p>​        使用本文的方法成功地为框架中定义的所有类和函数生成存根。表VI列出了生成的存根的统计数据：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">#Line(Orig.)</th>
<th style="text-align:center">#Line(Stub)</th>
<th style="text-align:center">#Function</th>
<th style="text-align:center">#File</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">2843</td>
<td style="text-align:center">1304</td>
<td style="text-align:center">154</td>
<td style="text-align:center">13</td>
</tr>
</tbody>
</table>
</div>
<center>
    <i>表VI 用于生成存根的框架源代码和生成的存根的统计数据</i>
</center>

<h3 id="生成测试输入和执行测试"><a href="#生成测试输入和执行测试" class="headerlink" title="生成测试输入和执行测试"></a>生成测试输入和执行测试</h3><p>​        所有函数的符号执行在1秒内完成，并生成测试输入。测试输入的数量（将具体值赋给符号变量）在目标函数之间是不同的。对于没有分支的函数，只生成1个测试输入，而对于更复杂的函数，获得的测试数量变化到27个。</p>
<p>​        利用获得的测试输入来具体执行目标函数。运行在网络浏览器上的测试回放库用于重放测试。使用JSCover[14]测量测试期间的代码覆盖率，获得92%的行覆盖率。结果表明，该技术能够自动生成单元测试输入，实现高代码覆盖率。</p>
<h3 id="实验中未覆盖的代码"><a href="#实验中未覆盖的代码" class="headerlink" title="实验中未覆盖的代码"></a>实验中未覆盖的代码</h3><p>​        实验结果表明，该方法可以生成代码覆盖率较高的测试输入，但没有达到100%的覆盖率，这意味着目标程序的某些部分没有被执行。以下是使用我们的方法未执行到的代码类。</p>
<p>​        <strong>意外类型的代码处理对象没有被覆盖到。</strong>由于JavaScript是一种动态类型语言，函数可能会返回意外类型的对象。为了处理这种情况，目标程序包含类型检查和后续错误处理代码。但是，通过本文的技术生成的符号存根总是返回源代码批注中描述的类型的对象。这样的存根不能利用处理不同于注释类型的对象的代码部分。</p>
<p>​        <strong>没有对象类型前提的代码也没有被覆盖到。</strong>目标程序包含在运行时确定对象类型并相应地处理它们的代码片段。然而，本文的技术不能涵盖这样的程序。从返回值类型未知的函数中，我们生成返回默认JavaScript “Object” 的存根。因此，与自定义类的对象交互的代码没有被覆盖。</p>
<h2 id="Conclusions"><a href="#Conclusions" class="headerlink" title="Conclusions"></a>Conclusions</h2><p>​        本文提出了一种为JavaScript代码自动生成单元测试输入数据的技术。该技术使用符号执行引擎，以便在测试期间实现高代码覆盖率。该技术分为两个阶段，由以下全自动步骤组成：</p>
<ul>
<li>基于从注释获得的类型信息生成符号存根/驱动程序</li>
<li>通过目标代码的符号执行生成测试输入</li>
</ul>
<p>​        实验结果显示，该技术可以生成92%的行覆盖率的测试，表明本文的技术可以自动生成和执行JavaScript代码的单元测试。</p>
<h3 id="Future-Work"><a href="#Future-Work" class="headerlink" title="Future Work"></a>Future Work</h3><p>​        未来的方向包括更多的验证试验和各种目标程序。虽然作者已经用相对较小的程序进行了实验，但也需要在较大的目标上进行实验。</p>
<p>​        根据实验结果，需要改进符号存根。可以使用引发异常的符号存根触发代码处理异常。除了更复杂的自动存根生成策略外，手动修改自动生成的存根被认为是增加覆盖率的有效方法。</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>[1] C. Cadar, V . Ganesh, P . M. Pawlowski, D. L. Dill, and D. R. Engler, <em>“EXE: Automatically Generating Inputs of Death,”</em> in Proceedings of the 13th ACM Conference on Computer and Communications Security, 2006, pp. 322–335.</p>
<p>[2] C. Cadar, D. Dunbar, and D. Engler, <em>“KLEE: Unassisted and Automatic Generation of High-coverage Tests for Complex Systems Programs,”</em> in Proceedings of the 8th USENIX Conference on Operating Systems Design and Implementation, 2008, pp. 209–224.</p>
<p>[3] C. S. Pǎsǎreanu and N. Rungta, <em>“Symbolic PathFinder: Symbolic Execution of Java Bytecode,”</em> in Proceedings of the IEEE/ACM International Conference on Automated Software Engineering, 2010, pp. 179–180.</p>
<p>[4] K. Sen, D. Marinov, and G. Agha, <em>“CUTE: A Concolic Unit Testing Engine for C,”</em> in Proceedings of the 10th European Software Engineering Conference, 2005, pp. 263–272.</p>
<p>[5] N. Tillmann and J. De Halleux, <em>“Pex: White Box Test Generation for .NET,”</em> in Proceedings of the 2nd International Conference on Tests and Proofs, ser. TAP’08, 2008, pp. 134–153.</p>
<p>[6] P . Godefroid, M. Y . Levin, and D. Molnar, <em>“SAGE: Whitebox Fuzzing for Security Testing,”</em> Queue, 2012, pp. 20:20–20:27.</p>
<p>[7] L. De Moura and N. Bjørner, <em>“Satisfiability Modulo Theories: Introduction and Applications,”</em> Commun. ACM, vol. 54, no. 9, 2011, pp. 69–77.</p>
<p>[8] P. Saxena, D. Akhawe, S. Hanna, F. Mao, S. McCamant, and D. Song, <em>“A Symbolic Execution Framework for JavaScript,”</em> in Proceedings of the 2010 IEEE Symposium on Security and Privacy, 2010, pp. 513–528.</p>
<p>[9] K. Sen, S. Kalasapur, T. Brutch, and S. Gibbs, <em>“Jalangi: A selective record-replay and dynamic analysis framework for javascript,”</em> in Proceedings of the 2013 9th Joint Meeting on Foundations of Software Engineering, 2013, pp. 488–498.</p>
<p>[10] G. Li and I. Ghosh, <em>“PASS: String Solving with Parameterized Array and Interval Automaton,”</em> in Proceedings of Haifa Verification Conference, 2013, pp. 15–31.</p>
<p>[11] ECMA International, Standard ECMA-262 - ECMAScript Language Specification, 5th ed., June 2011. [Online]. Available: <a href="http://www.ecma-international.org/publications/standards/Ecma-262.htm" target="_blank" rel="noopener">http://www.ecma-international.org/publications/standards/Ecma-262.htm</a></p>
<p>[12] <em>“Rhino,”</em> <a href="https://developer.mozilla.org/en-US/docs/Rhino" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Rhino</a>, [Online; accessed 2014.08.15].</p>
<p>[13] <em>“Use JSDoc,”</em> <a href="http://usejsdoc.org/index.html" target="_blank" rel="noopener">http://usejsdoc.org/index.html</a>, [Online; accessed 2014.08.15].</p>
<p>[14] <em>“JSCover - JavaScript code coverage,”</em> <a href="http://tntim96.github.io/JSCover/" target="_blank" rel="noopener">http://tntim96.github.io/JSCover/</a> <a href="http://usejsdoc.org/index.html" target="_blank" rel="noopener">http://usejsdoc.org/index.html</a>, [Online; accessed 2014.08.15].</p>
]]></content>
      <categories>
        <category>Papers</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode刷题</title>
    <url>/2020/05/25/LeetCode%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<p>记录一下每日刷题 $\surd$</p>
<a id="more"></a>
<p>[TOC]</p>
<h1 id="4-寻找两个正序数组的中位数"><a href="#4-寻找两个正序数组的中位数" class="headerlink" title="4. 寻找两个正序数组的中位数"></a>4. 寻找两个正序数组的中位数</h1><p><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/median-of-two-sorted-arrays/</a></p>
<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定两个大小为 m 和 n 的正序（从小到大）数组 <code>nums1</code> 和 <code>nums2</code>。</p>
<p>请你找出这两个正序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。</p>
<p>你可以假设 <code>nums1</code> 和 <code>nums2</code> 不会同时为空。</p>
<p>示例 1:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nums1 = [<span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">nums2 = [<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">则中位数是 <span class="number">2.0</span></span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">nums1 = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">nums2 = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">则中位数是 (<span class="number">2</span> + <span class="number">3</span>)/<span class="number">2</span> = <span class="number">2.5</span></span><br></pre></td></tr></table></figure>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>题目要求时间复杂度为 O(log(m + n))，知道要用二分查找，但是具体方法想不出来，只能看了一篇题解中的<a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-2/" target="_blank" rel="noopener">找第 k 小的数的方法</a>。</p>
<p>主要思想是：</p>
<ul>
<li>比较两个数组的第 <code>k/2</code> 个数字（向下取整），哪个小则可以直接排除那个数组的前 <code>k/2</code> 个数字（因为两个数组都是有序的）；</li>
<li>上一步已经排除了 <code>k/2</code> 个数，因此 <code>k = k - k/2</code>，再次比较两个数组（其中一个数组为排除了 <code>k/2</code> 个数后的新数组）的第 <code>k/2</code> 个数字，直到 <code>k = 1</code> 或其中一个数组中的元素被全部排除了：<ol>
<li>若 <code>k = 1</code> 则返回当前两个数组的第一个元素中较小的那一个；</li>
<li>若其中一个数组被全部排除，则返回另一个数组中的第 <code>k</code> 个元素。</li>
</ol>
</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMedianSortedArrays</span><span class="params">(self, nums1: List[int], nums2: List[int])</span> -&gt; float:</span></span><br><span class="line">        n, m = len(nums1), len(nums2)</span><br><span class="line">        left = (n + m + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">        right = (n + m + <span class="number">2</span>) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> (self.recur(left, nums1, <span class="number">0</span>, n<span class="number">-1</span>, nums2, <span class="number">0</span>, m<span class="number">-1</span>) + self.recur(right, nums1, <span class="number">0</span>, n<span class="number">-1</span>, nums2, <span class="number">0</span>, m<span class="number">-1</span>)) * <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recur</span><span class="params">(self, k, arr1, s1, e1, arr2, s2, e2)</span>:</span></span><br><span class="line">        l1 = e1 - s1 + <span class="number">1</span></span><br><span class="line">        l2 = e2 - s2 + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> l1 &gt; l2:</span><br><span class="line">            <span class="keyword">return</span> self.recur(k, arr2, s2, e2, arr1, s1, e1)</span><br><span class="line">        <span class="keyword">if</span> l1 == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> arr2[s2+k<span class="number">-1</span>]</span><br><span class="line">        <span class="keyword">if</span> k == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> min(arr1[s1], arr2[s2])</span><br><span class="line">        p1 = s1 + min(k//<span class="number">2</span>, l1) - <span class="number">1</span></span><br><span class="line">        p2 = s2 + min(k//<span class="number">2</span>, l2) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> arr1[p1] &lt; arr2[p2]:</span><br><span class="line">            <span class="keyword">return</span> self.recur(k-min(k//<span class="number">2</span>, l1), arr1, p1+<span class="number">1</span>, e1, arr2, s2, e2)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.recur(k-min(k//<span class="number">2</span>, l2), arr1, s1, e1, arr2, p2+<span class="number">1</span>, e2)</span><br></pre></td></tr></table></figure>
<h1 id="6-Z字形变换"><a href="#6-Z字形变换" class="headerlink" title="6. Z字形变换"></a>6. Z字形变换</h1><p><a href="https://leetcode-cn.com/problems/zigzag-conversion/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/zigzag-conversion/</a></p>
<h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。</p>
<p>比如输入字符串为 <code>&quot;LEETCODEISHIRING&quot;</code> 行数为 3 时，排列如下：</p>
<figure class="highlight julia"><table><tr><td class="code"><pre><span class="line">L   C   <span class="literal">I</span>   R</span><br><span class="line">E T O E S <span class="literal">I</span> <span class="literal">I</span> G</span><br><span class="line">E   D   H   N</span><br></pre></td></tr></table></figure>
<p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：<code>&quot;LCIRETOESIIGEDHN&quot;</code>。</p>
<p>请你实现这个将字符串进行指定行数变换的函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">convert</span><span class="params">(<span class="built_in">string</span> s, <span class="keyword">int</span> numRows)</span></span>;</span><br></pre></td></tr></table></figure>
<p>示例 1:</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入: <span class="attr">s</span> = <span class="string">"LEETCODEISHIRING"</span>, <span class="attr">numRows</span> = <span class="number">3</span></span><br><span class="line">输出: <span class="string">"LCIRETOESIIGEDHN"</span></span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight julia"><table><tr><td class="code"><pre><span class="line">输入: s = <span class="string">"LEETCODEISHIRING"</span>, numRows = <span class="number">4</span></span><br><span class="line">输出: <span class="string">"LDREOEIIECIHNTSG"</span></span><br><span class="line">解释:</span><br><span class="line"></span><br><span class="line">L     D     R</span><br><span class="line">E   O E   <span class="literal">I</span> <span class="literal">I</span></span><br><span class="line">E C   <span class="literal">I</span> H   N</span><br><span class="line">T     S     G</span><br></pre></td></tr></table></figure>
<h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>用一个二维列表 <code>tmp</code> 存储 Z 字形字符串中每一行的元素，最后将 <code>tmp</code> 中的字符串逐行拼接即得到结果，具体步骤如下：</p>
<ul>
<li>从头到尾遍历<code>s</code>，<code>cnt</code> 表示当前字符的下标，<code>curRow</code> 表示当前字符 <code>s[cnt]</code> 在 Z 字形字符串中所在的行数，<code>step</code> 表示当前的方向（因为 Z 字形中字符都是往上往下这样循环）；</li>
<li>将 <code>s[cnt]</code> 加入 <code>tmp[curRow]</code>，然后 <code>cnt</code> 自增 1，<code>curRow</code> 自增 <code>step</code>。当 <code>curRow</code> 为 <code>0</code> 或 <code>numRows</code> 时，转换方向，<code>step *= -1</code> 。</li>
</ul>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convert</span><span class="params">(self, s: str, numRows: int)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">if</span> numRows == <span class="number">1</span>: <span class="keyword">return</span> s</span><br><span class="line">        tmp = [<span class="string">""</span> <span class="keyword">for</span> _ <span class="keyword">in</span> range(numRows)]</span><br><span class="line">        cnt = curRow = <span class="number">0</span></span><br><span class="line">        step = <span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> cnt &lt; len(s):</span><br><span class="line">            tmp[curRow] += s[cnt]</span><br><span class="line">            cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> curRow == numRows - <span class="number">1</span> <span class="keyword">or</span> curRow == <span class="number">0</span>:</span><br><span class="line">                step *= <span class="number">-1</span></span><br><span class="line">            curRow += step</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(tmp)</span><br></pre></td></tr></table></figure>
<h1 id="14-最长公共前缀"><a href="#14-最长公共前缀" class="headerlink" title="14. 最长公共前缀"></a>14. 最长公共前缀</h1><p><a href="https://leetcode-cn.com/problems/longest-common-prefix/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-common-prefix/</a></p>
<h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>编写一个函数来查找字符串数组中的最长公共前缀。</p>
<p>如果不存在公共前缀，返回空字符串 <code>&quot;&quot;</code>。</p>
<p>示例 1:</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">输入: [<span class="string">"flower"</span>,<span class="string">"flow"</span>,<span class="string">"flight"</span>]</span><br><span class="line">输出: <span class="string">"fl"</span></span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">输入: [<span class="string">"dog"</span>,<span class="string">"racecar"</span>,<span class="string">"car"</span>]</span><br><span class="line">输出: <span class="string">""</span></span><br><span class="line">解释: 输入不存在公共前缀。</span><br></pre></td></tr></table></figure>
<p>说明:</p>
<p>所有输入只包含小写字母 <code>a-z</code> 。</p>
<h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>Python中的<code>max()</code>和<code>min()</code>可以比较字符串，按照ASCII值逐位比较：比如<code>cba</code>、<code>cbab</code>、<code>cbd</code>中最大为<code>cbd</code>，最小为<code>cba</code>。因此只要比较最大最小的两个字符串即可找到最大公共前缀。</p>
<h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs: List[str])</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> strs: <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        str1 = min(strs)</span><br><span class="line">        str2 = max(strs)</span><br><span class="line">        <span class="keyword">for</span> i,x <span class="keyword">in</span> enumerate(str1):</span><br><span class="line">            <span class="keyword">if</span> x != str2[i]:</span><br><span class="line">                <span class="keyword">return</span> str2[:i]</span><br><span class="line">        <span class="keyword">return</span> str1</span><br></pre></td></tr></table></figure>
<h1 id="21-合并两个有序链表"><a href="#21-合并两个有序链表" class="headerlink" title="21. 合并两个有序链表"></a>21. 合并两个有序链表</h1><p><a href="https://leetcode-cn.com/problems/merge-two-sorted-lists/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/merge-two-sorted-lists/</a></p>
<h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>将两个升序链表合并为一个新的 升序 链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 </p>
<p>示例：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">4</span>, <span class="number">1</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span></span><br><span class="line">输出：<span class="number">1</span>-&gt;<span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">3</span>-&gt;<span class="number">4</span>-&gt;<span class="number">4</span></span><br></pre></td></tr></table></figure>
<h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h2><p>因为链表有序，可以用两个指针分别遍历两个链表，将两个指针指向的节点中值较小的节点加入到新链表中，然后该指针往后挪，直到遍历完两个链表。</p>
<p>时间复杂度为 O(M + N)，M 和 N 分别为两个链表的长度。</p>
<h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, l1: ListNode, l2: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> l1 <span class="keyword">and</span> <span class="keyword">not</span> l2: <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        p1, p2 = l1, l2</span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> p1 <span class="keyword">and</span> p2:</span><br><span class="line">            <span class="keyword">if</span> p2.val &lt; p1.val:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> pre:</span><br><span class="line">                    root = p2</span><br><span class="line">                    pre = root</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    pre.next = p2</span><br><span class="line">                    pre = p2</span><br><span class="line">                p2 = p2.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> pre:</span><br><span class="line">                    root = p1</span><br><span class="line">                    pre = root</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    pre.next = p1</span><br><span class="line">                    pre = p1</span><br><span class="line">                p1 = p1.next</span><br><span class="line">        <span class="keyword">if</span> p1:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> pre:</span><br><span class="line">                <span class="keyword">return</span> p1</span><br><span class="line">            pre.next = p1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> pre:</span><br><span class="line">                <span class="keyword">return</span> p2</span><br><span class="line">            pre.next = p2</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>
<h1 id="32-最长有效括号"><a href="#32-最长有效括号" class="headerlink" title="32. 最长有效括号"></a>32. 最长有效括号</h1><p><a href="https://leetcode-cn.com/problems/longest-valid-parentheses/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-valid-parentheses/</a></p>
<h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个只包含 <code>&#39;(&#39;</code> 和 <code>&#39;)&#39;</code> 的字符串，找出最长的包含有效括号的子串的长度。</p>
<p>示例 1:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">输入: "(()"</span></span><br><span class="line"><span class="section">输出: 2</span></span><br><span class="line"><span class="section">解释: 最长有效括号子串为 "()"</span></span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">输入: ")()())"</span></span><br><span class="line"><span class="section">输出: 4</span></span><br><span class="line"><span class="section">解释: 最长有效括号子串为 "()()"</span></span><br></pre></td></tr></table></figure>
<h2 id="思路-4"><a href="#思路-4" class="headerlink" title="思路"></a>思路</h2><p>动态规划：用 $dp[i]$ 表示字符串中以第 $i$ 个字符结尾的字符串的最大有效子串长度。根据题意，$s[i]$ 为 <code>&#39;(&#39;</code> 时 $dp[i]=0$，有效的子串结尾肯定是 <code>&#39;)&#39;</code>，可列出动态方程：</p>
<p>当 $s[i]$ 为 <code>&#39;)&#39;</code> 且 $s[i-1]$ 为 <code>&#39;(&#39;</code> 时，也就是 “$……()$”，</p>
<script type="math/tex; mode=display">
dp[i] = dp[i-2] + 2</script><p>当 $s[i]$ 为 <code>&#39;)&#39;</code> 且 $s[i-1]$ 为 <code>&#39;)&#39;</code> 时，也就是 “$……))$”，如果倒数第二个 <code>&#39;)&#39;</code> 是一个有效字符串 $sub_s$ 的一部分，且 $s[i-\mbox{len}(sub_s)-1]$ 为 <code>&#39;(&#39;</code> 。此时的最长有效子串的长度即为 $sub_s$ 加上 $2$ 再加上 $dp[i-\mbox{len}(sub_s)-2]$：</p>
<script type="math/tex; mode=display">
dp[i] = dp[i-1] + 2 + dp[i-dp[i-1]-2]</script><p>最后的结果为 $dp$ 数组中的最大值。</p>
<p>上面两条方程都要注意判断下标 $i-2$ 和 $i-dp[i-1]-2$ 的值，不要小于 $0$。</p>
<h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestValidParentheses</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> len(s) &lt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        dp = [<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(s)):</span><br><span class="line">            <span class="keyword">if</span> s[i] == <span class="string">')'</span>:</span><br><span class="line">                <span class="keyword">if</span> s[i<span class="number">-1</span>] == <span class="string">'('</span>:</span><br><span class="line">                    dp.append(dp[max(i<span class="number">-2</span>, <span class="number">0</span>)] + <span class="number">2</span>)</span><br><span class="line">                <span class="keyword">elif</span> s[i<span class="number">-1</span>] == <span class="string">')'</span> <span class="keyword">and</span> i-dp[i<span class="number">-1</span>]<span class="number">-1</span> &gt;= <span class="number">0</span> <span class="keyword">and</span> s[i-dp[i<span class="number">-1</span>]<span class="number">-1</span>] == <span class="string">'('</span>:</span><br><span class="line">                    dp.append(dp[i<span class="number">-1</span>] + <span class="number">2</span> + dp[max(i-dp[i<span class="number">-1</span>]<span class="number">-2</span>, <span class="number">0</span>)])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    dp.append(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dp.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> max(dp)</span><br></pre></td></tr></table></figure>
<h1 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35. 搜索插入位置"></a>35. 搜索插入位置</h1><p><a href="https://leetcode-cn.com/problems/search-insert-position/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/search-insert-position/</a></p>
<h2 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>
<p>你可以假设数组中无重复元素。</p>
<p>示例 1:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="number">5</span></span><br><span class="line">输出: <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="number">2</span></span><br><span class="line">输出: <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>示例 3:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="number">7</span></span><br><span class="line">输出: <span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>示例 4:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="number">0</span></span><br><span class="line">输出: <span class="number">0</span></span><br></pre></td></tr></table></figure>
<h2 id="思路-5"><a href="#思路-5" class="headerlink" title="思路"></a>思路</h2><p>二分查找，每次排除当前数组中一半的元素。</p>
<p>注意递归边界为 <code>left &gt;= right</code>，<code>target</code> 在 <code>nums</code> 不存在有两种情况：</p>
<ul>
<li>当 <code>left &gt; right</code> 时，数组 <code>nums</code> 中不存在与 <code>target</code> 相等的元素，此时 <code>nums[left]</code> 为 <code>nums</code> 中第一个大于 <code>target</code> 的元素，<code>left</code> 即为 <code>target</code> 应该插入的位置；</li>
<li>当 <code>left == right</code> 时，此时 <code>left</code> 和 <code>right</code> 应该都指向 <code>nums</code> 中最后一个元素（因为 <code>mid</code> 总是向下取整，这种情况下 <code>left</code> 每次都 <code>+1</code>，直到指向最后一个元素），此时需要额外判断 <code>target</code> 与最后一个元素的大小，<code>target</code> 大则将其插入到数组末尾。</li>
</ul>
<h2 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchInsert</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> self.getInsertIndex(nums, <span class="number">0</span>, len(nums)<span class="number">-1</span>, target)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getInsertIndex</span><span class="params">(self, nums, left, right, target)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> left &gt;= right:</span><br><span class="line">            <span class="keyword">if</span> target &gt; nums[left]:</span><br><span class="line">                <span class="keyword">return</span> left + <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> left</span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> target == nums[mid]:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">if</span> target &lt; nums[mid]:</span><br><span class="line">            <span class="keyword">return</span> self.getInsertIndex(nums, left, mid<span class="number">-1</span>, target)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.getInsertIndex(nums, mid+<span class="number">1</span>, right, target)</span><br></pre></td></tr></table></figure>
<h1 id="94-二叉树的中序遍历"><a href="#94-二叉树的中序遍历" class="headerlink" title="94. 二叉树的中序遍历"></a>94. 二叉树的中序遍历</h1><p><a href="https://leetcode-cn.com/problems/binary-tree-inorder-traversal/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-inorder-traversal/</a></p>
<h2 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉树，返回它的中序 遍历。</p>
<p>示例:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="literal">null</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">   <span class="number">1</span></span><br><span class="line">    \</span><br><span class="line">     <span class="number">2</span></span><br><span class="line">    /</span><br><span class="line">   <span class="number">3</span></span><br><span class="line"></span><br><span class="line">输出: [<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<p>进阶: 递归算法很简单，你可以通过迭代算法完成吗？</p>
<h2 id="思路-6"><a href="#思路-6" class="headerlink" title="思路"></a>思路</h2><p>这里可以用两种方法，递归和迭代，前者比较简单就不说了，主要讲后者。</p>
<p>迭代算法中需要用到一个栈，每到一个节点先将其入栈，遍历其左子树，然后访问该节点，访问完后该节点就可以出栈了，最后遍历其右子树。</p>
<h2 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h2><p>数据结构：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br></pre></td></tr></table></figure>
<p>递归：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        ans = []</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(root)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> root:</span><br><span class="line">                helper(root.left)</span><br><span class="line">                ans.append(root.val)</span><br><span class="line">                helper(root.right)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        helper(root)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<p>迭代：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span><span class="params">(self, root: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        ans, v = [], []</span><br><span class="line">        cur = root</span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">or</span> v:</span><br><span class="line">            <span class="keyword">while</span> cur:</span><br><span class="line">                v.append(cur)</span><br><span class="line">                cur = cur.left</span><br><span class="line">            cur = v.pop()</span><br><span class="line">            ans.append(cur.val)</span><br><span class="line">            cur = cur.right</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<h1 id="96-不同的二叉搜索树"><a href="#96-不同的二叉搜索树" class="headerlink" title="96. 不同的二叉搜索树"></a>96. 不同的二叉搜索树</h1><p><a href="https://leetcode-cn.com/problems/unique-binary-search-trees/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/unique-binary-search-trees/</a></p>
<h2 id="题目描述-7"><a href="#题目描述-7" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个整数 n，求以 1 … n 为节点组成的二叉搜索树有多少种？</p>
<p>示例:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: <span class="number">3</span></span><br><span class="line">输出: <span class="number">5</span></span><br><span class="line">解释:</span><br><span class="line">给定 n = <span class="number">3</span>, 一共有 <span class="number">5</span> 种不同结构的二叉搜索树:</span><br><span class="line"></span><br><span class="line">   <span class="number">1</span>         <span class="number">3</span>     <span class="number">3</span>      <span class="number">2</span>      <span class="number">1</span></span><br><span class="line">    \       /     /      / \      \</span><br><span class="line">     <span class="number">3</span>     <span class="number">2</span>     <span class="number">1</span>      <span class="number">1</span>   <span class="number">3</span>      <span class="number">2</span></span><br><span class="line">    /     /       \                 \</span><br><span class="line">   <span class="number">2</span>     <span class="number">1</span>         <span class="number">2</span>                 <span class="number">3</span></span><br></pre></td></tr></table></figure>
<h2 id="思路-7"><a href="#思路-7" class="headerlink" title="思路"></a>思路</h2><p>动态规划：</p>
<ul>
<li>用 <code>dp[n]</code> 表示以 1 … n 为节点组成的二叉搜索树的数量，<code>f[i]</code> 表示 i 为根节点的二叉搜索树的数量；</li>
<li>结果即为以各个节点作为根节点的数量总和：<code>dp[n] = f[1] + f[2] + ... + f[n]</code>；</li>
<li>当 i 为根节点时，其左子树的节点数为 i-1，右子树的节点数为 n-i，因此有：<code>f[i] = f[i-1] * f[n-i]</code>；</li>
<li><code>dp[n] = dp[0]*dp[n-1] + dp[1]*dp[n-2] + ... + dp[n-1]*dp[0]</code>。</li>
</ul>
<p>当 n 为1或0时，只有一种情况，即 <code>dp[0] = dp[1] = 1</code>。</p>
<p>还有一种方法是递归，也是利用上面的公式。</p>
<h2 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h2><p>动态规划：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numTrees</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">        dp = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">        dp[<span class="number">0</span>] = dp[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, i+<span class="number">1</span>):</span><br><span class="line">                dp[i] += dp[j<span class="number">-1</span>] * dp[i-j]</span><br><span class="line">        <span class="keyword">return</span> dp[n]</span><br></pre></td></tr></table></figure>
<p>递归：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numTrees</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">        memo = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(n)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> memo[n] &gt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> memo[n]</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n):</span><br><span class="line">                memo[n] += helper(i) * helper(n-i<span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">return</span> memo[n]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helper(n)</span><br></pre></td></tr></table></figure>
<h1 id="97-交错字符串"><a href="#97-交错字符串" class="headerlink" title="97. 交错字符串"></a>97. 交错字符串</h1><p><a href="https://leetcode-cn.com/problems/interleaving-string/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/interleaving-string/</a></p>
<h2 id="题目描述-8"><a href="#题目描述-8" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定三个字符串 s1, s2, s3, 验证 s3 是否是由 s1 和 s2 交错组成的。</p>
<p>示例 1:</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入: <span class="attr">s1</span> = <span class="string">"aabcc"</span>, <span class="attr">s2</span> = <span class="string">"dbbca"</span>, <span class="attr">s3</span> = <span class="string">"aadbbcbcac"</span></span><br><span class="line">输出: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">输入: <span class="attr">s1</span> = <span class="string">"aabcc"</span>, <span class="attr">s2</span> = <span class="string">"dbbca"</span>, <span class="attr">s3</span> = <span class="string">"aadbbbaccc"</span></span><br><span class="line">输出: <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h2 id="思路-8"><a href="#思路-8" class="headerlink" title="思路"></a>思路</h2><p>动态规划，用 <code>dp[i][j]</code> 表示 <code>s1</code> 的前 <code>i</code> 个字符和 <code>s2</code> 的前 <code>j</code> 个字符是否能交错组成 <code>s3</code> 的前 <code>i+j</code> 个字符。若 <code>s1[i]==s3[i+j]</code>，那么 <code>dp[i][j]</code> 是否为真则取决于 <code>s1</code> 的前 <code>i-1</code>（<code>s2</code> 的前 <code>j-1</code>）个字符和 <code>s2</code> 的前 <code>j</code> <code>s1</code> 的前 <code>i</code>）个字符是否能交错组成 <code>s3</code> 的前 <code>i+j-1</code> 个字符，即 <code>dp[i-1][j]</code>（<code>dp[i][j-1]</code>）是否为真。</p>
<p>可得状态转移方程：</p>
<ul>
<li><code>dp[i][j] = (dp[i-1][j] and s1[i-1]==s3[i+j-1]) or (dp[i][j-1] and s2[j-1]==s3[i+j-1])</code>；</li>
<li>边界条件为<code>dp[0][0] = True</code>。</li>
</ul>
<p>当 <code>s1</code> 和 <code>s2</code> 长度之和不等于 <code>s3</code> 长度时，直接输出 <code>False</code>。</p>
<p>时间复杂度为 O(MN)。</p>
<h2 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isInterleave</span><span class="params">(self, s1: str, s2: str, s3: str)</span> -&gt; bool:</span></span><br><span class="line">        n, m = len(s1), len(s2)</span><br><span class="line">        <span class="keyword">if</span> n + m != len(s3):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        dp = [[<span class="literal">False</span>] * (m + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n + <span class="number">1</span>)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(m + <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> i &gt; <span class="number">0</span>:</span><br><span class="line">                    dp[i][j] = dp[i][j] <span class="keyword">or</span> (dp[i<span class="number">-1</span>][j] <span class="keyword">and</span> s1[i<span class="number">-1</span>]==s3[i+j<span class="number">-1</span>])</span><br><span class="line">                <span class="keyword">if</span> j &gt; <span class="number">0</span>:</span><br><span class="line">                    dp[i][j] = dp[i][j] <span class="keyword">or</span> (dp[i][j<span class="number">-1</span>] <span class="keyword">and</span> s2[j<span class="number">-1</span>]==s3[i+j<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">return</span> dp[n][m]</span><br></pre></td></tr></table></figure>
<h1 id="100-相同的树"><a href="#100-相同的树" class="headerlink" title="100. 相同的树"></a>100. 相同的树</h1><p><a href="https://leetcode-cn.com/problems/same-tree/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/same-tree/</a></p>
<h2 id="题目描述-9"><a href="#题目描述-9" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定两个二叉树，编写一个函数来检验它们是否相同。</p>
<p>如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。</p>
<p>示例 1:</p>
<pre><code>输入:       1         1
          / \       / \
         2   3     2   3

        [1,2,3],   [1,2,3]

输出: true
</code></pre><p>示例 2:</p>
<pre><code>输入:      1          1
          /           \
         2             2

        [1,2],     [1,null,2]

输出: false
</code></pre><p>示例 3:</p>
<pre><code>输入:       1         1
          / \       / \
         2   1     1   2

        [1,2,1],   [1,1,2]

输出: false
</code></pre><h2 id="思路-9"><a href="#思路-9" class="headerlink" title="思路"></a>思路</h2><p>就是二叉树的遍历，用递归判断两棵树对应节点是否存在以及值是否相等即可。</p>
<h2 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSameTree</span><span class="params">(self, p: TreeNode, q: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(p, q)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> p <span class="keyword">and</span> <span class="keyword">not</span> q: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> p <span class="keyword">and</span> <span class="keyword">not</span> q <span class="keyword">or</span> <span class="keyword">not</span> p <span class="keyword">and</span> q: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> p.val != q.val: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> helper(p.left, q.left) <span class="keyword">and</span> helper(p.right, q.right)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helper(p, q)</span><br></pre></td></tr></table></figure>
<h1 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101. 对称二叉树"></a>101. 对称二叉树</h1><p><a href="https://leetcode-cn.com/problems/symmetric-tree/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/symmetric-tree/</a></p>
<h2 id="题目描述-10"><a href="#题目描述-10" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉树，检查它是否是镜像对称的。</p>
<p>例如，二叉树 [1,2,2,3,4,4,3] 是对称的。</p>
<pre><code>    1
   / \
  2   2
 / \ / \
3  4 4  3
</code></pre><p>但是下面这个 <code>[1,2,2,null,3,null,3]</code> 则不是镜像对称的:</p>
<pre><code>    1
   / \
  2   2
   \   \
   3    3
</code></pre><p>进阶：</p>
<p>你可以运用递归和迭代两种方法解决这个问题吗？</p>
<h2 id="思路-10"><a href="#思路-10" class="headerlink" title="思路"></a>思路</h2><p>可以通过判断根节点的两棵子树 $p,q$ 是否是镜像的。遍历的方式与第100题类似，只是这次两者不再按相同的顺序遍历，而是按镜像的方式：</p>
<ul>
<li>$p$ 遍历其左子树时，$q$ 遍历其右子树；</li>
<li>$p$ 遍历其右子树时，$q$ 遍历其左子树。</li>
</ul>
<h2 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSymmetric</span><span class="params">(self, root: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(p, q)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> p <span class="keyword">and</span> <span class="keyword">not</span> q: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> p <span class="keyword">and</span> <span class="keyword">not</span> q <span class="keyword">or</span> <span class="keyword">not</span> p <span class="keyword">and</span> q: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> p.val != q.val: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> helper(p.left, q.right) <span class="keyword">and</span> helper(p.right, q.left)</span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">and</span> root.left <span class="keyword">and</span> root.right:</span><br><span class="line">            <span class="keyword">return</span> helper(root.left, root.right)</span><br><span class="line">        <span class="keyword">elif</span> root <span class="keyword">and</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right <span class="keyword">or</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h1 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102. 二叉树的层序遍历"></a>102. 二叉树的层序遍历</h1><p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-level-order-traversal/</a></p>
<h2 id="题目描述-11"><a href="#题目描述-11" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个二叉树，请你返回其按 <strong>层序遍历</strong> 得到的节点值。 （即逐层地，从左到右访问所有节点）。</p>
<p>示例：<br>二叉树：<code>[3,9,20,null,null,15,7]</code>,</p>
<pre><code>    3
   / \
  9  20
    /  \
   15   7
</code></pre><p>返回其层次遍历结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [<span class="number">3</span>],</span><br><span class="line">  [<span class="number">9</span>,<span class="number">20</span>],</span><br><span class="line">  [<span class="number">15</span>,<span class="number">7</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="思路-11"><a href="#思路-11" class="headerlink" title="思路"></a>思路</h2><p>最简单的方法是用递归，按前序遍历二叉树中的节点，记录访问节点的层数，每层用一个列表 <code>ans[d]</code> ( <code>d</code> 表示当前节点所在层的深度)保存节点值。</p>
<p>另一种思路是使用BFS，使用一个队列 <code>queue</code> 存放待访问的节点，每到一层都用 <code>s</code> 存当前层节点的个数，每访问到一个节点就将其值存入答案列表中对应的位置，并将其左右子节点存入队列。</p>
<h2 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h2><p>递归，前序遍历：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(self, root: TreeNode)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> []</span><br><span class="line">        ans = []</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(node, d)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node: <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> len(ans) == d:</span><br><span class="line">                ans.append([])</span><br><span class="line">            ans[d].append(node.val)</span><br><span class="line">            helper(node.left, d+<span class="number">1</span>)</span><br><span class="line">            helper(node.right, d+<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        helper(root, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<p>BFS：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span><span class="params">(self, root: TreeNode)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        queue = collections.deque()</span><br><span class="line">        queue.append(root)</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            s = len(queue)</span><br><span class="line">            d = []</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(s):</span><br><span class="line">                node = queue.popleft()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                d.append(node.val)</span><br><span class="line">                queue.append(node.left)</span><br><span class="line">                queue.append(node.right)</span><br><span class="line">            <span class="keyword">if</span> d:</span><br><span class="line">                ans.append(d)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<h1 id="107-二叉树的层次遍历-II"><a href="#107-二叉树的层次遍历-II" class="headerlink" title="107. 二叉树的层次遍历 II"></a>107. 二叉树的层次遍历 II</h1><p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-level-order-traversal-ii/</a></p>
<h2 id="题目描述-12"><a href="#题目描述-12" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉树，返回其节点值自底向上的层次遍历。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）</p>
<p>例如：<br>给定二叉树 <code>[3,9,20,null,null,15,7]</code>,</p>
<pre><code>    3
   / \
  9  20
    /  \
   15   7
</code></pre><p>返回其自底向上的层次遍历为：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  [<span class="number">15</span>,<span class="number">7</span>],</span><br><span class="line">  [<span class="number">9</span>,<span class="number">20</span>],</span><br><span class="line">  [<span class="number">3</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="思路-12"><a href="#思路-12" class="headerlink" title="思路"></a>思路</h2><p>与层次遍历一样，只是输出的时候倒序输出即可，也是有两种方法：递归前序遍历和BFS。</p>
<h2 id="代码-12"><a href="#代码-12" class="headerlink" title="代码"></a>代码</h2><p>前序遍历，递归：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">levelOrderBottom</span><span class="params">(self, root: TreeNode)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        ans = []</span><br><span class="line">        self.helper(root, <span class="number">0</span>, ans)</span><br><span class="line">        <span class="keyword">return</span> ans[::<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, node, depth, ans)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> len(ans) == depth:</span><br><span class="line">            ans.append([])</span><br><span class="line">        ans[depth].append(node.val)</span><br><span class="line">        self.helper(node.left, depth+<span class="number">1</span>, ans)</span><br><span class="line">        self.helper(node.right, depth+<span class="number">1</span>, ans)</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure>
<p>BFS：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">levelOrderBottom</span><span class="params">(self, root: TreeNode)</span> -&gt; List[List[int]]:</span></span><br><span class="line">        queue = collections.deque()</span><br><span class="line">        queue.append(root)</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            size = len(queue)</span><br><span class="line">            t = []</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> range(size):</span><br><span class="line">                p = queue.popleft()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> p:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                t.append(p.val)</span><br><span class="line">                queue.append(p.left)</span><br><span class="line">                queue.append(p.right)</span><br><span class="line">            <span class="keyword">if</span> t:</span><br><span class="line">                ans.append(t)</span><br><span class="line">        <span class="keyword">return</span> ans[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>
<h1 id="110-平衡二叉树"><a href="#110-平衡二叉树" class="headerlink" title="110. 平衡二叉树"></a>110. 平衡二叉树</h1><p><a href="https://leetcode-cn.com/problems/balanced-binary-tree/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/balanced-binary-tree/</a></p>
<h2 id="题目描述-13"><a href="#题目描述-13" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p>
<p>本题中，一棵高度平衡二叉树定义为：</p>
<p><em>一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。</em></p>
<p>示例 1:</p>
<p>给定二叉树 <code>[3,9,20,null,null,15,7]</code></p>
<pre><code>    3
   / \
  9  20
    /  \
   15   7
</code></pre><p>返回 <code>true</code> 。</p>
<p>示例 2:</p>
<p>给定二叉树 <code>[1,2,2,3,3,null,null,4,4]</code></p>
<pre><code>       1
      / \
     2   2
    / \
   3   3
  / \
 4   4
</code></pre><p>返回 <code>false</code> 。</p>
<h2 id="思路-13"><a href="#思路-13" class="headerlink" title="思路"></a>思路</h2><p>有两种解法，分别是自顶向下和自底向上。</p>
<p>自顶向下(暴力法)比较容易想到，首先计算根节点左右子树的深度，然后比较它们的差是否小于2，然后计算根节点的左右子节点的左右子树的深度，以此类推。</p>
<p>自底向上则是在计算节点的深度时就判断其左右子树的深度大小，若大于2则直接返回，效率要比自顶向下高很多。</p>
<h2 id="代码-13"><a href="#代码-13" class="headerlink" title="代码"></a>代码</h2><p>自顶向下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isBalanced</span><span class="params">(self, root: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> abs(self.helper(root.left) - self.helper(root.right)) &lt; <span class="number">2</span> <span class="keyword">and</span> \</span><br><span class="line">            self.isBalanced(root.left) <span class="keyword">and</span> self.isBalanced(root.right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> max(self.helper(node.left), self.helper(node.right))+<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>自底向上：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isBalanced</span><span class="params">(self, root: TreeNode)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">return</span> self.helper(root) != <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left = self.helper(node.left)</span><br><span class="line">        <span class="keyword">if</span> left == <span class="number">-1</span>: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        right = self.helper(node.right)</span><br><span class="line">        <span class="keyword">if</span> right == <span class="number">-1</span>: <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">        <span class="keyword">return</span> max(left, right)+<span class="number">1</span> <span class="keyword">if</span> abs(left - right) &lt; <span class="number">2</span> <span class="keyword">else</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>
<h1 id="112-路径总和"><a href="#112-路径总和" class="headerlink" title="112. 路径总和"></a>112. 路径总和</h1><p><a href="https://leetcode-cn.com/problems/path-sum/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/path-sum/</a></p>
<h2 id="题目描述-14"><a href="#题目描述-14" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。</p>
<p>说明: 叶子节点是指没有子节点的节点。</p>
<p>示例:<br>给定如下二叉树，以及目标和 <code>sum = 22</code>，</p>
<pre><code>          5
         / \
        4   8
       /   / \
      11  13  4
     /  \      \
    7    2      1
</code></pre><p>返回 <code>true</code>, 因为存在目标和为 22 的根节点到叶子节点的路径 <code>5-&gt;4-&gt;11-&gt;2</code>。</p>
<h2 id="思路-14"><a href="#思路-14" class="headerlink" title="思路"></a>思路</h2><p>递归，前序遍历二叉树，统计路径总和，到叶子节点时判断路径总和与目标和 <code>sum</code>  是否相等。</p>
<h2 id="代码-14"><a href="#代码-14" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasPathSum</span><span class="params">(self, root: TreeNode, sum: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(node, s)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            t = node.val + s</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node.left <span class="keyword">and</span> <span class="keyword">not</span> node.right:</span><br><span class="line">                <span class="keyword">if</span> t == sum:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>: <span class="keyword">return</span> helper(node.left, t) <span class="keyword">or</span> helper(node.right, t)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> helper(root, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h1 id="120-三角形最小路径和"><a href="#120-三角形最小路径和" class="headerlink" title="120. 三角形最小路径和"></a>120. 三角形最小路径和</h1><p><a href="https://leetcode-cn.com/problems/triangle/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/triangle/</a></p>
<h2 id="题目描述-15"><a href="#题目描述-15" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个三角形，找出自顶向下的最小路径和。每一步只能移动到下一行中相邻的结点上。</p>
<p><strong>相邻的结点</strong> 在这里指的是 <code>下标</code> 与 <code>上一层结点下标</code> 相同或者等于 <code>上一层结点下标 + 1</code> 的两个结点。</p>
<p>例如，给定三角形：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">     [<span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">   [<span class="number">6</span>,<span class="number">5</span>,<span class="number">7</span>],</span><br><span class="line">  [<span class="number">4</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">3</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>自顶向下的最小路径和为 <code>11</code>（即，2 + 3 + 5 + 1 = 11）。</p>
<p>说明：</p>
<p>如果你可以只使用 O(n) 的额外空间（n 为三角形的总行数）来解决这个问题，那么你的算法会很加分。</p>
<h2 id="思路-15"><a href="#思路-15" class="headerlink" title="思路"></a>思路</h2><p>动态规划：</p>
<ul>
<li><code>dp[i][j]</code> 表示第 <code>i</code> 行第 <code>j</code> 列节点到最底层的最小路径和，自底向上计算。</li>
<li><code>dp[i][j] = triangle[i][j] + min(dp[i+1][j], dp[i+1][j+1])</code>.</li>
</ul>
<p>计算完后 <code>dp[0][0]</code> 为最终答案。</p>
<h2 id="代码-15"><a href="#代码-15" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minimumTotal</span><span class="params">(self, triangle: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        dp = triangle[:]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(triangle)<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>):</span><br><span class="line">                dp[i][j] = triangle[i][j] + min(dp[i+<span class="number">1</span>][j], dp[i+<span class="number">1</span>][j+<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<h1 id="121-买卖股票的最佳时机"><a href="#121-买卖股票的最佳时机" class="headerlink" title="121. 买卖股票的最佳时机"></a>121. 买卖股票的最佳时机</h1><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/</a></p>
<h2 id="题目描述-16"><a href="#题目描述-16" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p>
<p>如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。</p>
<p>注意：你不能在买入股票前卖出股票。</p>
<p>示例 1:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">7</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>]</span><br><span class="line">输出: <span class="number">5</span></span><br><span class="line">解释: 在第 <span class="number">2</span> 天（股票价格 = <span class="number">1</span>）的时候买入，在第 <span class="number">5</span> 天（股票价格 = <span class="number">6</span>）的时候卖出，最大利润 = <span class="number">6</span><span class="number">-1</span> = <span class="number">5</span> 。</span><br><span class="line">     注意利润不能是 <span class="number">7</span><span class="number">-1</span> = <span class="number">6</span>, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。</span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">7</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">输出: <span class="number">0</span></span><br><span class="line">解释: 在这种情况下, 没有交易完成, 所以最大利润为 <span class="number">0</span>。</span><br></pre></td></tr></table></figure>
<h2 id="思路-16"><a href="#思路-16" class="headerlink" title="思路"></a>思路</h2><p>因为有时间因素，因此不能简单地用最大值减去最小值。可以用维护两个变量<code>minp</code>和<code>maxp</code>，其中<code>minp</code>记录到当前为止的最小价格，<code>maxp</code>记录当前为止的最大差价。通过对数组的一遍扫描，每扫描到一个值就与<code>minp</code>作比较、计算当前值与<code>minp</code>的差价，若大于<code>maxp</code>则更新。</p>
<h2 id="代码-16"><a href="#代码-16" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span><span class="params">(self, prices: List[int])</span> -&gt; int:</span></span><br><span class="line">        maxp = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> len(prices) &gt; <span class="number">0</span>:</span><br><span class="line">            minp = prices[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">for</span> price <span class="keyword">in</span> prices:</span><br><span class="line">                <span class="keyword">if</span> price &lt; minp:</span><br><span class="line">                    minp = price</span><br><span class="line">                <span class="keyword">if</span> price - minp &gt; maxp:</span><br><span class="line">                    maxp = price - minp</span><br><span class="line">        <span class="keyword">return</span> maxp</span><br></pre></td></tr></table></figure>
<h1 id="152-乘积最大子数组"><a href="#152-乘积最大子数组" class="headerlink" title="152. 乘积最大子数组"></a>152. 乘积最大子数组</h1><p><a href="https://leetcode-cn.com/problems/maximum-product-subarray/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-product-subarray/</a></p>
<h2 id="题目描述-17"><a href="#题目描述-17" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个整数数组 <code>nums</code> ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</p>
<p>示例 1:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">2</span>,<span class="number">3</span>,<span class="number">-2</span>,<span class="number">4</span>]</span><br><span class="line">输出: <span class="number">6</span></span><br><span class="line">解释: 子数组 [<span class="number">2</span>,<span class="number">3</span>] 有最大乘积 <span class="number">6</span>。</span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">-2</span>,<span class="number">0</span>,<span class="number">-1</span>]</span><br><span class="line">输出: <span class="number">0</span></span><br><span class="line">解释: 结果不能为 <span class="number">2</span>, 因为 [<span class="number">-2</span>,<span class="number">-1</span>] 不是子数组。</span><br></pre></td></tr></table></figure>
<h2 id="思路-17"><a href="#思路-17" class="headerlink" title="思路"></a>思路</h2><p>可以用动态规划。因为负负得正，所以当前的数为负的话，与前一个数的最小值相乘有可能得到比最大值更大的数。因此需要维护两个变量：当前的最大值和最小值。</p>
<p>动态方程如下：</p>
<script type="math/tex; mode=display">
\begin{aligned}
maxDP[i+1] &= \max(dmax[i+1] \cdot nums[i], \  nums[i],\  dmin[i] \cdot nums[i])\\
minDP[i+1] &= \min(dmax[i+1] \cdot nums[i],\  nums[i],\  dmin[i] \cdot nums[i])\\
DP[i+1] &= \max(DP[i],\ maxDP[i+1])
\end{aligned}</script><p>当<code>nums[i]</code>为0时，<code>dmax</code>和<code>dmin</code>都为0，于是需要从<code>nums[i+1]</code>重新开始。</p>
<h2 id="代码-17"><a href="#代码-17" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProduct</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> len(nums)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> len(nums)==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        m = dmax = dmin = nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line">            tmp = dmax</span><br><span class="line">            dmax = max(max(dmax*nums[i], nums[i]), dmin*nums[i])</span><br><span class="line">            dmin = min(min(tmp*nums[i], nums[i]), dmin*nums[i])</span><br><span class="line">            m = max(dmax, m)</span><br><span class="line">        <span class="keyword">return</span> m</span><br></pre></td></tr></table></figure>
<h1 id="167-两数之和-II-输入有序数组"><a href="#167-两数之和-II-输入有序数组" class="headerlink" title="167. 两数之和 II - 输入有序数组"></a>167. 两数之和 II - 输入有序数组</h1><p><a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/</a></p>
<h2 id="题目描述-18"><a href="#题目描述-18" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。</p>
<p>函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。</p>
<p>说明:</p>
<ul>
<li>返回的下标值（index1 和 index2）不是从零开始的。</li>
<li>你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。</li>
</ul>
<p>示例:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: bers = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>], target = <span class="number">9</span></span><br><span class="line">输出: [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">解释: <span class="number">2</span> 与 <span class="number">7</span> 之和等于目标数 <span class="number">9</span> 。因此 index1 = <span class="number">1</span>, index2 = <span class="number">2</span> 。</span><br></pre></td></tr></table></figure>
<h2 id="思路-18"><a href="#思路-18" class="headerlink" title="思路"></a>思路</h2><p>遍历数组，将访问过的元素的索引存储在哈希表 <code>d</code> 中，<code>d[val]</code> 存储的是值为 <code>val</code> 的元素的索引。</p>
<ul>
<li>每访问到一个元素，计算其与目标数的差值 <code>k = target - val</code>；</li>
<li>在 <code>d</code> 中查找 <code>k</code>，若 <code>k</code> 存在则直接返回 <code>[d[k], val的index]</code>（后访问的 <code>index</code> 肯定比先访问的大）；</li>
<li>若 <code>k</code> 不存在则将 <code>val</code> 的 <code>index</code> 存储在哈希表中。</li>
</ul>
<p>时间复杂度 $O(N)$，遍历了一次数组；空间复杂度 $O(N)$，用到了一个哈希表存储数组中的元素的索引值。</p>
<h2 id="代码-18"><a href="#代码-18" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, numbers: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class="line">        n = len(numbers)</span><br><span class="line">        d = dict()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            k = target - numbers[i]</span><br><span class="line">            <span class="keyword">if</span> k <span class="keyword">in</span> d:</span><br><span class="line">                <span class="keyword">return</span> [d[k], i+<span class="number">1</span>]</span><br><span class="line">            d[numbers[i]] = i + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h1 id="169-多数元素"><a href="#169-多数元素" class="headerlink" title="169. 多数元素"></a>169. 多数元素</h1><p><a href="https://leetcode-cn.com/problems/majority-element/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/majority-element/</a></p>
<h2 id="题目描述-19"><a href="#题目描述-19" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 <code>⌊ n/2 ⌋</code> 的元素。</p>
<p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p>
<p>示例 1:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">输出: <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">输出: <span class="number">2</span></span><br></pre></td></tr></table></figure>
<h2 id="思路-19"><a href="#思路-19" class="headerlink" title="思路"></a>思路</h2><p>这里可以使用摩尔投票法：</p>
<p>候选人<code>k</code>初始化为数组第一个元素<code>nums[0]</code>，票数<code>cnt</code>初始化为1。从第二个元素<code>nums[1]</code>开始遍历，遇到与候选人相同的数则把票数加1，遇到不同的则把票数减1，如果票数减完之后为0，则更换当前数<code>nums[i]</code>为候选人并把票数重设为1。</p>
<p>因为多数元素的个数肯定比其它元素的个数之和多，因此其票数在最后肯定是<code>&gt;= 1</code>的。</p>
<h2 id="代码-19"><a href="#代码-19" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">majorityElement</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        cnt = <span class="number">1</span></span><br><span class="line">        k = nums[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] == k:</span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cnt -= <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> cnt == <span class="number">0</span>:</span><br><span class="line">                    cnt = <span class="number">1</span></span><br><span class="line">                    k = nums[i]</span><br><span class="line">        <span class="keyword">return</span> k</span><br></pre></td></tr></table></figure>
<h1 id="174-地下城游戏"><a href="#174-地下城游戏" class="headerlink" title="174. 地下城游戏"></a>174. 地下城游戏</h1><p><a href="https://leetcode-cn.com/problems/dungeon-game/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/dungeon-game/</a></p>
<h2 id="题目描述-20"><a href="#题目描述-20" class="headerlink" title="题目描述"></a>题目描述</h2><p>一些恶魔抓住了公主（<strong>P</strong>）并将她关在了地下城的右下角。地下城是由 M x N 个房间组成的二维网格。我们英勇的骑士（<strong>K</strong>）最初被安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。</p>
<p>骑士的初始健康点数为一个正整数。如果他的健康点数在某一时刻降至 0 或以下，他会立即死亡。</p>
<p>有些房间由恶魔守卫，因此骑士在进入这些房间时会失去健康点数（若房间里的值为负整数，则表示骑士将损失健康点数）；其他房间要么是空的（房间里的值为 0），要么包含增加骑士健康点数的魔法球（若房间里的值为正整数，则表示骑士将增加健康点数）。</p>
<p>为了尽快到达公主，骑士决定每次只向右或向下移动一步。</p>
<p><strong>编写一个函数来计算确保骑士能够拯救到公主所需的最低初始健康点数。</strong></p>
<p>例如，考虑到如下布局的地下城，如果骑士遵循最佳路径 <code>右 -&gt; 右 -&gt; 下 -&gt; 下</code>，则骑士的初始健康点数至少为 <strong>7</strong>。</p>
<p><img src="http://images.yingwai.top/picgo/174f1.png" alt=""></p>
<p>说明:</p>
<ul>
<li><p>骑士的健康点数没有上限。</p>
</li>
<li><p>任何房间都可能对骑士的健康点数造成威胁，也可能增加骑士的健康点数，包括骑士进入的左上角房间以及公主被监禁的右下角房间。</p>
</li>
</ul>
<h2 id="思路-20"><a href="#思路-20" class="headerlink" title="思路"></a>思路</h2><p>反向动态规划，从右下往左上遍历列表，用 <code>dp[i][j]</code> 来表示从房间 <code>(i, j)</code> 到达终点的最低初始健康点数，则可以得到</p>
<ul>
<li>此房间到终点的 <code>dp</code> 值为：此房间右边和下边的房间的 <code>dp</code> 值中较小的那一个，加上此房间需要消耗的生命值 <code>dungeon[i][j]</code> (注意初始值不能小于 <strong>1</strong>)；</li>
<li><code>dp[i][j] = max(min(dp[i+1][j], dp[i][j+1]) - dungeon[i][j], 1)</code>.</li>
</ul>
<p>对于最后一行或一列中，除终点以外的元素 <code>dp[i][j]</code> 要用到的 <code>dp[i+1][j]</code> 和 <code>dp[i][j+1]</code>，将它们赋值为无穷大；而对于终点 <code>dp[m-1][n-1]</code>，将 <code>dp[m][n-1]</code> 和 <code>dp[m-1][n]</code> 赋值为 1。</p>
<h2 id="代码-20"><a href="#代码-20" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calculateMinimumHP</span><span class="params">(self, dungeon: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        m, n = len(dungeon), len(dungeon[<span class="number">0</span>])</span><br><span class="line">        BIG = float(<span class="string">"inf"</span>)</span><br><span class="line">        dp = [[BIG] * (n + <span class="number">1</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(m + <span class="number">1</span>)]</span><br><span class="line">        dp[m<span class="number">-1</span>][n] = dp[m][n<span class="number">-1</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                dp[i][j] = max(min(dp[i+<span class="number">1</span>][j], dp[i][j+<span class="number">1</span>]) - dungeon[i][j], <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<h1 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198. 打家劫舍"></a>198. 打家劫舍</h1><p><a href="https://leetcode-cn.com/problems/house-robber/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/house-robber/</a></p>
<h2 id="题目描述-21"><a href="#题目描述-21" class="headerlink" title="题目描述"></a>题目描述</h2><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。</p>
<p>给定一个代表每个房屋存放金额的非负整数数组，计算你不触动警报装置的情况下，一夜之内能够偷窃到的最高金额。</p>
<p>示例 1:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">输出: <span class="number">4</span></span><br><span class="line">解释: 偷窃 <span class="number">1</span> 号房屋 (金额 = <span class="number">1</span>) ，然后偷窃 <span class="number">3</span> 号房屋 (金额 = <span class="number">3</span>)。</span><br><span class="line">     偷窃到的最高金额 = <span class="number">1</span> + <span class="number">3</span> = <span class="number">4</span> 。</span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">2</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">3</span>,<span class="number">1</span>]</span><br><span class="line">输出: <span class="number">12</span></span><br><span class="line">解释: 偷窃 <span class="number">1</span> 号房屋 (金额 = <span class="number">2</span>), 偷窃 <span class="number">3</span> 号房屋 (金额 = <span class="number">9</span>)，接着偷窃 <span class="number">5</span> 号房屋 (金额 = <span class="number">1</span>)。</span><br><span class="line">     偷窃到的最高金额 = <span class="number">2</span> + <span class="number">9</span> + <span class="number">1</span> = <span class="number">12</span> 。</span><br></pre></td></tr></table></figure>
<h2 id="思路-21"><a href="#思路-21" class="headerlink" title="思路"></a>思路</h2><p>动态规划，用 $\rm dp[i]$ 表示前 $\rm i$ 个房间能偷到的最大值，根据题目条件有以下动态方程：</p>
<script type="math/tex; mode=display">
\rm dp[i] = \max (dp[i-1], dp[i-2] + nums[i])</script><h2 id="代码-21"><a href="#代码-21" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rob</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> len(nums) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>]</span><br><span class="line">        dp = []</span><br><span class="line">        dp.append(nums[<span class="number">0</span>])</span><br><span class="line">        dp.append(max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, len(nums)):</span><br><span class="line">            dp.append(max(dp[i<span class="number">-1</span>], dp[i<span class="number">-2</span>] + nums[i]))</span><br><span class="line">        <span class="keyword">return</span> dp[len(nums)<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>
<h1 id="257-二叉树的所有路径"><a href="#257-二叉树的所有路径" class="headerlink" title="257. 二叉树的所有路径"></a>257. 二叉树的所有路径</h1><p><a href="https://leetcode-cn.com/problems/binary-tree-paths/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-paths/</a></p>
<h2 id="题目描述-22"><a href="#题目描述-22" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉树，返回所有从根节点到叶子节点的路径。</p>
<p>说明: 叶子节点是指没有子节点的节点。</p>
<p>示例:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入:</span><br><span class="line"></span><br><span class="line">   <span class="number">1</span></span><br><span class="line"> /   \</span><br><span class="line"><span class="number">2</span>     <span class="number">3</span></span><br><span class="line"> \</span><br><span class="line">  <span class="number">5</span></span><br><span class="line"></span><br><span class="line">输出: [<span class="string">"1-&gt;2-&gt;5"</span>, <span class="string">"1-&gt;3"</span>]</span><br><span class="line"></span><br><span class="line">解释: 所有根节点到叶子节点的路径为: <span class="number">1</span>-&gt;<span class="number">2</span>-&gt;<span class="number">5</span>, <span class="number">1</span>-&gt;<span class="number">3</span></span><br></pre></td></tr></table></figure>
<h2 id="思路-22"><a href="#思路-22" class="headerlink" title="思路"></a>思路</h2><p>递归，用一个字符串 <code>s</code> 记录当前的路径，访问到叶子节点时将其加入最终结果的列表 <code>ans</code> 中。访问到叶子节点或空节点时返回。</p>
<h2 id="代码-22"><a href="#代码-22" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">binaryTreePaths</span><span class="params">(self, root: TreeNode)</span> -&gt; List[str]:</span></span><br><span class="line">        ans = []</span><br><span class="line">        s = <span class="string">""</span></span><br><span class="line">        self.helper(root, ans, s, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, node, ans, s, depth)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        s = s + <span class="string">"-&gt;"</span> + str(node.val) <span class="keyword">if</span> depth &gt; <span class="number">1</span> <span class="keyword">else</span> s + str(node.val)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node.left <span class="keyword">and</span> <span class="keyword">not</span> node.right:</span><br><span class="line">            ans.append(s)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.helper(node.left, ans, s, depth+<span class="number">1</span>)</span><br><span class="line">        self.helper(node.right, ans, s, depth+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure>
<h1 id="287-寻找重复数"><a href="#287-寻找重复数" class="headerlink" title="287. 寻找重复数"></a>287. 寻找重复数</h1><p><a href="https://leetcode-cn.com/problems/find-the-duplicate-number/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/find-the-duplicate-number/</a></p>
<h2 id="题目描述-23"><a href="#题目描述-23" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。</p>
<p>示例 1:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">输出: <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">3</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>]</span><br><span class="line">输出: <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ol>
<li>不能更改原数组（假设数组是只读的）。</li>
<li>只能使用额外的 $O(1)$ 的空间。</li>
<li>时间复杂度小于 $O(n^2)$ 。</li>
<li>数组中只有一个重复的数字，但它可能不止重复出现一次。</li>
</ol>
<h2 id="思路-23"><a href="#思路-23" class="headerlink" title="思路"></a>思路</h2><p>由于题目限制了空间，所以打表法之类的方法就无法使用。可以用二分法：</p>
<p>对于给定题目条件的数组 <code>nums</code>，设<code>mid</code>为 1 到 n 的中位数。扫描数组，若数组中小于等于<code>mid</code>的数的数量严格大于<code>mid</code>，则可以确定重复的数就在 1 到<code>mid</code>之间，反之则在<code>mid</code>到 n 之间。</p>
<h2 id="代码-23"><a href="#代码-23" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findDuplicate</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        size = len(nums)</span><br><span class="line">        left = <span class="number">1</span></span><br><span class="line">        right = size - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            cnt = <span class="number">0</span></span><br><span class="line">            mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">for</span> num <span class="keyword">in</span> nums:</span><br><span class="line">                <span class="keyword">if</span> num &lt;= mid:</span><br><span class="line">                    cnt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> cnt &gt; mid:</span><br><span class="line">                right = mid</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> left</span><br></pre></td></tr></table></figure>
<h1 id="300-最长上升子序列"><a href="#300-最长上升子序列" class="headerlink" title="300. 最长上升子序列"></a>300. 最长上升子序列</h1><p><a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-increasing-subsequence/</a></p>
<h2 id="题目描述-24"><a href="#题目描述-24" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个无序的整数数组，找到其中最长上升子序列的长度。</p>
<p>示例:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">10</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">101</span>,<span class="number">18</span>]</span><br><span class="line">输出: <span class="number">4</span> </span><br><span class="line">解释: 最长的上升子序列是 [<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">101</span>]，它的长度是 <span class="number">4</span>。</span><br></pre></td></tr></table></figure>
<p>说明:</p>
<ul>
<li>可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。</li>
<li>你算法的时间复杂度应该为 $O(n^2)$。</li>
</ul>
<p>进阶: 你能将算法的时间复杂度降低到 $O(n \log{n})$ 吗?</p>
<h2 id="思路-24"><a href="#思路-24" class="headerlink" title="思路"></a>思路</h2><p>$O(n \log{n})$ 还没想到，这里介绍 $O(n^2)$ 的动态规划方法：</p>
<p>用 $\rm dp[i]$ 表示以第 $\rm i$ 个元素结尾的最长上升子序列的长度，则可以得到以下的状态转移方程：</p>
<script type="math/tex; mode=display">
\rm dp[i] = \max(dp[i], dp[j] + 1),\ nums[j] < nums[i],\  j < i.</script><p>扫描完整个数组后，$\rm dp$ 数组中的最大值即为结果。</p>
<h2 id="代码-24"><a href="#代码-24" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lengthOfLIS</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> len(nums) &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        dp = []     <span class="comment"># 存以第i个元素结尾的最长上升子序列的长度</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            dp.append(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i):</span><br><span class="line">                <span class="keyword">if</span> nums[j] &lt; nums[i]:</span><br><span class="line">                    dp[i] = max(dp[i], dp[j]+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> max(dp)</span><br></pre></td></tr></table></figure>
<h1 id="309-最佳买卖股票时机含冷冻期"><a href="#309-最佳买卖股票时机含冷冻期" class="headerlink" title="309. 最佳买卖股票时机含冷冻期"></a>309. 最佳买卖股票时机含冷冻期</h1><p><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/</a></p>
<h2 id="题目描述-25"><a href="#题目描述-25" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。</p>
<p>设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:</p>
<ul>
<li>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</li>
<li>卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。</li>
</ul>
<p>示例:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span>]</span><br><span class="line">输出: <span class="number">3</span> </span><br><span class="line">解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]</span><br></pre></td></tr></table></figure>
<h2 id="思路-25"><a href="#思路-25" class="headerlink" title="思路"></a>思路</h2><p>动态规划，用两个数组来存储状态：</p>
<ol>
<li><code>hold[i]</code> 表示在第 <code>i</code> 天结束时持有股票、此时的最大收益，有两种情况：<ul>
<li>昨天持有股票，今天休息；</li>
<li>前天卖出，今天买入；</li>
<li><code>hold[i] = max(hold[i-1], unhold[i-2] - prices[i])</code>。</li>
</ul>
</li>
<li><code>unhold[i]</code> 表示在第 <code>i</code> 天结束时未持有股票、此时的最大收益，也有两种情况：<ul>
<li>昨天也没持有股票，今天休息；</li>
<li>昨天持有，今天卖出；</li>
<li><code>unhold[i] = max(unhold[i-1], hold[i-1] + prices[i])</code>。</li>
</ul>
</li>
</ol>
<p>最终结果是 <code>unhold[n-1]</code>。</p>
<p>初始情况：</p>
<ul>
<li>第 <code>0</code> 天持有股票即在当天买入股票，<code>hold[0] = -prices[0]</code>；</li>
<li>第 <code>1</code> 天持有股票有前一天买入或是当天买入两种情况，<code>hold[1] = max(-prices[0], -prices[1])</code>；</li>
<li>第 <code>0</code> 天未持有股票即当天休息，<code>unhold[0] = 0</code>。</li>
</ul>
<h2 id="代码-25"><a href="#代码-25" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span><span class="params">(self, prices: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> len(prices) &lt; <span class="number">2</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        hold, unhold = [], []</span><br><span class="line">        hold.append(-prices[<span class="number">0</span>])</span><br><span class="line">        unhold.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(prices)):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">1</span>:</span><br><span class="line">                hold.append(max(-prices[<span class="number">0</span>], -prices[<span class="number">1</span>]))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                hold.append(max(hold[i<span class="number">-1</span>], unhold[i<span class="number">-2</span>] - prices[i]))</span><br><span class="line">            unhold.append(max(unhold[i<span class="number">-1</span>], hold[i<span class="number">-1</span>] + prices[i]))        </span><br><span class="line">        <span class="keyword">return</span> unhold[len(prices) - <span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<h1 id="312-戳气球"><a href="#312-戳气球" class="headerlink" title="312. 戳气球"></a>312. 戳气球</h1><p><a href="https://leetcode-cn.com/problems/burst-balloons/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/burst-balloons/</a></p>
<h2 id="题目描述-26"><a href="#题目描述-26" class="headerlink" title="题目描述"></a>题目描述</h2><p>有 <code>n</code> 个气球，编号为 <code>0</code> 到 <code>n-1</code>，每个气球上都标有一个数字，这些数字存在数组 <code>nums</code> 中。</p>
<p>现在要求你戳破所有的气球。如果你戳破气球 <code>i</code> ，就可以获得 <code>nums[left] * nums[i] * nums[right]</code> 个硬币。 这里的 <code>left</code> 和 <code>right</code> 代表和 <code>i</code> 相邻的两个气球的序号。注意当你戳破了气球 <code>i</code> 后，气球 <code>left</code> 和气球 <code>right</code> 就变成了相邻的气球。</p>
<p>求所能获得硬币的最大数量。</p>
<p>说明:</p>
<ul>
<li>你可以假设 <code>nums[-1] = nums[n] = 1</code>，但注意它们不是真实存在的所以并不能被戳破。</li>
<li>0 ≤ <code>n</code> ≤ 500, 0 ≤ <code>nums[i]</code> ≤ 100</li>
</ul>
<p>示例:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>]</span><br><span class="line">输出: <span class="number">167</span> </span><br><span class="line">解释: nums = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>] --&gt; [<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>] --&gt;   [<span class="number">3</span>,<span class="number">8</span>]   --&gt;  [<span class="number">8</span>]  --&gt; []</span><br><span class="line">     coins =  <span class="number">3</span>*<span class="number">1</span>*<span class="number">5</span>      +  <span class="number">3</span>*<span class="number">5</span>*<span class="number">8</span>    +  <span class="number">1</span>*<span class="number">3</span>*<span class="number">8</span>      + <span class="number">1</span>*<span class="number">8</span>*<span class="number">1</span>   = <span class="number">167</span></span><br></pre></td></tr></table></figure>
<h2 id="思路-26"><a href="#思路-26" class="headerlink" title="思路"></a>思路</h2><p>动态规划，用 <code>dp[i][j]</code> 表示戳破气球 <code>i</code> 和气球 <code>j</code> 之间所有气球所能获得硬币的最大数量：</p>
<ul>
<li>当气球 <code>i</code> 和 <code>j</code> 相邻时，<code>dp[i][j]</code> 为0；</li>
<li>令 <code>k</code> 为气球 <code>i</code> 和气球 <code>j</code> 之间最后戳破的气球序号，对于每个 <code>i</code> 和 <code>j</code>（<code>i</code> 小于 <code>j</code>），遍历所有的 <code>k</code>，取其中的最大值赋值给 <code>dp[i][j]</code>，可得以下状态转移方程：</li>
<li><code>dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] + nums[i]*nums[k]*nums[j])</code>.</li>
</ul>
<p>注意要令 <code>nums</code> 的两个边界赋值为1。</p>
<p>时间复杂度为 $O(N^3)$。</p>
<h2 id="代码-26"><a href="#代码-26" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxCoins</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></span><br><span class="line">        points = [<span class="number">1</span>] + nums + [<span class="number">1</span>]</span><br><span class="line">        n = len(nums)</span><br><span class="line">        dp = [[<span class="number">0</span>] * (n+<span class="number">2</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> range(n+<span class="number">2</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, n+<span class="number">2</span>):</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> range(i+<span class="number">1</span>, j):</span><br><span class="line">                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] + points[k]*points[i]*points[j])</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>
<h1 id="315-计算右侧小于当前元素的个数"><a href="#315-计算右侧小于当前元素的个数" class="headerlink" title="315. 计算右侧小于当前元素的个数"></a>315. 计算右侧小于当前元素的个数</h1><p><a href="https://leetcode-cn.com/problems/count-of-smaller-numbers-after-self/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/count-of-smaller-numbers-after-self/</a></p>
<h2 id="题目描述-27"><a href="#题目描述-27" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个整数数组 nums，按要求返回一个新数组 counts。数组 counts 有该性质： <code>counts[i]</code> 的值是  <code>nums[i]</code> 右侧小于 <code>nums[i]</code> 的元素的数量。</p>
<p>示例:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: [<span class="number">5</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">1</span>]</span><br><span class="line">输出: [<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>] </span><br><span class="line">解释:</span><br><span class="line"><span class="number">5</span> 的右侧有 <span class="number">2</span> 个更小的元素 (<span class="number">2</span> 和 <span class="number">1</span>).</span><br><span class="line"><span class="number">2</span> 的右侧仅有 <span class="number">1</span> 个更小的元素 (<span class="number">1</span>).</span><br><span class="line"><span class="number">6</span> 的右侧有 <span class="number">1</span> 个更小的元素 (<span class="number">1</span>).</span><br><span class="line"><span class="number">1</span> 的右侧有 <span class="number">0</span> 个更小的元素.</span><br></pre></td></tr></table></figure>
<h2 id="思路-27"><a href="#思路-27" class="headerlink" title="思路"></a>思路</h2><p>二分查找，从后向前遍历 <code>nums</code>，使用一个辅助数组 <code>sorted_nums</code> 保存 <code>nums[i]</code> 右侧的元素的升序排列，<code>counts[i]</code> 的值即为 <code>nums[i]</code> 插入 <code>sorted_nums</code> 后的索引：</p>
<ol>
<li>在 <code>sorted_nums</code> 中查找第一个小于等于 <code>nums[i]</code> 的元素的索引，此索引即为<code>nums</code> 中 <code>nums[i]</code> 右侧小于该元素的元素数量；</li>
<li>将其添加到 <code>ans</code> 数组中；</li>
<li>将 <code>nums[i]</code> 插入到 <code>sorted_nums</code> 中的对应位置，继续遍历，直到遍历完整个数组。</li>
</ol>
<p>最后 <code>ans</code> 的倒序即为答案。</p>
<h2 id="代码-27"><a href="#代码-27" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countSmaller</span><span class="params">(self, nums: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        sorted_nums, ans = [], []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(len(nums))): </span><br><span class="line">            t = self.findIndex(nums[i], sorted_nums)</span><br><span class="line">            sorted_nums.insert(t, nums[i])</span><br><span class="line">            ans.append(t)</span><br><span class="line">        <span class="keyword">return</span> ans[::<span class="number">-1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findIndex</span><span class="params">(self, n, sorted_nums)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(sorted_nums) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left, right = <span class="number">0</span>, len(sorted_nums)<span class="number">-1</span></span><br><span class="line">        mid = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            mid = left + right &gt;&gt; <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> n &gt; sorted_nums[mid]:</span><br><span class="line">                left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right = mid</span><br><span class="line">        <span class="keyword">if</span> n &gt; sorted_nums[left]:</span><br><span class="line">            left += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> left</span><br></pre></td></tr></table></figure>
<h1 id="322-零钱兑换"><a href="#322-零钱兑换" class="headerlink" title="322. 零钱兑换"></a>322. 零钱兑换</h1><p><a href="https://leetcode-cn.com/problems/coin-change/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/coin-change/</a></p>
<h2 id="题目描述-28"><a href="#题目描述-28" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 <code>-1</code>。</p>
<p>示例 1:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: coins = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>], amount = <span class="number">11</span></span><br><span class="line">输出: <span class="number">3</span> </span><br><span class="line">解释: <span class="number">11</span> = <span class="number">5</span> + <span class="number">5</span> + <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: coins = [<span class="number">2</span>], amount = <span class="number">3</span></span><br><span class="line">输出: <span class="number">-1</span></span><br></pre></td></tr></table></figure>
<p>说明:<br>你可以认为每种硬币的数量是无限的。</p>
<h2 id="思路-28"><a href="#思路-28" class="headerlink" title="思路"></a>思路</h2><p>首先想到了贪心，但会复杂一点，迟点再研究一下，这里用了动态规划。根据题意，要求 <code>amount</code> 的最少硬币数，可以先对 <code>coins</code> 中的每一个面额 <code>coin</code> 进行遍历，求子问题 $dp(amount-coin)$ 的最小值。</p>
<p>可以列出状态转移方程</p>
<script type="math/tex; mode=display">
dp(n) = \left\{ \begin{array}{lcl}
 -1, & n < 0\\
 0, & n = 0\\
 \min\{dp(n-coin)+1|coin \in coins\}, & n > 0
\end{array}\right.</script><h2 id="代码-28"><a href="#代码-28" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">coinChange</span><span class="params">(self, coins: List[int], amount: int)</span> -&gt; int:</span></span><br><span class="line">        memo = dict()</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dp</span><span class="params">(n)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> n <span class="keyword">in</span> memo:</span><br><span class="line">                <span class="keyword">return</span> memo[n]</span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">            ans = float(<span class="string">"inf"</span>)</span><br><span class="line">            <span class="keyword">for</span> coin <span class="keyword">in</span> coins:</span><br><span class="line">                subproblem = dp(n - coin)</span><br><span class="line">                <span class="keyword">if</span> subproblem == <span class="number">-1</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                ans = min(ans, subproblem + <span class="number">1</span>)</span><br><span class="line">            memo[n] = ans <span class="keyword">if</span> ans!=float(inf) <span class="keyword">else</span> <span class="number">-1</span></span><br><span class="line">            <span class="keyword">return</span> memo[n]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dp(amount)</span><br></pre></td></tr></table></figure>
<h1 id="350-两个数组的交集-II"><a href="#350-两个数组的交集-II" class="headerlink" title="350. 两个数组的交集 II"></a>350. 两个数组的交集 II</h1><p><a href="https://leetcode-cn.com/problems/intersection-of-two-arrays-ii/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/intersection-of-two-arrays-ii/</a></p>
<h2 id="题目描述-29"><a href="#题目描述-29" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定两个数组，编写一个函数来计算它们的交集。</p>
<p>示例 1:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: nums1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>], nums2 = [<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">输出: [<span class="number">2</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: nums1 = [<span class="number">4</span>,<span class="number">9</span>,<span class="number">5</span>], nums2 = [<span class="number">9</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">4</span>]</span><br><span class="line">输出: [<span class="number">4</span>,<span class="number">9</span>]</span><br></pre></td></tr></table></figure>
<p>说明：</p>
<ul>
<li>输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。</li>
<li>我们可以不考虑输出结果的顺序。</li>
</ul>
<p>进阶:</p>
<ul>
<li>如果给定的数组已经排好序呢？你将如何优化你的算法？</li>
<li>如果 nums1 的大小比 nums2 小很多，哪种方法更优？</li>
<li>如果 nums2 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？</li>
</ul>
<h2 id="思路-29"><a href="#思路-29" class="headerlink" title="思路"></a>思路</h2><p>两种方法：</p>
<ul>
<li>遍历 <code>nums1</code>，用一个字典存储 <code>d</code> 其中元素的个数，然后遍历 <code>nums2</code> 若扫描到的元素 <code>nums2[i]</code> 在字典中存在且 <code>d[nums2[i]] &gt; 0</code>，则将该元素加入 <code>ans</code> 并将 <code>d[nums2[i]]</code> 自减 1。</li>
<li>先对两个数组进行排序，然后用两个指针 <code>i, j</code> 分别指向排序完的数组的头元素。从头元素开始扫描，当 <code>nums1[i] &gt; nums2[j]</code> 时 <code>j</code> 往后移，反之 <code>i</code> 往后移，两个元素相等时将其加入 <code>ans</code>，当遍历完其中一个数组后结束循环。</li>
</ul>
<h2 id="代码-29"><a href="#代码-29" class="headerlink" title="代码"></a>代码</h2><p>哈希表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intersect</span><span class="params">(self, nums1: List[int], nums2: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        d = dict()</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums1:</span><br><span class="line">            <span class="keyword">if</span> num <span class="keyword">in</span> d:</span><br><span class="line">                d[num] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                d[num] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums2:</span><br><span class="line">            <span class="keyword">if</span> num <span class="keyword">in</span> d <span class="keyword">and</span> d[num] &gt; <span class="number">0</span>:</span><br><span class="line">                ans.append(num)</span><br><span class="line">                d[num] -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<p>排序方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intersect</span><span class="params">(self, nums1: List[int], nums2: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        nums1.sort()</span><br><span class="line">        nums2.sort()</span><br><span class="line">        i = j = <span class="number">0</span></span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">while</span> i &lt; len(nums1) <span class="keyword">and</span> j &lt; len(nums2):</span><br><span class="line">            <span class="keyword">if</span> nums1[i] == nums2[j]:</span><br><span class="line">                ans.append(nums1[i])</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> nums1[i] &gt; nums2[j]:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<h1 id="394-字符串解码"><a href="#394-字符串解码" class="headerlink" title="394. 字符串解码"></a>394. 字符串解码</h1><p><a href="https://leetcode-cn.com/problems/decode-string/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/decode-string/</a></p>
<h2 id="题目描述-30"><a href="#题目描述-30" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个经过编码的字符串，返回它解码后的字符串。</p>
<p>编码规则为: <code>k[encoded_string]</code>，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。</p>
<p>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。</p>
<p>此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 <code>3a</code> 或 <code>2[4]</code> 的输入。</p>
<p>示例:</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">s</span> = <span class="string">"3[a]2[bc]"</span>, 返回 <span class="string">"aaabcbc"</span>.</span><br><span class="line"><span class="attribute">s</span> = <span class="string">"3[a2[c]]"</span>, 返回 <span class="string">"accaccacc"</span>.</span><br><span class="line"><span class="attribute">s</span> = <span class="string">"2[abc]3[cd]ef"</span>, 返回 <span class="string">"abcabccdcdcdef"</span>.</span><br></pre></td></tr></table></figure>
<h2 id="思路-30"><a href="#思路-30" class="headerlink" title="思路"></a>思路</h2><p>这里可以使用栈，对字符串按顺序扫描：</p>
<ol>
<li>将右括号以外的字符全部入栈，直到扫描到右括号；</li>
<li>扫描到右括号则开始退栈，保存在一个字符串<code>ss</code>中，直到遇到左括号；</li>
<li>根据题目的条件，在左括号前面的一定是数字，此时就可以统计当前字符串出现的次数<code>t</code>，把<code>ss</code>复制<code>t</code>次重新入栈；</li>
<li>最后把栈中所有元素拼接在一起即可。</li>
</ol>
<h2 id="代码-30"><a href="#代码-30" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decodeString</span><span class="params">(self, s: str)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">if</span> len(s) &lt;= <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        ans = <span class="string">""</span></span><br><span class="line">        tmps = []   <span class="comment"># 栈</span></span><br><span class="line">        i = <span class="number">1</span></span><br><span class="line">        tmps.append(s[<span class="number">0</span>])</span><br><span class="line">        ss, t = <span class="string">""</span>, <span class="string">""</span>	<span class="comment"># 分别存当前字符串和当前的次数</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(s):</span><br><span class="line">            w = s[i]</span><br><span class="line">            <span class="keyword">if</span> w == <span class="string">']'</span>:	<span class="comment"># 扫描到右括号则开始退栈，直到遇到左括号</span></span><br><span class="line">                <span class="keyword">while</span> tmps[<span class="number">-1</span>] != <span class="string">'['</span>:</span><br><span class="line">                    ss = tmps.pop() + ss</span><br><span class="line">                tmps.pop()      <span class="comment"># 将左括号退栈</span></span><br><span class="line">                <span class="keyword">while</span> len(tmps) &gt; <span class="number">0</span> <span class="keyword">and</span> tmps[<span class="number">-1</span>].isdigit():		<span class="comment"># 统计次数</span></span><br><span class="line">                    t = tmps.pop() + t</span><br><span class="line">                tmps.append(ss*int(t))</span><br><span class="line">                ss, t = <span class="string">""</span>, <span class="string">""</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tmps.append(w)</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> tmp <span class="keyword">in</span> tmps:</span><br><span class="line">            ans = ans + tmp</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<h1 id="409-最长回文串"><a href="#409-最长回文串" class="headerlink" title="409. 最长回文串"></a>409. 最长回文串</h1><p><a href="https://leetcode-cn.com/problems/longest-palindrome/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-palindrome/</a></p>
<h2 id="题目描述-31"><a href="#题目描述-31" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。</p>
<p>在构造过程中，请注意区分大小写。比如 <code>&quot;Aa&quot;</code> 不能当做一个回文字符串。</p>
<p>注意:<br>假设字符串的长度不会超过 1010。</p>
<p>示例 1:</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="section">输入:</span></span><br><span class="line"><span class="string">"abccccdd"</span></span><br><span class="line"></span><br><span class="line"><span class="section">输出:</span></span><br><span class="line">7</span><br><span class="line"></span><br><span class="line"><span class="section">解释:</span></span><br><span class="line">我们可以构造的最长的回文串是<span class="string">"dccaccd"</span>, 它的长度是 7。</span><br></pre></td></tr></table></figure>
<h2 id="思路-31"><a href="#思路-31" class="headerlink" title="思路"></a>思路</h2><p>由题意可知回文串中奇数的字母只能出现在中间，即只能选取一个来构造回文串。因此可以先统计每个字母在字符串中出现的个数存在字典中，然后遍历字典，将数量为偶数的直接累加；数量为奇数的则判断前面是否已出现了奇数，若不是则直接累加，若是则只选取偶数数量的当前字母，即把当前数量 $-1$ 再累加。</p>
<h2 id="代码-31"><a href="#代码-31" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        d = dict()</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        flag = <span class="number">0</span>    <span class="comment"># 判断前面有无加奇数</span></span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> w <span class="keyword">in</span> d:</span><br><span class="line">                d[w] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                d[w] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> value <span class="keyword">in</span> d.values():</span><br><span class="line">            <span class="keyword">if</span> value%<span class="number">2</span>==<span class="number">0</span>:</span><br><span class="line">                ans += value</span><br><span class="line">            <span class="keyword">elif</span> flag:</span><br><span class="line">                ans += value - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ans += value</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<h1 id="563-二叉树的坡度"><a href="#563-二叉树的坡度" class="headerlink" title="563. 二叉树的坡度"></a>563. 二叉树的坡度</h1><p><a href="https://leetcode-cn.com/problems/binary-tree-tilt/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binary-tree-tilt/</a></p>
<h2 id="题目描述-32"><a href="#题目描述-32" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉树，计算整个树的坡度。</p>
<p>一个树的节点的坡度定义即为，该节点左子树的结点之和和右子树结点之和的差的绝对值。空结点的的坡度是0。</p>
<p>整个树的坡度就是其所有节点的坡度之和。</p>
<p>示例：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">         <span class="number">1</span></span><br><span class="line">       /   \</span><br><span class="line">      <span class="number">2</span>     <span class="number">3</span></span><br><span class="line">输出：<span class="number">1</span></span><br><span class="line">解释：</span><br><span class="line">结点 <span class="number">2</span> 的坡度: <span class="number">0</span></span><br><span class="line">结点 <span class="number">3</span> 的坡度: <span class="number">0</span></span><br><span class="line">结点 <span class="number">1</span> 的坡度: |<span class="number">2</span><span class="number">-3</span>| = <span class="number">1</span></span><br><span class="line">树的坡度 : <span class="number">0</span> + <span class="number">0</span> + <span class="number">1</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>提示：</p>
<p>任何子树的结点的和不会超过 32 位整数的范围。<br>坡度的值不会超过 32 位整数的范围。</p>
<h2 id="思路-32"><a href="#思路-32" class="headerlink" title="思路"></a>思路</h2><p>递归，后序遍历二叉树，用一个变量 <code>tilt</code> 存储累计坡度，访问节点时更新 <code>tilt = tilt + |(左子树节点之和 - 右子树节点之和)|</code>，然后返回以当前节点为根节点的二叉树节点之和。</p>
<p>递归边界为访问到空节点，返回 0。</p>
<h2 id="代码-32"><a href="#代码-32" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findTilt</span><span class="params">(self, root: TreeNode)</span> -&gt; int:</span></span><br><span class="line">        tilt = [<span class="number">0</span>]</span><br><span class="line">        self.recur(root, tilt)</span><br><span class="line">        <span class="keyword">return</span> tilt[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">recur</span><span class="params">(self, node, tilt)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left = self.recur(node.left, tilt)</span><br><span class="line">        right = self.recur(node.right, tilt)</span><br><span class="line">        tilt[<span class="number">0</span>] += abs(left - right)</span><br><span class="line">        <span class="keyword">return</span> left + right + node.val</span><br></pre></td></tr></table></figure>
<h1 id="623-在二叉树中增加一行"><a href="#623-在二叉树中增加一行" class="headerlink" title="623. 在二叉树中增加一行"></a>623. 在二叉树中增加一行</h1><p><a href="https://leetcode-cn.com/problems/add-one-row-to-tree/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/add-one-row-to-tree/</a></p>
<h2 id="题目描述-33"><a href="#题目描述-33" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个二叉树，根节点为第1层，深度为 1。在其第 <code>d</code> 层追加一行值为 <code>v</code> 的节点。</p>
<p>添加规则：给定一个深度值 <code>d</code> （正整数），针对深度为 <code>d-1</code> 层的每一非空节点 <code>N</code>，为 <code>N</code> 创建两个值为 <code>v</code> 的左子树和右子树。</p>
<p>将 <code>N</code> 原先的左子树，连接为新节点 <code>v</code> 的左子树；将 <code>N</code> 原先的右子树，连接为新节点 <code>v</code> 的右子树。</p>
<p>如果 <code>d</code> 的值为 1，深度 d - 1 不存在，则创建一个新的根节点 <code>v</code>，原先的整棵树将作为 <code>v</code> 的左子树。</p>
<p>示例 1:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line">二叉树如下所示:</span><br><span class="line">       <span class="number">4</span></span><br><span class="line">     /   \</span><br><span class="line">    <span class="number">2</span>     <span class="number">6</span></span><br><span class="line">   / \   / </span><br><span class="line">  <span class="number">3</span>   <span class="number">1</span> <span class="number">5</span>   </span><br><span class="line"></span><br><span class="line">v = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">d = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">输出: </span><br><span class="line">       <span class="number">4</span></span><br><span class="line">      / \</span><br><span class="line">     <span class="number">1</span>   <span class="number">1</span></span><br><span class="line">    /     \</span><br><span class="line">   <span class="number">2</span>       <span class="number">6</span></span><br><span class="line">  / \     / </span><br><span class="line"> <span class="number">3</span>   <span class="number">1</span>   <span class="number">5</span></span><br></pre></td></tr></table></figure>
<p>示例 2:</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入: </span><br><span class="line">二叉树如下所示:</span><br><span class="line">      <span class="number">4</span></span><br><span class="line">     /   </span><br><span class="line">    <span class="number">2</span>    </span><br><span class="line">   / \   </span><br><span class="line">  <span class="number">3</span>   <span class="number">1</span>    </span><br><span class="line"></span><br><span class="line">v = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">d = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">输出: </span><br><span class="line">      <span class="number">4</span></span><br><span class="line">     /   </span><br><span class="line">    <span class="number">2</span></span><br><span class="line">   / \    </span><br><span class="line">  <span class="number">1</span>   <span class="number">1</span></span><br><span class="line"> /     \  </span><br><span class="line"><span class="number">3</span>       <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>注意:</p>
<p>输入的深度值 d 的范围是：[1，二叉树最大深度 + 1]。<br>输入的二叉树至少有一个节点。</p>
<h2 id="思路-33"><a href="#思路-33" class="headerlink" title="思路"></a>思路</h2><p>深度优先搜索(递归)，在访问到深度为 <code>d-1</code> 的节点则在它们下面增加子节点然后返回。</p>
<p>注意 <code>d = 1</code> 的特殊情况和访问到空节点的情况。</p>
<h2 id="代码-33"><a href="#代码-33" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addOneRow</span><span class="params">(self, root: TreeNode, v: int, d: int)</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="keyword">if</span> d == <span class="number">1</span>:</span><br><span class="line">            newnode = TreeNode(v)</span><br><span class="line">            newnode.left = root</span><br><span class="line">            root = newnode</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.helper(root, d, v, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> root</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, node, d, v, depth)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node: <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> depth == d - <span class="number">1</span>:</span><br><span class="line">            lnode, rnode = node.left, node.right</span><br><span class="line">            n1, n2 = TreeNode(v), TreeNode(v)</span><br><span class="line">            n1.left, n2.right = lnode, rnode</span><br><span class="line">            node.left, node.right = n1, n2</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.helper(node.left, d, v, depth + <span class="number">1</span>)</span><br><span class="line">        self.helper(node.right, d, v, depth + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure>
<h1 id="637-二叉树的层平均值"><a href="#637-二叉树的层平均值" class="headerlink" title="637. 二叉树的层平均值"></a>637. 二叉树的层平均值</h1><p><a href="https://leetcode-cn.com/problems/average-of-levels-in-binary-tree/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/average-of-levels-in-binary-tree/</a></p>
<h2 id="题目描述-34"><a href="#题目描述-34" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个非空二叉树, 返回一个由每层节点平均值组成的数组。</p>
<p>示例 1：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">    <span class="number">3</span></span><br><span class="line">   / \</span><br><span class="line">  <span class="number">9</span>  <span class="number">20</span></span><br><span class="line">    /  \</span><br><span class="line">   <span class="number">15</span>   <span class="number">7</span></span><br><span class="line">输出：[<span class="number">3</span>, <span class="number">14.5</span>, <span class="number">11</span>]</span><br><span class="line">解释：</span><br><span class="line">第 <span class="number">0</span> 层的平均值是 <span class="number">3</span> ,  第<span class="number">1</span>层是 <span class="number">14.5</span> , 第<span class="number">2</span>层是 <span class="number">11</span> 。因此返回 [<span class="number">3</span>, <span class="number">14.5</span>, <span class="number">11</span>] 。</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<p>节点值的范围在32位有符号整数范围内。</p>
<h2 id="思路-34"><a href="#思路-34" class="headerlink" title="思路"></a>思路</h2><p>BFS，套模板，逐层计算均值即可。</p>
<h2 id="代码-34"><a href="#代码-34" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averageOfLevels</span><span class="params">(self, root: TreeNode)</span> -&gt; List[float]:</span></span><br><span class="line">        queue = collections.deque()</span><br><span class="line">        queue.append(root)</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">if</span> root:</span><br><span class="line">            <span class="keyword">while</span> queue:</span><br><span class="line">                size = len(queue)</span><br><span class="line">                s = <span class="number">0</span></span><br><span class="line">                <span class="keyword">for</span> _ <span class="keyword">in</span> range(size):</span><br><span class="line">                    node = queue.popleft()</span><br><span class="line">                    s += node.val</span><br><span class="line">                    <span class="keyword">if</span> node.left:</span><br><span class="line">                        queue.append(node.left)</span><br><span class="line">                    <span class="keyword">if</span> node.right:</span><br><span class="line">                        queue.append(node.right)</span><br><span class="line">                <span class="keyword">if</span> size:</span><br><span class="line">                    ans.append(s/size)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<h1 id="785-判断二分图"><a href="#785-判断二分图" class="headerlink" title="785. 判断二分图"></a>785. 判断二分图</h1><p><a href="https://leetcode-cn.com/problems/is-graph-bipartite/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/is-graph-bipartite/</a></p>
<h2 id="题目描述-35"><a href="#题目描述-35" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个无向图 <code>graph</code>，当这个图为二分图时返回 <code>true</code>。</p>
<p>如果我们能将一个图的节点集合分割成两个独立的子集A和B，并使图中的每一条边的两个节点一个来自A集合，一个来自B集合，我们就将这个图称为二分图。</p>
<p>graph将会以邻接表方式给出，<code>graph[i]</code> 表示图中与节点 <code>i</code> 相连的所有节点。每个节点都是一个在 <code>0</code> 到 <code>graph.length-1</code> 之间的整数。这图中没有自环和平行边： <code>graph[i]</code> 中不存在 <code>i</code>，并且 <code>graph[i]</code> 中没有重复的值。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>:</span><br><span class="line">输入: [[<span class="number">1</span>,<span class="number">3</span>], [<span class="number">0</span>,<span class="number">2</span>], [<span class="number">1</span>,<span class="number">3</span>], [<span class="number">0</span>,<span class="number">2</span>]]</span><br><span class="line">输出: <span class="literal">true</span></span><br><span class="line">解释: </span><br><span class="line">无向图如下:</span><br><span class="line"><span class="number">0</span>---<span class="number">-1</span></span><br><span class="line">|    |</span><br><span class="line">|    |</span><br><span class="line"><span class="number">3</span>---<span class="number">-2</span></span><br><span class="line">我们可以将节点分成两组: &#123;<span class="number">0</span>, <span class="number">2</span>&#125; 和 &#123;<span class="number">1</span>, <span class="number">3</span>&#125;。</span><br></pre></td></tr></table></figure>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">2</span>:</span><br><span class="line">输入: [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], [<span class="number">0</span>,<span class="number">2</span>], [<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>], [<span class="number">0</span>,<span class="number">2</span>]]</span><br><span class="line">输出: <span class="literal">false</span></span><br><span class="line">解释: </span><br><span class="line">无向图如下:</span><br><span class="line"><span class="number">0</span>---<span class="number">-1</span></span><br><span class="line">| \  |</span><br><span class="line">|  \ |</span><br><span class="line"><span class="number">3</span>---<span class="number">-2</span></span><br><span class="line">我们不能将节点分割成两个独立的子集。</span><br></pre></td></tr></table></figure>
<p>注意:</p>
<ul>
<li><code>graph</code> 的长度范围为 <code>[1, 100]</code>。</li>
<li><code>graph[i]</code> 中的元素的范围为 <code>[0, graph.length - 1]</code>。</li>
<li><code>graph[i]</code> 不会包含 <code>i</code> 或者有重复的值。</li>
<li>图是无向的: 如果 <code>j</code> 在 <code>graph[i]</code> 里边, 那么 <code>i</code> 也会在 <code>graph[j]</code> 里边。</li>
</ul>
<h2 id="思路-35"><a href="#思路-35" class="headerlink" title="思路"></a>思路</h2><p>BFS，遍历所有节点，用 <code>visited</code> 数组标记节点是否已经被访问（初始值为 <code>0</code>）：</p>
<ul>
<li>对当前未访问的节点 <code>i</code>，<ol>
<li>将 <code>visited[i]</code> 标记为 <code>1</code>；</li>
<li>把 <code>i</code> 的相邻节点 <code>j</code> 标记为 <code>-1</code>，然后继续对 <code>j</code> 的相邻节点标记为 <code>-visited[j]</code>，直到所有连接在一起的节点都被访问；</li>
<li>如果上一步在标记时，<code>i</code> 的某个相邻节点 <code>j</code> 的标记值 <code>visited[j] = visited[i]</code>，则说明无法将图中节点分割，返回 <code>false</code>。</li>
</ol>
</li>
</ul>
<h2 id="代码-35"><a href="#代码-35" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isBipartite</span><span class="params">(self, graph: List[List[int]])</span> -&gt; bool:</span></span><br><span class="line">        visited = [<span class="number">0</span>] * len(graph)</span><br><span class="line">        queue = collections.deque()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(graph)):</span><br><span class="line">            <span class="keyword">if</span> visited[i] != <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span>              </span><br><span class="line">            visited[i] = <span class="number">1</span></span><br><span class="line">            queue.append(i)</span><br><span class="line">            <span class="keyword">while</span> queue:</span><br><span class="line">                cur = queue.popleft()</span><br><span class="line">                <span class="keyword">for</span> node <span class="keyword">in</span> graph[cur]:</span><br><span class="line">                    <span class="keyword">if</span> visited[node] == <span class="number">0</span>:</span><br><span class="line">                        visited[node] = -visited[cur]</span><br><span class="line">                        queue.append(node)</span><br><span class="line">                    <span class="keyword">elif</span> visited[node] == visited[cur]:</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h1 id="974-和可被-K-整除的子数组"><a href="#974-和可被-K-整除的子数组" class="headerlink" title="974. 和可被 K 整除的子数组"></a>974. 和可被 K 整除的子数组</h1><p><a href="https://leetcode-cn.com/problems/subarray-sums-divisible-by-k/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/subarray-sums-divisible-by-k/</a></p>
<h2 id="题目描述-36"><a href="#题目描述-36" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个整数数组 A，返回其中元素之和可被 K 整除的（连续、非空）子数组的数目。</p>
<p>示例：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：A = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">0</span>,<span class="number">-2</span>,<span class="number">-3</span>,<span class="number">1</span>], K = <span class="number">5</span></span><br><span class="line">输出：<span class="number">7</span></span><br><span class="line">解释：</span><br><span class="line">有 <span class="number">7</span> 个子数组满足其元素之和可被 K = <span class="number">5</span> 整除：</span><br><span class="line">[<span class="number">4</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">-2</span>, <span class="number">-3</span>, <span class="number">1</span>], [<span class="number">5</span>], [<span class="number">5</span>, <span class="number">0</span>], [<span class="number">5</span>, <span class="number">0</span>, <span class="number">-2</span>, <span class="number">-3</span>], [<span class="number">0</span>], [<span class="number">0</span>, <span class="number">-2</span>, <span class="number">-3</span>], [<span class="number">-2</span>, <span class="number">-3</span>]</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ol>
<li><code>1 &lt;= A.length &lt;= 30000</code></li>
<li><code>-10000 &lt;= A[i] &lt;= 10000</code></li>
<li><code>2 &lt;= K &lt;= 10000</code></li>
</ol>
<h2 id="思路-36"><a href="#思路-36" class="headerlink" title="思路"></a>思路</h2><p>一个前缀和的问题。设 $\rm presum[i]$是数组 $\rm A$ 第 $\rm i$ 个元素的前缀和，那么 $\rm A[i]$ 就可以表示为 $\rm presum[i] - presum[i-1]$，子数组 $\rm A[k]$ 到 $\rm A[i]$ 的和就是 $\rm presum[i] - presum[k-1]$。</p>
<p>题目要求的是满足 $\rm presum[i] - presum[k-1] \bmod K = 0$ 的子数组 $\rm [A[k],…,A[i]]$ 的个数，根据同余定理，可以把问题转换为求同余的 $\rm presum[i]$ 的个数。每扫描到数组中的一个数，就检查哈希表中有没有同余的数组，若有则计算同余的数量，若无把当前模 $\rm K$ 的余数保存在哈希表中，一次遍历即可解决问题。</p>
<h2 id="代码-36"><a href="#代码-36" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subarraysDivByK</span><span class="params">(self, A: List[int], K: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> len(A)==<span class="number">0</span> <span class="keyword">or</span> K==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        d = &#123;<span class="number">0</span>:<span class="number">1</span>&#125;</span><br><span class="line">        presum, cnt = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> A:</span><br><span class="line">            presum += a</span><br><span class="line">            m = presum % K</span><br><span class="line">            s = d.get(m, <span class="number">0</span>)</span><br><span class="line">            cnt += s</span><br><span class="line">            d[m] = s + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> cnt</span><br></pre></td></tr></table></figure>
<h1 id="994-腐烂的橘子"><a href="#994-腐烂的橘子" class="headerlink" title="994. 腐烂的橘子"></a>994. 腐烂的橘子</h1><p><a href="https://leetcode-cn.com/problems/rotting-oranges/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/rotting-oranges/</a></p>
<h2 id="题目描述-37"><a href="#题目描述-37" class="headerlink" title="题目描述"></a>题目描述</h2><p>在给定的网格中，每个单元格可以有以下三个值之一：</p>
<p>值 <code>0</code> 代表空单元格；<br>值 <code>1</code> 代表新鲜橘子；<br>值 <code>2</code> 代表腐烂的橘子。<br>每分钟，任何与腐烂的橘子（在 4 个正方向上）相邻的新鲜橘子都会腐烂。</p>
<p>返回直到单元格中没有新鲜橘子为止所必须经过的最小分钟数。如果不可能，返回 <code>-1</code>。</p>
<p>示例 1：</p>
<p><img src="http://images.yingwai.top/picgo/oranges.png" alt=""></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[[<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line">输出：<span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[[<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]]</span><br><span class="line">输出：<span class="number">-1</span></span><br><span class="line">解释：左下角的橘子（第 <span class="number">2</span> 行， 第 <span class="number">0</span> 列）永远不会腐烂，因为腐烂只会发生在 <span class="number">4</span> 个正向上。</span><br></pre></td></tr></table></figure>
<p>示例 3：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：[[<span class="number">0</span>,<span class="number">2</span>]]</span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：因为 <span class="number">0</span> 分钟时已经没有新鲜橘子了，所以答案就是 <span class="number">0</span> 。</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ol>
<li><code>1 &lt;= grid.length &lt;= 10</code></li>
<li><code>1 &lt;= grid[0].length &lt;= 10</code></li>
<li><code>grid[i][j]</code>仅为<code>0</code>、<code>1</code>或<code>2</code></li>
</ol>
<h2 id="思路-37"><a href="#思路-37" class="headerlink" title="思路"></a>思路</h2><p>广度优先搜索，一圈一圈往外腐蚀。</p>
<h2 id="代码-37"><a href="#代码-37" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">orangesRotting</span><span class="params">(self, grid: List[List[int]])</span> -&gt; int:</span></span><br><span class="line">        dx = [<span class="number">-1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">        dy = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">1</span>]</span><br><span class="line">        rotlist = list()    <span class="comment"># 腐烂橘子的队列</span></span><br><span class="line">        minute = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(grid)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(grid[<span class="number">0</span>])):</span><br><span class="line">                <span class="keyword">if</span> grid[i][j] == <span class="number">2</span>:</span><br><span class="line">                    rotlist.append([i, j])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> rotlist:  <span class="comment"># BFS循环</span></span><br><span class="line">            newrotlist = list()</span><br><span class="line">            <span class="keyword">for</span> rotorange <span class="keyword">in</span> rotlist:   <span class="comment"># 当前腐烂橘子的坐标</span></span><br><span class="line">                x0 = rotorange[<span class="number">0</span>]</span><br><span class="line">                y0 = rotorange[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):  <span class="comment"># 四个相邻方向的橘子腐烂</span></span><br><span class="line">                    x = x0 + dx[i]</span><br><span class="line">                    y = y0 + dy[i]</span><br><span class="line">                    <span class="keyword">if</span> <span class="number">0</span>&lt;=x&lt;len(grid) <span class="keyword">and</span> <span class="number">0</span>&lt;=y&lt;len(grid[<span class="number">0</span>]) <span class="keyword">and</span> grid[x][y]==<span class="number">1</span>:</span><br><span class="line">                        grid[x][y] = <span class="number">2</span></span><br><span class="line">                        newrotlist.append([x, y])</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> newrotlist:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            minute += <span class="number">1</span></span><br><span class="line">            rotlist = newrotlist[:]     <span class="comment"># 更新腐烂队列</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> grid:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> row:</span><br><span class="line">                    <span class="keyword">if</span> i == <span class="number">1</span>:  <span class="comment"># 还有新鲜的</span></span><br><span class="line">                        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> minute</span><br></pre></td></tr></table></figure>
<h1 id="1305-两棵二叉搜索树中的所有元素"><a href="#1305-两棵二叉搜索树中的所有元素" class="headerlink" title="1305. 两棵二叉搜索树中的所有元素"></a>1305. 两棵二叉搜索树中的所有元素</h1><p><a href="https://leetcode-cn.com/problems/all-elements-in-two-binary-search-trees/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/all-elements-in-two-binary-search-trees/</a></p>
<h2 id="题目描述-38"><a href="#题目描述-38" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你 root1 和 root2 这两棵二叉搜索树。</p>
<p>请你返回一个列表，其中包含 两棵树 中的所有整数并按 升序 排序。</p>
<p>示例 1：</p>
<p><img src="http://images.yingwai.top/picgo/lc1305f1.png" alt=""></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：root1 = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>], root2 = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>]</span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<p>示例 2：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：root1 = [<span class="number">0</span>,<span class="number">-10</span>,<span class="number">10</span>], root2 = [<span class="number">5</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">2</span>]</span><br><span class="line">输出：[<span class="number">-10</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">10</span>]</span><br></pre></td></tr></table></figure>
<p>示例 3：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：root1 = [], root2 = [<span class="number">5</span>,<span class="number">1</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">2</span>]</span><br><span class="line">输出：[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>]</span><br></pre></td></tr></table></figure>
<p>示例 4：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：root1 = [<span class="number">0</span>,<span class="number">-10</span>,<span class="number">10</span>], root2 = []</span><br><span class="line">输出：[<span class="number">-10</span>,<span class="number">0</span>,<span class="number">10</span>]</span><br></pre></td></tr></table></figure>
<p>示例 5：</p>
<p><img src="http://images.yingwai.top/picgo/lc1305f2.png" alt=""></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：root1 = [<span class="number">1</span>,<span class="literal">null</span>,<span class="number">8</span>], root2 = [<span class="number">8</span>,<span class="number">1</span>]</span><br><span class="line">输出：[<span class="number">1</span>,<span class="number">1</span>,<span class="number">8</span>,<span class="number">8</span>]</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>每棵树最多有 <code>5000</code> 个节点。</li>
<li>每个节点的值在 <code>[-10^5, 10^5]</code> 之间。</li>
</ul>
<h2 id="思路-38"><a href="#思路-38" class="headerlink" title="思路"></a>思路</h2><p>利用二叉搜索树性质，中序遍历得到每棵树的节点值的升序排列，然后再使用归并排序得到最终的结果数组。</p>
<ul>
<li>时间复杂度 $O(M + N)$，中序遍历和归并排序都是 $O(M + N)$，其中 $M,N$ 分别为两棵树的节点个数；</li>
<li>空间复杂度 $O(M+N)$，用到两个额外的数组来存储每棵树的升序排列。</li>
</ul>
<h2 id="代码-38"><a href="#代码-38" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getAllElements</span><span class="params">(self, root1: TreeNode, root2: TreeNode)</span> -&gt; List[int]:</span></span><br><span class="line">        t1, t2 = [], []</span><br><span class="line">        ans = []</span><br><span class="line">        self.helper(root1, t1)</span><br><span class="line">        self.helper(root2, t2)</span><br><span class="line">        i, j = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(t1) <span class="keyword">or</span> j &lt; len(t2):</span><br><span class="line">            <span class="keyword">if</span> i &lt; len(t1) <span class="keyword">and</span> (j == len(t2) <span class="keyword">or</span> t1[i] &lt; t2[j]):</span><br><span class="line">                ans.append(t1[i])</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                ans.append(t2[j])</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">helper</span><span class="params">(self, node, t)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> node: <span class="keyword">return</span></span><br><span class="line">        self.helper(node.left, t)</span><br><span class="line">        t.append(node.val)</span><br><span class="line">        self.helper(node.right, t)</span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></table></figure>
<h1 id="面试题-16-11-跳水板"><a href="#面试题-16-11-跳水板" class="headerlink" title="面试题 16.11. 跳水板"></a>面试题 16.11. 跳水板</h1><p><a href="https://leetcode-cn.com/problems/diving-board-lcci/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/diving-board-lcci/</a></p>
<h2 id="题目描述-39"><a href="#题目描述-39" class="headerlink" title="题目描述"></a>题目描述</h2><p>你正在使用一堆木板建造跳水板。有两种类型的木板，其中长度较短的木板长度为<code>shorter</code>，长度较长的木板长度为<code>longer</code>。你必须正好使用<code>k</code>块木板。编写一个方法，生成跳水板所有可能的长度。</p>
<p>返回的长度需要从小到大排列。</p>
<p>示例：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">shorter = <span class="number">1</span></span><br><span class="line">longer = <span class="number">2</span></span><br><span class="line">k = <span class="number">3</span></span><br><span class="line">输出： &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>0 &lt; shorter &lt;= longer</li>
<li>0 &lt;= k &lt;= 100000</li>
</ul>
<h2 id="思路-39"><a href="#思路-39" class="headerlink" title="思路"></a>思路</h2><p>因为每次都必须要正好使用 <code>k</code> 块木板，所以有以下公式</p>
<script type="math/tex; mode=display">
ans[i] = shorter\times i + longer \times (k-i)</script><p>其中 $0 \leq i \leq k$。</p>
<p>在 $longer &gt; shorter$ 的情况下，为什么每种组合下建造的跳水板长度都是不一样的？考虑以下两种不同的组合：第一种组合，有 $i$ 块短木板，则跳水板的长度是 $shorter \times i + longer \times (k−i)$；第二种组合，有 $j$ 块短木板，则跳水板的长度是 $shorter \times j+longer \times (k−j)$。其中 $0 \leq i&lt;j \leq k$。则两种不同的组合下的跳水板长度之差为：</p>
<script type="math/tex; mode=display">
(shorter \times j+longer \times (k−j)) - (shorter \times i + longer \times (k−i)) = (longer - shorter) \times (i - j)</script><p>因为 $longer &gt; shorter$ 且 $i&lt;j$，因此上式 $&lt;0$。</p>
<p>然后要考虑到极端情况：</p>
<ul>
<li>$k = 0$：直接输出空列表。</li>
<li>$longer = shorter$：输出列表中只有一个元素 $ans = [shorter(longer) \times k]$。</li>
</ul>
<h2 id="代码-39"><a href="#代码-39" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">divingBoard</span><span class="params">(self, shorter: int, longer: int, k: int)</span> -&gt; List[int]:</span></span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">if</span> k &gt; <span class="number">0</span>:</span><br><span class="line">            s, l = k, <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> shorter == longer:</span><br><span class="line">                ans.append(shorter*s)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">while</span> l &lt;= k:</span><br><span class="line">                    ans.append(shorter*s + longer*l)</span><br><span class="line">                    s -= <span class="number">1</span></span><br><span class="line">                    l += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<h1 id="面试题-17-12-BiNode"><a href="#面试题-17-12-BiNode" class="headerlink" title="面试题 17. 12. BiNode"></a>面试题 17. 12. BiNode</h1><p><a href="https://leetcode-cn.com/problems/binode-lcci/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/binode-lcci/</a></p>
<h2 id="题目描述-40"><a href="#题目描述-40" class="headerlink" title="题目描述"></a>题目描述</h2><p>二叉树数据结构 <code>TreeNode</code> 可用来表示单向链表（其中 <code>left</code> 置空，<code>right</code> 为下一个链表节点）。实现一个方法，把二叉搜索树转换为单向链表，要求依然符合二叉搜索树的性质，转换操作应是原址的，也就是在原始的二叉搜索树上直接修改。</p>
<p>返回转换后的单向链表的头节点。</p>
<p>注意：本题相对原题稍作改动</p>
<p>示例：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">输入： [<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="number">6</span>,<span class="number">0</span>]</span><br><span class="line">输出： [<span class="number">0</span>,<span class="literal">null</span>,<span class="number">1</span>,<span class="literal">null</span>,<span class="number">2</span>,<span class="literal">null</span>,<span class="number">3</span>,<span class="literal">null</span>,<span class="number">4</span>,<span class="literal">null</span>,<span class="number">5</span>,<span class="literal">null</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li>节点数量不会超过 100000。</li>
</ul>
<h2 id="思路-40"><a href="#思路-40" class="headerlink" title="思路"></a>思路</h2><p>中序遍历，用 <code>pre</code> 记录上一个处理的节点，访问到一个新的节点 <code>p</code> 时，将 <code>pre.right</code> 指向 <code>p</code> 并把 <code>p.left</code> 置空。</p>
<p>注意要将第一个处理的节点作为根节点。</p>
<h2 id="代码-40"><a href="#代码-40" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convertBiNode</span><span class="params">(self, root: TreeNode)</span> -&gt; TreeNode:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        s = []</span><br><span class="line">        p, pre = root, <span class="literal">None</span></span><br><span class="line">        <span class="keyword">while</span> s <span class="keyword">or</span> p:</span><br><span class="line">            <span class="keyword">while</span> p:</span><br><span class="line">                s.append(p)</span><br><span class="line">                p = p.left</span><br><span class="line">            p = s.pop()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> pre:</span><br><span class="line">                root = p</span><br><span class="line">                root.left = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pre.right = p</span><br><span class="line">                p.left = <span class="literal">None</span></span><br><span class="line">            pre = p</span><br><span class="line">            p = p.right</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>
<h1 id="面试题-17-13-恢复空格"><a href="#面试题-17-13-恢复空格" class="headerlink" title="面试题 17.13. 恢复空格"></a>面试题 17.13. 恢复空格</h1><p><a href="https://leetcode-cn.com/problems/re-space-lcci/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/re-space-lcci/</a></p>
<h2 id="题目描述-41"><a href="#题目描述-41" class="headerlink" title="题目描述"></a>题目描述</h2><p>哦，不！你不小心把一个长篇文章中的空格、标点都删掉了，并且大写也弄成了小写。像句子<code>&quot;I reset the computer. It still didn’t boot!&quot;</code>已经变成了<code>&quot;iresetthecomputeritstilldidntboot&quot;</code>。在处理标点符号和大小写之前，你得先把它断成词语。当然了，你有一本厚厚的词典<code>dictionary</code>，不过，有些词没在词典里。假设文章用<code>sentence</code>表示，设计一个算法，把文章断开，要求未识别的字符最少，返回未识别的字符数。</p>
<p>注意：本题相对原题稍作改动，只需返回未识别的字符数</p>
<p>示例：</p>
<figure class="highlight smalltalk"><table><tr><td class="code"><pre><span class="line">输入：</span><br><span class="line">dictionary = [<span class="comment">"looked"</span>,<span class="comment">"just"</span>,<span class="comment">"like"</span>,<span class="comment">"her"</span>,<span class="comment">"brother"</span>]</span><br><span class="line">sentence = <span class="comment">"jesslookedjustliketimherbrother"</span></span><br><span class="line">输出： <span class="number">7</span></span><br><span class="line">解释： 断句后为<span class="comment">"jess looked just like tim her brother"</span>，共<span class="number">7</span>个未识别字符。</span><br></pre></td></tr></table></figure>
<p>提示：</p>
<ul>
<li><code>0 &lt;= len(sentence) &lt;= 1000</code></li>
<li><code>dictionary</code>中总字符数不超过 <code>150000</code>。</li>
<li>你可以认为<code>dictionary</code>和<code>sentence</code>中只包含小写字母。</li>
</ul>
<h2 id="思路-41"><a href="#思路-41" class="headerlink" title="思路"></a>思路</h2><p>动态规划，用 $dp[i]$ 表示<code>sentence</code>中以第 $index$ 个字符结尾的字符串中未识别的字符数，其中 $i = index + 1$（这里令 $dp[0]=0$，因为可能出现前 $k$ 个字符组成一个词，这样做利于判断）。对于每个 $index$，都对<code>dictionary</code>进行一次遍历，用 $len$ 表示<code>dictionary</code>中每个词的长度，则可以得到动态方程：</p>
<p>每扫描到一个 $i$，都先把 $dp[i]$ 初始化为 $i$，然后有</p>
<p>当<code>sentence</code>中第 $index - len + 1$ 到 第 $index$ 个字符在<code>dictionary</code>中时，</p>
<script type="math/tex; mode=display">
dp[i] = \min (dp[i],dp[i-len])</script><p>其它情况，</p>
<script type="math/tex; mode=display">
dp[i] = (dp[i], dp[i-1]+1)</script><p>最后 $dp$ 数组中的最后一个元素即为结果。</p>
<h2 id="代码-41"><a href="#代码-41" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">respace</span><span class="params">(self, dictionary: List[str], sentence: str)</span> -&gt; int:</span></span><br><span class="line">        dp = []</span><br><span class="line">        dp.append(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(sentence)+<span class="number">1</span>):</span><br><span class="line">            index = i - <span class="number">1</span></span><br><span class="line">            t = i</span><br><span class="line">            <span class="keyword">for</span> word <span class="keyword">in</span> dictionary:</span><br><span class="line">                l = len(word)</span><br><span class="line">                <span class="keyword">if</span> index + <span class="number">1</span> - l &gt;= <span class="number">0</span> <span class="keyword">and</span> sentence[index-l+<span class="number">1</span>:index+<span class="number">1</span>] <span class="keyword">in</span> dictionary:</span><br><span class="line">                    t = min(t, dp[i-l])</span><br><span class="line">                    <span class="keyword">if</span> i - l == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                t = min(t, dp[i<span class="number">-1</span>]+<span class="number">1</span>)</span><br><span class="line">            dp.append(t)</span><br><span class="line">        <span class="keyword">return</span> dp[len(sentence)]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>Java正则表达式以及Date、DateFormat和Calendar类</title>
    <url>/2020/08/29/Java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%BB%A5%E5%8F%8ADate%E3%80%81DateFormat%E5%92%8CCalendar%E7%B1%BB/</url>
    <content><![CDATA[<hr>
<a id="more"></a>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>用来定义匹配规则，匹配一系列符合某个句法规则的字符串。</p>
<h3 id="正则表达式的匹配规则"><a href="#正则表达式的匹配规则" class="headerlink" title="正则表达式的匹配规则"></a>正则表达式的匹配规则</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">字符</th>
<th>含义</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>x</code></td>
<td>代表字符 <code>x</code></td>
<td>匹配规则为 <code>&quot;a&quot;</code>，那么需要匹配的字符串内容就是 <code>&quot;a&quot;</code></td>
</tr>
<tr>
<td style="text-align:left"><code>\\</code></td>
<td>代表反斜线字符 <code>&#39;\&#39;</code></td>
<td>匹配规则为 <code>&quot;\\&quot;</code> ，那么需要匹配的字符串内容就是 <code>&quot;\&quot;</code></td>
</tr>
<tr>
<td style="text-align:left"><code>\t</code></td>
<td>制表符</td>
<td>匹配规则为 <code>&quot;\t&quot;</code>，那么对应的效果就是产生一个制表符的空间</td>
</tr>
<tr>
<td style="text-align:left"><code>\n</code></td>
<td>换行符</td>
<td>匹配规则为 <code>&quot;\n&quot;</code>，那么对应的效果就是换行，光标在原有位置的下一行</td>
</tr>
<tr>
<td style="text-align:left"><code>\r</code></td>
<td>回车符</td>
<td>匹配规则为 <code>&quot;\r&quot;</code>，那么对应的效果就是回车后的效果，光标来到下一行行首</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th>字符类</th>
<th>含义</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>[abc]</code></td>
<td>代表字符 <code>a, b</code> 或 <code>c</code></td>
<td>匹配规则为 <code>&quot;[abc]&quot;</code>，那么需要匹配的内容就是字符 <code>a</code> 或者字符 <code>b</code> 或者字符 <code>c</code> 中的一个</td>
</tr>
<tr>
<td><code>[^abc]</code></td>
<td>代表除了字符 <code>a, b</code> 或 <code>c</code> 以外的任何字符</td>
<td>匹配规则为 <code>&quot;[^abc]&quot;</code>，那么需要匹配的内容就是不是字符 <code>a</code> 或者字符 <code>b</code> 或者字符 <code>c</code> 的任意一个字符</td>
</tr>
<tr>
<td><code>[a-zA-z]</code></td>
<td>代表 <code>a</code> 到 <code>z</code> 或 <code>A</code> 到 <code>Z</code>，两头的字母包括在内</td>
<td>匹配规则为 <code>&quot;[a-zA-Z]&quot;</code>，那么需要匹配的是一个大写或者小写字母</td>
</tr>
<tr>
<td><code>[0-9]</code></td>
<td>代表 <code>0</code> 到 <code>9</code> 数字，两头的数字包括在内</td>
<td>匹配规则为 <code>&quot;[0-9]&quot;</code>，那么需要匹配的是一个数字</td>
</tr>
<tr>
<td><code>[a-zZ-Z_0-9]</code></td>
<td>代表字符或者数字或者下划线（即单词字符）</td>
<td>匹配规则为 <code>&quot;[a-zZ-Z_0-9]&quot;</code>，那么需要匹配的是一个字符或者是一个数字或一个下划线</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th>预定义字符类</th>
<th>含义</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>.</code></td>
<td>代表任何字符</td>
<td>匹配规则为 <code>&quot;.&quot;</code>，那么需要匹配的是一个任意字符。如果只想匹配字符 <code>.</code> 的话，使用匹配规则 <code>&quot;\\.&quot;</code> 来实现</td>
</tr>
<tr>
<td><code>\d</code></td>
<td>代表0到9数字，相当于 <code>[0-9]</code></td>
<td>匹配规则为 <code>&quot;\d&quot;</code>，那么需要匹配的是一个数字</td>
</tr>
<tr>
<td><code>\w</code></td>
<td>代表的字母或者数字或者下划线，相当于 <code>[a-zA-Z_0-9]</code></td>
<td>匹配规则为 <code>\w</code>，那么需要匹配的是一个字母或者是一个数字或一个下划线</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th>边界匹配器</th>
<th>含义</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>^</code></td>
<td>代表行的开头</td>
<td>匹配规则为 <code>^[abc][0-9]$</code>，那么需要匹配的内容从 <code>[abc]</code> 这个位置开始，相当于左双引号</td>
</tr>
<tr>
<td>$$`</td>
<td>代表行的结尾</td>
<td>匹配规则为 <code>^[abc][0-9]$$，那么需要匹配的内容以</code>[0-9]` 这个结束，相当于右双引号</td>
</tr>
<tr>
<td><code>\b</code></td>
<td>代表单词边界</td>
<td>匹配规则为 <code>&quot;\b[abc]\b&quot;</code>，那么代表的是字母 <code>a</code> 或 <code>b</code> 或 <code>c</code> 的左右两边需要的是非单词字符（<code>[a-zA-Z_0-9]</code>）</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th>数量词</th>
<th>含义</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>X?</code></td>
<td>代表 <code>X</code> 出现一次或一次也没有</td>
<td>匹配规则为 <code>&quot;a?&quot;</code>，那么需要匹配的内容是多个字符 <code>a</code>，或者一个 <code>a</code> 都没有</td>
</tr>
<tr>
<td><code>X*</code></td>
<td>代表 <code>X</code> 出现零次或多次</td>
<td>匹配规则为 <code>&quot;a*&quot;</code>，那么需要匹配的内容是多个字符 <code>a</code>，或者一个 <code>a</code> 都没有</td>
</tr>
<tr>
<td><code>X+</code></td>
<td>代表 <code>X</code> 出现一次或多次</td>
<td>匹配规则为 <code>&quot;a+&quot;</code>，那么需要匹配的内容是多个字符 <code>a</code>，或一个 <code>a</code></td>
</tr>
<tr>
<td><code>X{n}</code></td>
<td>代表 <code>X</code> 恰好出现 n 次</td>
<td>匹配规则为 <code>&quot;a{5}&quot;</code>，那么需要匹配的内容是5个字符 <code>a</code></td>
</tr>
<tr>
<td><code>X{n,}</code></td>
<td>代表 <code>X</code> 至少出现 n 次</td>
<td>匹配规则为 <code>&quot;a{5,}&quot;</code>，那么需要匹配的内容是最少有5个字符 <code>a</code></td>
</tr>
<tr>
<td><code>X{n,m}</code></td>
<td>代表 <code>X</code> 至少出现 n 次，但是不超过 m 次</td>
<td>匹配规则为 <code>&quot;a{5,8}&quot;</code>，那么需要匹配的内容是5到8个字符 <code>a</code></td>
</tr>
</tbody>
</table>
</div>
<h3 id="正则表达式的常用方法"><a href="#正则表达式的常用方法" class="headerlink" title="正则表达式的常用方法"></a>正则表达式的常用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String regex)</span> <span class="comment">// 判断字符是否匹配给定的规则</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String[] <span class="title">split</span><span class="params">(String regex)</span> <span class="comment">// 根据给定的正则表达式的匹配规则，拆分此字符串</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replaceAll</span><span class="params">(String regex,String replacement)</span>	<span class="comment">// 将符合规则的字符串内容，全部替换为新字符串</span></span></span><br></pre></td></tr></table></figure>
<h2 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h2><p>日期/时间类。</p>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Date</span><span class="params">()</span> <span class="comment">// 系统当前日期时间</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Date</span><span class="params">(<span class="keyword">long</span> date)</span> <span class="comment">// 得到距离 1970年1月1日0点 date毫秒的日期时间</span></span></span><br></pre></td></tr></table></figure>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTime</span><span class="params">()</span> <span class="comment">// 获取日期所对应的毫秒值</span></span></span><br></pre></td></tr></table></figure>
<h2 id="DateFormat类"><a href="#DateFormat类" class="headerlink" title="DateFormat类"></a>DateFormat类</h2><p>是日期/时间格式化子类的抽象类，使用其子类 <code>SimpledateFormat</code> 实例化</p>
<h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SimpleDateFormat</span><span class="params">()</span> <span class="comment">// 默认的格式化操作</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SimpleDateFormat</span><span class="params">(String pattern)</span> <span class="comment">// 按照指定的格式，进行日期初始化</span></span></span><br></pre></td></tr></table></figure>
<p><strong>日期和时间模式：</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>y</code></td>
<td>年</td>
</tr>
<tr>
<td><code>M</code></td>
<td>年中的月份</td>
</tr>
<tr>
<td><code>d</code></td>
<td>月份中的天数</td>
</tr>
<tr>
<td><code>H</code></td>
<td>一天中的小时数（0-23）</td>
</tr>
<tr>
<td><code>m</code></td>
<td>小时中的分钟数</td>
</tr>
<tr>
<td><code>s</code></td>
<td>分钟中的秒数</td>
</tr>
<tr>
<td><code>S</code></td>
<td>毫秒数</td>
</tr>
</tbody>
</table>
</div>
<h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">format</span><span class="params">(Date date)</span> <span class="comment">// 把日期格式化成字符串</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">parse</span><span class="params">(String source)</span> <span class="comment">// 把日期字符串转换成日期对象</span></span></span><br></pre></td></tr></table></figure>
<h2 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h2><p>日历类，可获取日期中指定字段的值</p>
<h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">getInstance</span><span class="params">()</span> <span class="comment">// 获取日期对象</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> field)</span>	<span class="comment">// 获取时间字段值</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> field,<span class="keyword">int</span> amount)</span>	<span class="comment">// 指定字段增加某值</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> field,<span class="keyword">int</span> value)</span> <span class="comment">// 设置指定字段的值</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Date <span class="title">getTime</span><span class="params">()</span>	<span class="comment">// 获取该日历对象转成的日期对象</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java常用API</title>
    <url>/2020/08/31/Java%E5%B8%B8%E7%94%A8API/</url>
    <content><![CDATA[<hr>
<a id="more"></a>
<h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><p>Object类是所有类的超类，祖宗类。java仲所有的类都直接或间接地继承这个类</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> <span class="comment">// 返回当前对象中的内容, 对于Object类默认操作来说，返回的对象的类型+@+内存地址值</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> <span class="comment">// 比较两个对象内容是否相同，对于Object类默认操作来说,比较的是地址值</span></span></span><br></pre></td></tr></table></figure>
<h2 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h2><p>字符串类，字符串是常量；它们的值在创建之后不能更改</p>
<h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> <span class="comment">// 判断两个字符串中的内容是否相同</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">equalsIgnoreCase</span><span class="params">(String str)</span>  <span class="comment">// 判断两个字符串中的内容是否相同, 忽略大小写</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(String str)</span> <span class="comment">// 判断该字符串中 是否包含给定的字符串</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String str)</span> <span class="comment">// 判断该字符串 是否以给定的字符串开头</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">endsWith</span><span class="params">(String str)</span> <span class="comment">// 判断该字符串 是否以给定的字符串结尾</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> <span class="comment">// 判断该字符串的内容是否为空的字符串  ""</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span> <span class="comment">// 获取该字符串的长度</span></span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="comment">// 获取该字符串中指定位置上的字符 </span></span></span><br><span class="line"><span class="function">String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start)</span> <span class="comment">// 从指定位置开始，到末尾结束，截取该字符串，返回新字符串</span></span></span><br><span class="line"><span class="function">String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span> <span class="comment">// 从指定位置开始，到指定位置结束，截取该字符串，返回新字符串 </span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">int</span> ch )</span> <span class="comment">// 获取给定的字符，在该字符串中第一次出现的位置</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str)</span> <span class="comment">// 获取给定的字符串，在该字符串中第一次出现的位置</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">int</span> ch,<span class="keyword">int</span> fromIndex)</span> <span class="comment">// 从指定位置开始，获取给定的字符，在该字符</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">byte</span>[] <span class="title">getBytes</span><span class="params">()</span> <span class="comment">// 把该字符串 转换成 字节数组</span></span></span><br><span class="line"><span class="function"><span class="keyword">char</span>[] <span class="title">toCharArray</span><span class="params">()</span> <span class="comment">// 把该字符串 转换成 字符数组</span></span></span><br><span class="line"><span class="function">String <span class="title">replace</span><span class="params">(<span class="keyword">char</span> old,<span class="keyword">char</span> new)</span> <span class="comment">// 在该字符串中，将给定的旧字符，用新字符替换</span></span></span><br><span class="line"><span class="function">String <span class="title">replace</span><span class="params">(String old,String new)</span> <span class="comment">// 在该字符串中， 将给定的旧字符串，用新字符串替换</span></span></span><br><span class="line"><span class="function">String <span class="title">trim</span><span class="params">()</span> <span class="comment">// 去除字符串两端空格，中间的不会去除，返回一个新字符串</span></span></span><br><span class="line"><span class="function">String <span class="title">toLowerCase</span><span class="params">()</span> <span class="comment">// 把该字符串转换成 小写字符串 </span></span></span><br><span class="line"><span class="function">String <span class="title">toUpperCase</span><span class="params">()</span> <span class="comment">// 把该字符串转换成 大写字符串</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str,<span class="keyword">int</span> fromIndex)</span> <span class="comment">// 从指定位置开始，获取给定的字符串，在该字符串中第一次出现的位置</span></span></span><br></pre></td></tr></table></figure>
<h2 id="StringBuffer-StringBuilder类"><a href="#StringBuffer-StringBuilder类" class="headerlink" title="StringBuffer/StringBuilder类"></a>StringBuffer/StringBuilder类</h2><h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">append</span><span class="params">(String str)</span> <span class="comment">// 在原有字符串缓冲区内容基础上，在末尾追加新数据</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">insert</span><span class="params">(<span class="keyword">int</span> offset,String str)</span> <span class="comment">// 在原有字符串缓冲区内容基础上，在指定位置插入新数据</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">deleteCharAt</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="comment">// 在原有字符串缓冲区内容基础上，删除指定位置上的字符</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">delete</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span> <span class="comment">// 在原有字符串缓冲区内容基础上，删除指定范围内的多个字符</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">replace</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end,String str)</span> <span class="comment">// 在原有字符串缓冲区内容基础上，将指定范围内的多个字符 用给定的字符串替换</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">reverse</span><span class="params">()</span> <span class="comment">// 将字符串缓冲区的内容 反转  "abc"----"cba"</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start)</span> <span class="comment">// 从指定位置开始，到末尾结束，截取该字符串缓冲区，返回新字符串</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span>  <span class="comment">// 从指定位置开始，到指定位置结束，截取该字符串缓冲区，返回新字符串</span></span></span><br></pre></td></tr></table></figure>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>用来定义匹配规则，匹配一系列符合某个句法规则的字符串。</p>
<h3 id="正则表达式的匹配规则"><a href="#正则表达式的匹配规则" class="headerlink" title="正则表达式的匹配规则"></a>正则表达式的匹配规则</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">字符</th>
<th>含义</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>x</code></td>
<td>代表字符 <code>x</code></td>
<td>匹配规则为 <code>&quot;a&quot;</code>，那么需要匹配的字符串内容就是 <code>&quot;a&quot;</code></td>
</tr>
<tr>
<td style="text-align:left"><code>\\</code></td>
<td>代表反斜线字符 <code>&#39;\&#39;</code></td>
<td>匹配规则为 <code>&quot;\\&quot;</code> ，那么需要匹配的字符串内容就是 <code>&quot;\&quot;</code></td>
</tr>
<tr>
<td style="text-align:left"><code>\t</code></td>
<td>制表符</td>
<td>匹配规则为 <code>&quot;\t&quot;</code>，那么对应的效果就是产生一个制表符的空间</td>
</tr>
<tr>
<td style="text-align:left"><code>\n</code></td>
<td>换行符</td>
<td>匹配规则为 <code>&quot;\n&quot;</code>，那么对应的效果就是换行，光标在原有位置的下一行</td>
</tr>
<tr>
<td style="text-align:left"><code>\r</code></td>
<td>回车符</td>
<td>匹配规则为 <code>&quot;\r&quot;</code>，那么对应的效果就是回车后的效果，光标来到下一行行首</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th>字符类</th>
<th>含义</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>[abc]</code></td>
<td>代表字符 <code>a, b</code> 或 <code>c</code></td>
<td>匹配规则为 <code>&quot;[abc]&quot;</code>，那么需要匹配的内容就是字符 <code>a</code> 或者字符 <code>b</code> 或者字符 <code>c</code> 中的一个</td>
</tr>
<tr>
<td><code>[^abc]</code></td>
<td>代表除了字符 <code>a, b</code> 或 <code>c</code> 以外的任何字符</td>
<td>匹配规则为 <code>&quot;[^abc]&quot;</code>，那么需要匹配的内容就是不是字符 <code>a</code> 或者字符 <code>b</code> 或者字符 <code>c</code> 的任意一个字符</td>
</tr>
<tr>
<td><code>[a-zA-z]</code></td>
<td>代表 <code>a</code> 到 <code>z</code> 或 <code>A</code> 到 <code>Z</code>，两头的字母包括在内</td>
<td>匹配规则为 <code>&quot;[a-zA-Z]&quot;</code>，那么需要匹配的是一个大写或者小写字母</td>
</tr>
<tr>
<td><code>[0-9]</code></td>
<td>代表 <code>0</code> 到 <code>9</code> 数字，两头的数字包括在内</td>
<td>匹配规则为 <code>&quot;[0-9]&quot;</code>，那么需要匹配的是一个数字</td>
</tr>
<tr>
<td><code>[a-zZ-Z_0-9]</code></td>
<td>代表字符或者数字或者下划线（即单词字符）</td>
<td>匹配规则为 <code>&quot;[a-zZ-Z_0-9]&quot;</code>，那么需要匹配的是一个字符或者是一个数字或一个下划线</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th>预定义字符类</th>
<th>含义</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>.</code></td>
<td>代表任何字符</td>
<td>匹配规则为 <code>&quot;.&quot;</code>，那么需要匹配的是一个任意字符。如果只想匹配字符 <code>.</code> 的话，使用匹配规则 <code>&quot;\\.&quot;</code> 来实现</td>
</tr>
<tr>
<td><code>\d</code></td>
<td>代表0到9数字，相当于 <code>[0-9]</code></td>
<td>匹配规则为 <code>&quot;\d&quot;</code>，那么需要匹配的是一个数字</td>
</tr>
<tr>
<td><code>\w</code></td>
<td>代表的字母或者数字或者下划线，相当于 <code>[a-zA-Z_0-9]</code></td>
<td>匹配规则为 <code>\w</code>，那么需要匹配的是一个字母或者是一个数字或一个下划线</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th>边界匹配器</th>
<th>含义</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>^</code></td>
<td>代表行的开头</td>
<td>匹配规则为 <code>^[abc][0-9]$</code>，那么需要匹配的内容从 <code>[abc]</code> 这个位置开始，相当于左双引号</td>
</tr>
<tr>
<td>$$`</td>
<td>代表行的结尾</td>
<td>匹配规则为 <code>^[abc][0-9]$$，那么需要匹配的内容以</code>[0-9]` 这个结束，相当于右双引号</td>
</tr>
<tr>
<td><code>\b</code></td>
<td>代表单词边界</td>
<td>匹配规则为 <code>&quot;\b[abc]\b&quot;</code>，那么代表的是字母 <code>a</code> 或 <code>b</code> 或 <code>c</code> 的左右两边需要的是非单词字符（<code>[a-zA-Z_0-9]</code>）</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th>数量词</th>
<th>含义</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>X?</code></td>
<td>代表 <code>X</code> 出现一次或一次也没有</td>
<td>匹配规则为 <code>&quot;a?&quot;</code>，那么需要匹配的内容是多个字符 <code>a</code>，或者一个 <code>a</code> 都没有</td>
</tr>
<tr>
<td><code>X*</code></td>
<td>代表 <code>X</code> 出现零次或多次</td>
<td>匹配规则为 <code>&quot;a*&quot;</code>，那么需要匹配的内容是多个字符 <code>a</code>，或者一个 <code>a</code> 都没有</td>
</tr>
<tr>
<td><code>X+</code></td>
<td>代表 <code>X</code> 出现一次或多次</td>
<td>匹配规则为 <code>&quot;a+&quot;</code>，那么需要匹配的内容是多个字符 <code>a</code>，或一个 <code>a</code></td>
</tr>
<tr>
<td><code>X{n}</code></td>
<td>代表 <code>X</code> 恰好出现 n 次</td>
<td>匹配规则为 <code>&quot;a{5}&quot;</code>，那么需要匹配的内容是5个字符 <code>a</code></td>
</tr>
<tr>
<td><code>X{n,}</code></td>
<td>代表 <code>X</code> 至少出现 n 次</td>
<td>匹配规则为 <code>&quot;a{5,}&quot;</code>，那么需要匹配的内容是最少有5个字符 <code>a</code></td>
</tr>
<tr>
<td><code>X{n,m}</code></td>
<td>代表 <code>X</code> 至少出现 n 次，但是不超过 m 次</td>
<td>匹配规则为 <code>&quot;a{5,8}&quot;</code>，那么需要匹配的内容是5到8个字符 <code>a</code></td>
</tr>
</tbody>
</table>
</div>
<h3 id="正则表达式的常用方法"><a href="#正则表达式的常用方法" class="headerlink" title="正则表达式的常用方法"></a>正则表达式的常用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String regex)</span> <span class="comment">// 判断字符是否匹配给定的规则</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String[] <span class="title">split</span><span class="params">(String regex)</span> <span class="comment">// 根据给定的正则表达式的匹配规则，拆分此字符串</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">replaceAll</span><span class="params">(String regex,String replacement)</span>	<span class="comment">// 将符合规则的字符串内容，全部替换为新字符串</span></span></span><br></pre></td></tr></table></figure>
<h2 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h2><p>日期/时间类。</p>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Date</span><span class="params">()</span> <span class="comment">// 系统当前日期时间</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Date</span><span class="params">(<span class="keyword">long</span> date)</span> <span class="comment">// 得到距离 1970年1月1日0点 date毫秒的日期时间</span></span></span><br></pre></td></tr></table></figure>
<h3 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getTime</span><span class="params">()</span> <span class="comment">// 获取日期所对应的毫秒值</span></span></span><br></pre></td></tr></table></figure>
<h2 id="DateFormat类"><a href="#DateFormat类" class="headerlink" title="DateFormat类"></a>DateFormat类</h2><p>是日期/时间格式化子类的抽象类，使用其子类 <code>SimpledateFormat</code> 实例化</p>
<h3 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SimpleDateFormat</span><span class="params">()</span> <span class="comment">// 默认的格式化操作</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SimpleDateFormat</span><span class="params">(String pattern)</span> <span class="comment">// 按照指定的格式，进行日期初始化</span></span></span><br></pre></td></tr></table></figure>
<p><strong>日期和时间模式：</strong></p>
<div class="table-container">
<table>
<thead>
<tr>
<th>符号</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>y</code></td>
<td>年</td>
</tr>
<tr>
<td><code>M</code></td>
<td>年中的月份</td>
</tr>
<tr>
<td><code>d</code></td>
<td>月份中的天数</td>
</tr>
<tr>
<td><code>H</code></td>
<td>一天中的小时数（0-23）</td>
</tr>
<tr>
<td><code>m</code></td>
<td>小时中的分钟数</td>
</tr>
<tr>
<td><code>s</code></td>
<td>分钟中的秒数</td>
</tr>
<tr>
<td><code>S</code></td>
<td>毫秒数</td>
</tr>
</tbody>
</table>
</div>
<h3 id="方法-4"><a href="#方法-4" class="headerlink" title="方法"></a>方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">format</span><span class="params">(Date date)</span> <span class="comment">// 把日期格式化成字符串</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">parse</span><span class="params">(String source)</span> <span class="comment">// 把日期字符串转换成日期对象</span></span></span><br></pre></td></tr></table></figure>
<h2 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h2><p>日历类，可获取日期中指定字段的值</p>
<h3 id="方法-5"><a href="#方法-5" class="headerlink" title="方法"></a>方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">getInstance</span><span class="params">()</span> <span class="comment">// 获取日期对象</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> field)</span>	<span class="comment">// 获取时间字段值</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> field,<span class="keyword">int</span> amount)</span>	<span class="comment">// 指定字段增加某值</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span> field,<span class="keyword">int</span> value)</span> <span class="comment">// 设置指定字段的值</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Date <span class="title">getTime</span><span class="params">()</span>	<span class="comment">// 获取该日历对象转成的日期对象</span></span></span><br></pre></td></tr></table></figure>
<h2 id="基本类型包装类"><a href="#基本类型包装类" class="headerlink" title="基本类型包装类"></a>基本类型包装类</h2><h3 id="8种基本类型对应的包装类"><a href="#8种基本类型对应的包装类" class="headerlink" title="8种基本类型对应的包装类"></a>8种基本类型对应的包装类</h3><div class="table-container">
<table>
<thead>
<tr>
<th>基本类型</th>
<th>包装类</th>
</tr>
</thead>
<tbody>
<tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>char</td>
<td>Character</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
</tbody>
</table>
</div>
<h3 id="自动装箱、自动拆箱"><a href="#自动装箱、自动拆箱" class="headerlink" title="自动装箱、自动拆箱"></a>自动装箱、自动拆箱</h3><ul>
<li>自动装箱：基本数值转成对象（<code>int -&gt; Integer</code>）</li>
<li>自动拆箱：对象转成基本数值（<code>Integer -&gt; int</code>）</li>
</ul>
<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">parseInt</span><span class="params">(String str)</span>		<span class="comment">// 把字符串转成基本类型int</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">(<span class="keyword">int</span> x)</span>	<span class="comment">// 把基本类型int转成字符串</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> x)</span>	<span class="comment">// 把基本类型i字符串转成Integer对象</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">intValue</span><span class="params">()</span>	<span class="comment">// 以int类型返回该包装类对象的值</span></span></span><br></pre></td></tr></table></figure>
<h2 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h2><p>系统属性信息工具类</p>
<h3 id="方法-6"><a href="#方法-6" class="headerlink" title="方法"></a>方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">currentTimeMillis</span><span class="params">()</span>	<span class="comment">// 获取当前系统时间与1970年01月01日00:00点之间的毫秒差值</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exit</span><span class="params">(<span class="keyword">int</span> status)</span>		<span class="comment">// 用来结束正在运行的Java程序。参数传入一个数字即可。通常传入0记为正常状态，其他为异常状态</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">gc</span><span class="params">()</span>		<span class="comment">// 用来运行JVM中的垃圾回收器，完成内存中垃圾的清除。</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getProperties</span><span class="params">()</span>	<span class="comment">// 用来获取指系统属性信息</span></span></span><br></pre></td></tr></table></figure>
<h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><p>数组操作工具类</p>
<h3 id="方法-7"><a href="#方法-7" class="headerlink" title="方法"></a>方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span>	<span class="comment">// 用来对指定数组中的元素进行排序（元素值从小到大进行排序）</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toString</span><span class="params">()</span>		<span class="comment">// 用来返回指定数组元素内容的字符串形式</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">binarySearch</span><span class="params">(要找的元素)</span>	<span class="comment">// 在指定数组中，查找给定元素值出现的位置。若没有查询到，返回位置为-插入点-1。要求该数组必须是个有序的数组</span></span></span><br></pre></td></tr></table></figure>
<h2 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h2><p>数学运算工具类</p>
<h3 id="方法-8"><a href="#方法-8" class="headerlink" title="方法"></a>方法</h3><ul>
<li><code>abs(int a)</code>方法,结果都为正数</li>
<li><code>ceil(int a)</code>方法，结果为比参数值大的最小整数的double值</li>
<li><code>floor(int a)</code>方法，结果为比参数值小的最大整数的double值</li>
<li><code>max(int a, int b)</code>方法，返回两个参数值中较大的值</li>
<li><code>min(int a, int b)</code>方法，返回两个参数值中较小的值</li>
<li><code>pow(int a, int p)</code>方法，返回第一个参数的第二个参数次幂的值</li>
<li><code>round(int a)</code>方法，返回参数值四舍五入的结果</li>
<li><code>random()</code>方法，产生一个大于等于0.0且小于1.0的double小数</li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
